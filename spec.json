{
  "openapi": "3.0.3",
  "info": {
    "title": "The Bank of London API",
    "version": "2.0.0",
    "description": ""
  },
  "servers": [
    {
      "url": "/"
    }
  ],
  "tags": [
    {
      "name": "Accounts"
    },
    {
      "name": "Customer Management"
    },
    {
      "name": "Virtual Account Management"
    },
    {
      "name": "Confirmation of Payee"
    },
    {
      "name": "Payments"
    },
    {
      "name": "Standing Orders"
    },
    {
      "name": "Transactions"
    },
    {
      "name": "Mandates (Direct Debits)"
    },
    {
      "name": "Statements"
    },
    {
      "name": "Webhook Management"
    }
  ],
  "paths": {
    "/v2/accounts": {
      "post": {
        "operationId": "CreateAccount",
        "summary": "Create Account",
        "description": "Creates a Physical Account. Physical accounts can be created for Individuals and Organisations. It accepts accountOwner type, account type and id as required body parameters. Nickname and salesProductId are optional parameters.\n\n ### Example request body:\n```JSON\n{\n  \"type\": \"BAAS_PHYSICAL_ACCOUNT\",\n  \"accountOwner\": {\n    \"type\": \"INDIVIDUAL\",\n    \"id\": \"hkHcJybfBAKjZac5eiBAr\"\n  }\n}\n```\n\n### Example response body:\n```JSON\n{\n  \"id\": \"GB-040075-87654321\",\n  \"currency\": \"GBP\",\n  \"type\": \"BAAS_PHYSICAL_ACCOUNT\",\n  \"accountOwner\": {\n    \"type\": \"INDIVIDUAL\",\n    \"id\": \"hkHcJybfBAKjZac5eiBAr\"\n  }\n}\n```",
        "parameters": [
          {
            "$ref": "#/components/parameters/JwsSignature"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAccountRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Account created successfully",
            "headers": {
              "x-correlation-id": {
                "description": "A unique identifier assigned to each request, facilitating issue tracing. In the event that a problem arises with a request, this ID can be provided to The Bank of London support team for assistance.",
                "schema": {
                  "type": "string"
                },
                "example": "2579248247516384065",
                "required": true
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateAccountResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "tags": ["Accounts"]
      },
      "get": {
        "operationId": "GetAccounts",
        "summary": "Get Accounts",
        "description": "Retrieves the list of bank accounts that are associated with the consumer application.\n\n### Example request:\n\n```\nGET /accounts\n```\n\n### Example response:\n```JSON\n{\n  \"accounts\": [\n    {\n      \"id\": \"GB-040075-12345678\",\n      \"createdDateTime\": \"2022-01-30T08:30:00Z\",\n      \"currency\": \"GBP\",\n      \"balances\": {\n        \"available\": 1000,\n        \"current\":  2000\n      },\n      \"totals\": {\n        \"totalMonthlyCreditInterestAccrued\": 0,\n        \"totalCreditInterestPaid\": 0,\n        \"totalCreditsCurrentMonth\": 0,\n        \"totalDebitsCurrentMonth\": 0\n      },\n      \"accountHolderName\": \"John Smith\",\n      \"nickname\": \"Business Transactions\",\n      \"status\": {\n        \"identifier\": \"ACTIVE\"\n      },\n      \"countryCode\": \"GB\",\n      \"identifiers\": {\n        {...}\n      },\n      \"type\": \"OPERATING\",\n      \"lockType\": \"NONE\",\n      \"limits\": {\n        \"minimumLimit\": 0\n      },\n      \"accountOwner\": {\n        \"type\": \"INDIVIDUAL\",\n        \"id\": \"kPRkRLVrOYGasouzr4hz8\"\n      }\n    },\n    {...}\n  ],\n  \"metadata\": {\n    \"totalRecords\": 100,\n    \"page\": 1,\n    \"pageSize\": 20\n  },\n}\n```\n\n### Example request:\n```\nGET /accounts?accountOwnership=ALL\n```\n\n### Example response:\n```JSON\n{\n  \"accounts\": [\n    {\n      \"id\": \"GB-040075-12345678\",\n      \"createdDateTime\": \"2022-01-30T08:30:00Z\",\n      \"currency\": \"GBP\",\n      \"balances\": {\n        \"available\": 1000,\n        \"current\": 2000\n      },\n      \"totals\": {\n        \"totalMonthlyCreditInterestAccrued\": 0,\n        \"totalCreditInterestPaid\": 0,\n        \"totalCreditsCurrentMonth\": 0,\n        \"totalDebitsCurrentMonth\": 0\n      },\n      \"accountHolderName\": \"John Smith\",\n      \"nickname\": \"Business Transactions\",\n      \"status\": {\n        \"identifier\": \"ACTIVE\"\n      },\n      \"countryCode\": \"GB\",\n      \"type\": \"OPERATING\",\n      \"lockType\": \"NONE\",\n      \"limits\": {\n        \"minimumLimit\": 0\n      },\n      \"identifiers\": {\n        {...}\n      },\n      \"accountOwner\": {\n        \"type\": \"INDIVIDUAL\",\n        \"id\": \"kPRkRLVrOYGasouzr4hz8\"\n      }\n    }\n  ],\n  \"metadata\": {\n    \"totalRecords\": 1,\n    \"page\": 1,\n    \"pageSize\": 20\n  }\n}\n```",
        "parameters": [
          {
            "$ref": "#/components/parameters/JwsSignature"
          },
          {
            "in": "query",
            "name": "type",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/AccountType"
            }
          },
          {
            "in": "query",
            "name": "accountOwnership",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/AccountOwnership"
            }
          },
          {
            "in": "query",
            "name": "status",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/AccountStatusFilter"
            }
          },
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "x-correlation-id": {
                "description": "A unique identifier assigned to each request, facilitating issue tracing. In the event that a problem arises with a request, this ID can be provided to The Bank of London support team for assistance.",
                "schema": {
                  "type": "string"
                },
                "example": "2579248247516384065",
                "required": true
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "accounts": {
                      "items": {
                        "$ref": "#/components/schemas/Account"
                      },
                      "type": "array"
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/MetaData"
                    }
                  },
                  "required": ["accounts", "metadata"]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "tags": ["Accounts"]
      }
    },
    "/v2/accounts/{id}": {
      "get": {
        "operationId": "GetAccount",
        "summary": "Get Account",
        "description": "Retrieves the details of a specific bank account. The consumer application needs permissions to read the requested account.\n\n### Example request:\n\n```\nGET /accounts/GB-040075-12345678\n```\n\n### Example response:\n```JSON\n{\n  \"id\": \"GB-040075-12345678\",\n  \"createdDateTime\": \"2022-01-30T08:30:00Z\",\n  \"currency\": \"GBP\",\n  \"balances\": {\n    \"available\": 1000,\n    \"current\":  2000\n  },\n  \"totals\": {\n    \"totalMonthlyCreditInterestAccrued\": 0,\n    \"totalCreditInterestPaid\": 0,\n    \"totalCreditsCurrentMonth\": 0,\n    \"totalDebitsCurrentMonth\": 0\n  },\n  \"accountHolderName\": \"John Smith\",\n  \"nickname\": \"Business Transactions\",\n  \"status\": {\n    \"identifier\": \"ACTIVE\"\n  },\n  \"countryCode\": \"GB\",\n  \"identifiers\": {\n    {...}\n  },\n  \"type\": \"OPERATING\",\n  \"lockType\": \"NONE\",\n  \"limits\": {\n    \"minimumLimit\": 0\n  },\n  \"constraints\": {\n    \"withdrawal\": {\n      \"nominatedPayees\": [\n        {\n          \"accountNumber\": \"00000001\",\n          \"name\": \"Company LTD.\",\n          \"sortCode\": \"042974\"\n        }\n      ],\n      \"noticePeriod\": {\n        \"duration\": 3,\n        \"unitOfTime\": \"WEEK\"\n      }\n    }\n  },\n  \"accountOwner\": {\n    \"type\": \"INDIVIDUAL\",\n    \"id\": \"kPRkRLVrOYGasouzr4hz8\"\n  }\n}\n```",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountId"
            }
          },
          {
            "in": "query",
            "name": "includeConstraints",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Returns the `constraints` property in the accounts response if any exist on the account.\n",
              "example": true,
              "default": false
            }
          },
          {
            "$ref": "#/components/parameters/JwsSignature"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "x-correlation-id": {
                "description": "A unique identifier assigned to each request, facilitating issue tracing. In the event that a problem arises with a request, this ID can be provided to The Bank of London support team for assistance.",
                "schema": {
                  "type": "string"
                },
                "example": "2579248247516384065",
                "required": true
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetSingleAccountResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "tags": ["Accounts"]
      },
      "patch": {
        "operationId": "UpdateAccount",
        "summary": "Update Account",
        "description": "This operation updates an account by its `id` in the context of\nan application registered with The Bank of London Developer Studio. \n\nAt present, only the nickname and salesProductId can be updated.\n\n### Example request body:\n```JSON\n{\n  \"nickname\": \"Business Transactions\"\n}\n```\n\nThe API will return the updated account.\n\n### Example response:\n```JSON\n{\n  \"id\": \"GB-040075-12345678\",\n  \"createdDateTime\": \"2022-01-30T08:30:00Z\",\n  \"currency\": \"GBP\",\n  \"balances\": {\n    \"available\": 1000,\n    \"current\":  2000\n  },\n  \"totals\": {\n    \"totalMonthlyCreditInterestAccrued\": 0,\n    \"totalCreditInterestPaid\": 0,\n    \"totalCreditsCurrentMonth\": 0,\n    \"totalDebitsCurrentMonth\": 0\n  },\n  \"accountHolderName\": \"John Smith\",\n  \"nickname\": \"Business Transactions\",\n  \"status\": {\n    \"identifier\": \"ACTIVE\"\n  },\n  \"countryCode\": \"GB\",\n  \"identifiers\": {\n    {...}\n  },\n  \"type\": \"OPERATING\",\n  \"lockType\": \"NONE\",\n  \"limits\": {\n    \"minimumLimit\": 0\n  },\n  \"constraints\": {\n    \"withdrawal\": {\n      \"nominatedPayees\": [\n        {\n          \"accountNumber\": \"00000001\",\n          \"name\": \"Company LTD.\",\n          \"sortCode\": \"042974\"\n        }\n      ],\n      \"noticePeriod\": {\n        \"duration\": 3,\n        \"unitOfTime\": \"WEEK\"\n      }\n    }\n  \"accountOwner\": {\n    \"type\": \"INDIVIDUAL\",\n    \"id\": \"kPRkRLVrOYGasouzr4hz8\"\n  }\n}\n```",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountId"
            }
          },
          {
            "$ref": "#/components/parameters/JwsSignature"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAccountRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "x-correlation-id": {
                "description": "A unique identifier assigned to each request, facilitating issue tracing. In the event that a problem arises with a request, this ID can be provided to The Bank of London support team for assistance.",
                "schema": {
                  "type": "string"
                },
                "example": "2579248247516384065",
                "required": true
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetSingleAccountResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "tags": ["Accounts"]
      }
    },
    "/v2/accounts/{id}/close": {
      "post": {
        "operationId": "CloseAccount",
        "summary": "Close Account",
        "description": "Closes a Physical Account. This operation is only applicable to `BAAS_PHYSICAL_ACCOUNT` type accounts.\n\n### Example request body:\n```JSON\n{\n  \"closureReason\": \"CUST_INITIATED\",\n  \"recipient\": {\n    \"type\": \"UK\",\n    \"accountHolderName\": \"John Smith\",\n    \"sortCode\": \"123456\",\n    \"accountNumber\": \"12345678\"\n  }\n}\n```\n\n### Example response body:\n```JSON\n{\n  \"id\": \"GB-040075-87654321\",\n  \"type\": \"BAAS_PHYSICAL_ACCOUNT\",\n  \"status\": {\n    \"identifier\": \"CLOSED\",\n  }\n}\n```",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountId"
            }
          },
          {
            "$ref": "#/components/parameters/JwsSignature"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CloseAccountRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Account closed successfully",
            "headers": {
              "x-correlation-id": {
                "description": "A unique identifier assigned to each request, facilitating issue tracing. In the event that a problem arises with a request, this ID can be provided to The Bank of London support team for assistance.",
                "schema": {
                  "type": "string"
                },
                "example": "2579248247516384065",
                "required": true
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CloseAccountResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "tags": ["Accounts"]
      }
    },
    "/v2/individuals": {
      "post": {
        "operationId": "CreateIndividual",
        "summary": "Create Individual",
        "description": "This operation allows you to setup your customer (individual) via our API.\n\nThe endpoint requires you to provide some of the details from your onboarding process \nfor us to be able to setup an account and process payment on behalf of your customer.\n\nThe endpoint's response includes an `id`, which is future reference for created customer.\n\n\n### Example request:\n\n```JSON\n{\n  \"namePrefix\": \"Mr.\",\n  \"firstName\": \"john\",\n  \"lastName\": \"smith\",\n  \"nationality\": \"GB\",\n  \"dateOfBirth\": \"1980-01-01\",\n  \"placeOfBirth\": \"United Kingdom\",\n  \"identification\": {\n    \"type\": \"NATIONAL_ID\",\n    \"number\": \"123456789\"\n  },\n  \"address\": {\n    \"country\": \"GB\",\n    \"postalCode\": \"SW1A 2AA\",\n    \"city\": \"London\",\n    \"street\": \"High Street\",\n    \"buildingNumber\": \"46\"\n  },\n  \"phoneNumber\": \"+447895222333\",\n  \"email\": \"john.smith@thebankoflondon.com\",\n  \"organisationId\": \"u5vab5K9RZFTTzNJNAs3H\"\n}\n```\n\n### Example response:\n\n```JSON\n{\n  \"id\": \"KNm9u_s8r02SVOf4xVtIQ\",\n  \"namePrefix\": \"Mr.\",\n  \"firstName\": \"john\",\n  \"lastName\": \"smith\",\n  \"nationality\": \"GB\", \n  \"dateOfBirth\": \"1980-01-01\",\n  \"placeOfBirth\": \"United Kingdom\",\n  \"identification\": {\n    \"type\": \"NATIONAL_ID\",\n    \"number\": \"123456789\"\n  },\n  \"address\": {\n    \"country\": \"GB\",\n    \"postalCode\": \"SW1A 2AA\",\n    \"city\": \"London\",\n    \"street\": \"High Street\",\n    \"buildingNumber\": \"46\"\n  },\n  \"phoneNumber\": \"+447895222333\",\n  \"email\": \"john.smith@thebankoflondon.com\",\n  \"organisationId\": \"u5vab5K9RZFTTzNJNAs3H\"\n}\n```",
        "parameters": [
          {
            "$ref": "#/components/parameters/JwsSignature"
          }
        ],
        "requestBody": {
          "description": "The object containing data about the Individual.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "namePrefix": {
                    "$ref": "#/components/schemas/PersonNamePrefix"
                  },
                  "firstName": {
                    "$ref": "#/components/schemas/PersonFirstName"
                  },
                  "middleName": {
                    "$ref": "#/components/schemas/PersonMiddleName"
                  },
                  "lastName": {
                    "$ref": "#/components/schemas/PersonLastName"
                  },
                  "nationality": {
                    "$ref": "#/components/schemas/Nationality"
                  },
                  "dateOfBirth": {
                    "$ref": "#/components/schemas/DateOfBirth"
                  },
                  "placeOfBirth": {
                    "$ref": "#/components/schemas/PlaceOfBirth"
                  },
                  "identification": {
                    "$ref": "#/components/schemas/Identification"
                  },
                  "address": {
                    "$ref": "#/components/schemas/PersonAddress"
                  },
                  "email": {
                    "$ref": "#/components/schemas/NullableEmail"
                  },
                  "phoneNumber": {
                    "$ref": "#/components/schemas/PhoneNumber"
                  },
                  "organisationId": {
                    "$ref": "#/components/schemas/OrganisationId"
                  }
                },
                "required": [
                  "firstName",
                  "lastName",
                  "nationality",
                  "dateOfBirth",
                  "identification",
                  "address",
                  "phoneNumber"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "x-correlation-id": {
                "description": "A unique identifier assigned to each request, facilitating issue tracing. In the event that a problem arises with a request, this ID can be provided to The Bank of London support team for assistance.",
                "schema": {
                  "type": "string"
                },
                "example": "2579248247516384065",
                "required": true
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Individual"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "tags": ["Customer Management"]
      },
      "get": {
        "operationId": "GetIndividuals",
        "summary": "Get Individuals",
        "description": "This operation allows you to retrieve all customers (individuals) that have been setup via our API. \nThe response provides you with the details on your customers.\n\n### Example request:\n\n```\nGET /individuals\n```\n\n### Example for filtering by organisationId:\n```\nGET /individuals?organisationId=ML9yHKzam1qZSQfAuXKMi\n```\n\n### Example response:\n```JSON\n{\n  \"individuals\": [\n    {\n      \"id\": \"KNm9u_s8r02SVOf4xVtIQ\",\n      \"namePrefix\": \"Mr.\",\n      \"firstName\": \"john\",\n      \"lastName\": \"smith\",\n      \"nationality\": \"GB\", \n      \"dateOfBirth\": \"1980-01-01\",\n      \"placeOfBirth\": \"United Kingdom\",\n      \"identification\": {\n        \"type\": \"NATIONAL_ID\",\n        \"number\": \"123456789\"\n      },\n      \"address\": {\n        \"country\": \"GB\",\n        \"postalCode\": \"SW1A 2AA\",\n        \"city\": \"London\",\n        \"street\": \"High Street\",\n        \"buildingNumber\": \"46\"\n      },\n      \"phoneNumber\": \"+447895222333\",\n      \"email\": \"john.smith@thebankoflondon.com\",\n      \"organisationId\": null\n    },\n   {...}\n  ],\n  \"metadata\": {\n    \"totalRecords\": 15,\n    \"pageSize\": 20,\n    \"page\": 1\n  },\n}\n```",
        "parameters": [
          {
            "$ref": "#/components/parameters/JwsSignature"
          },
          {
            "in": "query",
            "name": "organisationId",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/OrganisationId"
            }
          },
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "x-correlation-id": {
                "description": "A unique identifier assigned to each request, facilitating issue tracing. In the event that a problem arises with a request, this ID can be provided to The Bank of London support team for assistance.",
                "schema": {
                  "type": "string"
                },
                "example": "2579248247516384065",
                "required": true
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "individuals": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Individual"
                      }
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/MetaData"
                    }
                  },
                  "required": ["individuals", "metadata"]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "tags": ["Customer Management"]
      }
    },
    "/v2/individuals/{id}": {
      "get": {
        "operationId": "GetIndividual",
        "summary": "Get Individual",
        "description": "This operation allows you to retrieve details of a specific individual.\n\n### Example request:\n\n```\nGET /individuals/KNm9u_s8r02SVOf4xVtIQ\n```\n\n### Example response:\n```JSON\n{\n  \"id\": \"KNm9u_s8r02SVOf4xVtIQ\",\n  \"namePrefix\": \"Mr.\",\n  \"firstName\": \"john\",\n  \"lastName\": \"smith\",\n  \"nationality\": \"GB\", \n  \"dateOfBirth\": \"1980-01-01\",\n  \"placeOfBirth\": \"United Kingdom\",\n  \"identification\": {\n    \"type\": \"NATIONAL_ID\",\n    \"number\": \"123456789\"\n  },\n  \"address\": {\n    \"country\": \"GB\",\n    \"postalCode\": \"SW1A 2AA\",\n    \"city\": \"London\",\n    \"street\": \"High Street\",\n    \"buildingNumber\": \"46\"\n  },\n  \"phoneNumber\": \"+447895222333\",\n  \"email\": \"john.smith.updated@thebankoflondon.com\",\n  \"organisationId\": null\n}\n```",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PersonId"
            }
          },
          {
            "$ref": "#/components/parameters/JwsSignature"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "x-correlation-id": {
                "description": "A unique identifier assigned to each request, facilitating issue tracing. In the event that a problem arises with a request, this ID can be provided to The Bank of London support team for assistance.",
                "schema": {
                  "type": "string"
                },
                "example": "2579248247516384065",
                "required": true
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Individual"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "tags": ["Customer Management"]
      },
      "patch": {
        "operationId": "PatchIndividual",
        "summary": "Update Individual",
        "description": "This operation allows you to update information of an existing customer (individual) and can be used\nwhen any information on the customer you have setup in our system has changed (i.e. name, address). \n\n### Example request:\n\n```JSON\n{\n  \"email\": \"john.smith.updated@thebankoflondon.com\"\n}\n```\n\n### Example response:\n\n```JSON\n{\n  \"id\": \"KNm9u_s8r02SVOf4xVtIQ\",\n  \"namePrefix\": \"Mr.\",\n  \"firstName\": \"john\",\n  \"lastName\": \"smith\",\n  \"nationality\": \"GB\", \n  \"dateOfBirth\": \"1980-01-01\",\n  \"placeOfBirth\": \"United Kingdom\",\n  \"identification\": {\n    \"type\": \"NATIONAL_ID\",\n    \"number\": \"123456789\"\n  },\n  \"address\": {\n    \"country\": \"GB\",\n    \"postalCode\": \"SW1A 2AA\",\n    \"city\": \"London\",\n    \"street\": \"High Street\",\n    \"buildingNumber\": \"46\"\n  },\n  \"phoneNumber\": \"+447895222333\",\n  \"email\": \"john.smith.updated@thebankoflondon.com\",\n  \"organisationId\": \"u5vab5K9RZFTTzNJNAs3H\"\n}\n```",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PersonId"
            }
          },
          {
            "$ref": "#/components/parameters/JwsSignature"
          }
        ],
        "requestBody": {
          "description": "The object containing data about the Individual.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "namePrefix": {
                    "$ref": "#/components/schemas/PersonNamePrefix"
                  },
                  "firstName": {
                    "$ref": "#/components/schemas/NullablePersonFirstName"
                  },
                  "middleName": {
                    "$ref": "#/components/schemas/PersonMiddleName"
                  },
                  "lastName": {
                    "$ref": "#/components/schemas/NullablePersonLastName"
                  },
                  "nationality": {
                    "$ref": "#/components/schemas/NullableNationality"
                  },
                  "dateOfBirth": {
                    "$ref": "#/components/schemas/NullableDateOfBirth"
                  },
                  "placeOfBirth": {
                    "$ref": "#/components/schemas/NullablePlaceOfBirth"
                  },
                  "identification": {
                    "$ref": "#/components/schemas/NullableIdentification"
                  },
                  "address": {
                    "$ref": "#/components/schemas/NullablePersonAddress"
                  },
                  "email": {
                    "$ref": "#/components/schemas/NullableEmail"
                  },
                  "phoneNumber": {
                    "$ref": "#/components/schemas/NullablePhoneNumber"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "x-correlation-id": {
                "description": "A unique identifier assigned to each request, facilitating issue tracing. In the event that a problem arises with a request, this ID can be provided to The Bank of London support team for assistance.",
                "schema": {
                  "type": "string"
                },
                "example": "2579248247516384065",
                "required": true
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Individual"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "tags": ["Customer Management"]
      }
    },
    "/v2/organisations": {
      "post": {
        "deprecated": true,
        "operationId": "CreateOrganisationV2",
        "summary": "Create Organisation v2 [Deprecated]",
        "description": "This operation allows you to setup your organisation via our API.\n\nThe endpoint's response includes an `id`, which is future reference for created organisation.\n\n\n### Example request:\n\n```JSON\n{\n  \"name\": \"Test Organisation\",\n  \"foundationDate\": \"1995-10-16\",\n  \"companyNumber\": \"654321\",\n  \"address\": {\n    \"country\": \"GB\",\n    \"postalCode\": \"SW1A 2AA\",\n    \"city\": \"London\",\n    \"street\": \"High Street\",\n    \"buildingNumber\": \"46\"\n  }\n}\n```\n\n### Example response:\n\n```JSON\n{\n  \"id\": \"ML9yHKzam1qZSQfAuXKMi\",\n  \"name\": \"Test Organisation\",\n  \"companyNumber\": \"654321\",\n  \"foundationDate\": \"1995-10-16\",\n  \"address\": {\n    \"country\": \"GB\",\n    \"postalCode\": \"SW1A 2AA\",\n    \"city\": \"London\",\n    \"street\": \"High Street\",\n    \"buildingNumber\": \"46\"\n  }\n}\n```",
        "parameters": [
          {
            "$ref": "#/components/parameters/JwsSignature"
          }
        ],
        "requestBody": {
          "description": "The object containing data about the Organisation.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "name": {
                    "$ref": "#/components/schemas/OrganisationName"
                  },
                  "companyNumber": {
                    "$ref": "#/components/schemas/CompanyNumber"
                  },
                  "foundationDate": {
                    "$ref": "#/components/schemas/FoundationDate"
                  },
                  "address": {
                    "$ref": "#/components/schemas/OrganisationAddress"
                  }
                },
                "required": ["name", "companyNumber", "foundationDate", "address"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "x-correlation-id": {
                "description": "A unique identifier assigned to each request, facilitating issue tracing. In the event that a problem arises with a request, this ID can be provided to The Bank of London support team for assistance.",
                "schema": {
                  "type": "string"
                },
                "example": "2579248247516384065",
                "required": true
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganisationV2"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "tags": ["Customer Management"]
      },
      "get": {
        "deprecated": true,
        "operationId": "GetOrganisationsV2",
        "summary": "Get Organisations v2 [Deprecated]",
        "description": "This operation allows you to retrieve all organisations that have been setup via our API. \nThe response provides you with the details on your organisations.\n\n### Example request:\n\n```\nGET /organisations\n```\n\n### Example response:\n```JSON\n{\n  \"organisations\": [\n    {\n      \"id\": \"ML9yHKzam1qZSQfAuXKMi\",\n      \"name\": \"Test Organisation\",\n      \"companyNumber\": \"654321\",\n      \"foundationDate\": \"1995-10-16\",\n      \"address\": {\n        \"country\": \"GB\",\n        \"postalCode\": \"SW1A 2AA\",\n        \"city\": \"London\",\n        \"street\": \"High Street\",\n        \"buildingNumber\": \"46\"\n      }\n    }\n   {...}\n  ],\n  \"metadata\": {\n    \"totalRecords\": 15,\n    \"pageSize\": 20,\n    \"page\": 1\n  },\n}\n```",
        "parameters": [
          {
            "$ref": "#/components/parameters/JwsSignature"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "x-correlation-id": {
                "description": "A unique identifier assigned to each request, facilitating issue tracing. In the event that a problem arises with a request, this ID can be provided to The Bank of London support team for assistance.",
                "schema": {
                  "type": "string"
                },
                "example": "2579248247516384065",
                "required": true
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "organisations": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/OrganisationV2"
                      }
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/MetaData"
                    }
                  },
                  "required": ["organisations", "metadata"]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "tags": ["Customer Management"]
      }
    },
    "/v2/organisations/{id}": {
      "get": {
        "deprecated": true,
        "operationId": "GetOrganisationV2",
        "summary": "Get Organisation v2 [Deprecated]",
        "description": "This operation allows you to retrieve details of a specific organisation.\n\n### Example request:\n\n```\nGET /organisations/ML9yHKzam1qZSQfAuXKMi\n```\n\n### Example response:\n```JSON\n{\n  \"id\": \"ML9yHKzam1qZSQfAuXKMi\",\n  \"name\": \"Test Organisation\",\n  \"companyNumber\": \"654321\",\n  \"foundationDate\": \"1995-10-16\",\n  \"address\": {\n    \"country\": \"GB\",\n    \"postalCode\": \"SW1A 2AA\",\n    \"city\": \"London\",\n    \"street\": \"High Street\",\n    \"buildingNumber\": \"46\"\n  }\n}\n```",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/OrganisationId1"
            }
          },
          {
            "$ref": "#/components/parameters/JwsSignature"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "x-correlation-id": {
                "description": "A unique identifier assigned to each request, facilitating issue tracing. In the event that a problem arises with a request, this ID can be provided to The Bank of London support team for assistance.",
                "schema": {
                  "type": "string"
                },
                "example": "2579248247516384065",
                "required": true
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganisationV2"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "tags": ["Customer Management"]
      },
      "patch": {
        "deprecated": true,
        "operationId": "PatchOrganisationV2",
        "summary": "Update Organisation v2 [Deprecated]",
        "description": "This operation allows you to update information of an existing organisation and can be used\nwhen any information on the organisation you have setup in our system has changed (i.e. name, address). \n\n### Example request:\n\n```JSON\n{\n  \"name\": \"New Test Organisation\"\n}\n```\n\n### Example response:\n\n```JSON\n{\n  \"id\": \"ML9yHKzam1qZSQfAuXKMi\",\n  \"name\": \"New Test Organisation\",\n  \"companyNumber\": \"654321\",\n  \"foundationDate\": \"1995-10-16\",\n  \"address\": {\n    \"country\": \"GB\",\n    \"postalCode\": \"SW1A 2AA\",\n    \"city\": \"London\",\n    \"street\": \"High Street\",\n    \"buildingNumber\": \"46\"\n  }\n}\n```",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/OrganisationId1"
            }
          },
          {
            "$ref": "#/components/parameters/JwsSignature"
          }
        ],
        "requestBody": {
          "description": "The object containing data about the Organisation.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "name": {
                    "$ref": "#/components/schemas/NullableOrganisationName"
                  },
                  "companyNumber": {
                    "$ref": "#/components/schemas/NullableCompanyNumber"
                  },
                  "foundationDate": {
                    "$ref": "#/components/schemas/NullableFoundationDate"
                  },
                  "address": {
                    "$ref": "#/components/schemas/NullableOrganisationAddress"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "x-correlation-id": {
                "description": "A unique identifier assigned to each request, facilitating issue tracing. In the event that a problem arises with a request, this ID can be provided to The Bank of London support team for assistance.",
                "schema": {
                  "type": "string"
                },
                "example": "2579248247516384065",
                "required": true
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganisationV2"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "tags": ["Customer Management"]
      }
    },
    "/v3/organisations": {
      "post": {
        "operationId": "CreateOrganisationV3",
        "summary": "Create Organisation v3",
        "description": "This operation allows you to setup your organisation via our API.\n\nThe endpoint's response includes an `id`, which is future reference for created organisation.\n\n\n### Example request:\n\n```JSON\n{\n  \"name\": \"Test Organisation\",\n  \"foundationDate\": \"1995-10-16\",\n  \"companyNumber\": \"654321\",\n  \"address\": {\n    \"country\": \"GB\",\n    \"postalCode\": \"SW1A 2AA\",\n    \"city\": \"London\",\n    \"street\": \"High Street\",\n    \"buildingNumber\": \"46\"\n  },\n  \"clientType\": \"GOVERNMENT_OR_NOT_FOR_PROFIT\"\n}\n```\n\n### Example response:\n\n```JSON\n{\n  \"id\": \"ML9yHKzam1qZSQfAuXKMi\",\n  \"name\": \"Test Organisation\",\n  \"companyNumber\": \"654321\",\n  \"foundationDate\": \"1995-10-16\",\n  \"address\": {\n    \"country\": \"GB\",\n    \"postalCode\": \"SW1A 2AA\",\n    \"city\": \"London\",\n    \"street\": \"High Street\",\n    \"buildingNumber\": \"46\"\n  },\n  \"clientType\": \"GOVERNMENT_OR_NOT_FOR_PROFIT\"\n}\n```",
        "parameters": [
          {
            "$ref": "#/components/parameters/JwsSignature"
          }
        ],
        "requestBody": {
          "description": "The object containing data about the Organisation.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "name": {
                    "$ref": "#/components/schemas/OrganisationName"
                  },
                  "companyNumber": {
                    "$ref": "#/components/schemas/CompanyNumber"
                  },
                  "foundationDate": {
                    "$ref": "#/components/schemas/FoundationDate"
                  },
                  "address": {
                    "$ref": "#/components/schemas/OrganisationAddress"
                  },
                  "clientType": {
                    "$ref": "#/components/schemas/ClientType"
                  }
                },
                "required": ["name", "companyNumber", "foundationDate", "address", "clientType"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "x-correlation-id": {
                "description": "A unique identifier assigned to each request, facilitating issue tracing. In the event that a problem arises with a request, this ID can be provided to The Bank of London support team for assistance.",
                "schema": {
                  "type": "string"
                },
                "example": "2579248247516384065",
                "required": true
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganisationV3"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "tags": ["Customer Management"]
      },
      "get": {
        "operationId": "GetOrganisationsV3",
        "summary": "Get Organisations v3",
        "description": "This operation allows you to retrieve all organisations that have been setup via our API. \nThe response provides you with the details on your organisations.\n\n### Example request:\n\n```\nGET /organisations\n```\n\n### Example response:\n```JSON\n{\n  \"organisations\": [\n    {\n      \"id\": \"ML9yHKzam1qZSQfAuXKMi\",\n      \"name\": \"Test Organisation\",\n      \"companyNumber\": \"654321\",\n      \"foundationDate\": \"1995-10-16\",\n      \"address\": {\n        \"country\": \"GB\",\n        \"postalCode\": \"SW1A 2AA\",\n        \"city\": \"London\",\n        \"street\": \"High Street\",\n        \"buildingNumber\": \"46\"\n      },\n      \"clientType\": \"GOVERNMENT_OR_NOT_FOR_PROFIT\"\n    }\n   {...}\n  ],\n  \"metadata\": {\n    \"totalRecords\": 15,\n    \"pageSize\": 20,\n    \"page\": 1\n  },\n}\n```",
        "parameters": [
          {
            "$ref": "#/components/parameters/JwsSignature"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "x-correlation-id": {
                "description": "A unique identifier assigned to each request, facilitating issue tracing. In the event that a problem arises with a request, this ID can be provided to The Bank of London support team for assistance.",
                "schema": {
                  "type": "string"
                },
                "example": "2579248247516384065",
                "required": true
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "organisations": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/GetSingleOrganisationResponseV3"
                      }
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/MetaData"
                    }
                  },
                  "required": ["organisations", "metadata"]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "tags": ["Customer Management"]
      }
    },
    "/v3/organisations/{id}": {
      "get": {
        "operationId": "GetOrganisationV3",
        "summary": "Get Organisation v3",
        "description": "This operation allows you to retrieve details of a specific organisation.\n\n### Example request:\n\n```\nGET /organisations/ML9yHKzam1qZSQfAuXKMi\n```\n\n### Example response:\n```JSON\n{\n  \"id\": \"ML9yHKzam1qZSQfAuXKMi\",\n  \"name\": \"Test Organisation\",\n  \"companyNumber\": \"654321\",\n  \"foundationDate\": \"1995-10-16\",\n  \"address\": {\n    \"country\": \"GB\",\n    \"postalCode\": \"SW1A 2AA\",\n    \"city\": \"London\",\n    \"street\": \"High Street\",\n    \"buildingNumber\": \"46\"\n  },\n  \"clientType\": \"GOVERNMENT_OR_NOT_FOR_PROFIT\"\n}\n```",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/OrganisationId1"
            }
          },
          {
            "$ref": "#/components/parameters/JwsSignature"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "x-correlation-id": {
                "description": "A unique identifier assigned to each request, facilitating issue tracing. In the event that a problem arises with a request, this ID can be provided to The Bank of London support team for assistance.",
                "schema": {
                  "type": "string"
                },
                "example": "2579248247516384065",
                "required": true
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetSingleOrganisationResponseV3"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "tags": ["Customer Management"]
      },
      "patch": {
        "operationId": "PatchOrganisationV3",
        "summary": "Update Organisation v3",
        "description": "This operation allows you to update information of an existing organisation and can be used\nwhen any information on the organisation you have setup in our system has changed (i.e. name, address). \n\n### Example request:\n\n```JSON\n{\n  \"name\": \"New Test Organisation\"\n}\n```\n\n### Example response:\n\n```JSON\n{\n  \"id\": \"ML9yHKzam1qZSQfAuXKMi\",\n  \"name\": \"New Test Organisation\",\n  \"companyNumber\": \"654321\",\n  \"foundationDate\": \"1995-10-16\",\n  \"address\": {\n    \"country\": \"GB\",\n    \"postalCode\": \"SW1A 2AA\",\n    \"city\": \"London\",\n    \"street\": \"High Street\",\n    \"buildingNumber\": \"46\"\n  },\n  \"clientType\": \"GOVERNMENT_OR_NOT_FOR_PROFIT\"\n}\n```",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/OrganisationId1"
            }
          },
          {
            "$ref": "#/components/parameters/JwsSignature"
          }
        ],
        "requestBody": {
          "description": "The object containing data about the Organisation.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "name": {
                    "$ref": "#/components/schemas/NullableOrganisationName"
                  },
                  "companyNumber": {
                    "$ref": "#/components/schemas/NullableCompanyNumber"
                  },
                  "foundationDate": {
                    "$ref": "#/components/schemas/NullableFoundationDate"
                  },
                  "address": {
                    "$ref": "#/components/schemas/NullableOrganisationAddress"
                  },
                  "clientType": {
                    "$ref": "#/components/schemas/NullableClientType"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "x-correlation-id": {
                "description": "A unique identifier assigned to each request, facilitating issue tracing. In the event that a problem arises with a request, this ID can be provided to The Bank of London support team for assistance.",
                "schema": {
                  "type": "string"
                },
                "example": "2579248247516384065",
                "required": true
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetSingleOrganisationResponseV3"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "tags": ["Customer Management"]
      }
    },
    "/v2/virtual/accounts": {
      "get": {
        "operationId": "GetVirtualAccounts",
        "summary": "Get Virtual Accounts",
        "description": "Retrieves a list of virtual bank accounts. The consumer application must have already created the virtual accounts.\n\n### Example request:\n\n```\nGET /virtual/accounts\n```\n\n### Example for retrieving all virtual accounts for Individuals and Organisations:\n```\nGET v2/virtual/accounts?accountOwnership=INDIRECT\n```\n\n### Example for retrieving all accounts directly linked to organisation and linked to organisation’s individuals:\n```\nGET v2/virtual/accounts?organisationId=u5vab5K9RZFTTzNJNAs3H\n```\n\n### Example for retrieving individual’s accounts:\n```\nGET v2/virtual/accounts?individualId=u5vab5K9RZFTTzNJNAs3H\n```\n\n### Example response:\n```JSON\n{\n  \"accounts\": [\n    {\n      \"id\": \"GB-042972-84535966\",\n      \"createdDateTime\": \"2024-03-26T15:42:35.000Z\",\n      \"currency\": \"GBP\",\n      \"balances\": {\n        \"current\": 0,\n        \"available\": 0\n      },\n      \"totals\": {\n        \"totalDebitsCurrentMonth\": 0,\n        \"totalCreditsCurrentMonth\": 0,\n        \"totalCreditInterestPaid\": 0,\n        \"totalMonthlyCreditInterestAccrued\": 0\n      },\n      \"accountHolderName\": \"John Smith\",\n      \"nickname\": \"\",\n      \"status\": {\n        \"identifier\": \"ACTIVE\"\n      },\n      \"countryCode\": \"GB\",\n      \"identifiers\": {\n        \"uk\": {\n          \"accountNumber\": \"84535966\",\n          \"sortCode\": \"042972\"\n        },\n        \"iban\": \"GB98TBOL04297284535966\"\n      },\n      \"type\": \"VIRTUAL_ACCOUNT\",\n      \"lockType\": \"NONE\",\n      \"limits\": {\n        \"minimumLimit\": 0,\n        \"maximumTransactionLimit\": 250000\n      },\n      \"accountOwner\": {\n        \"type\": \"INDIVIDUAL\",\n        \"id\": \"hkHcJybfBAKjZac9eiIAr\"\n      },\n    },\n    {...}\n  ],\n  \"metadata\": {\n    \"totalRecords\": 100,\n    \"page\": 1,\n    \"pageSize\": 20\n  },\n}\n```",
        "parameters": [
          {
            "$ref": "#/components/parameters/JwsSignature"
          },
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "in": "query",
            "name": "organisationId",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Supplying the `organisationId` will return only the virtual accounts belonging to `Individuals` associated with that `Organisation`.\n"
            }
          },
          {
            "in": "query",
            "name": "individualId",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Supplying the `individualId` will return virtual accounts for specific individual.\n"
            }
          },
          {
            "in": "query",
            "name": "accountOwnership",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/AccountOwnership1"
            }
          },
          {
            "in": "query",
            "name": "headerAccountId",
            "required": false,
            "description": "Supplying the `headerAccountId` will return virtual accounts under specific header account id.",
            "schema": {
              "$ref": "#/components/schemas/HeaderAccountId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "x-correlation-id": {
                "description": "A unique identifier assigned to each request, facilitating issue tracing. In the event that a problem arises with a request, this ID can be provided to The Bank of London support team for assistance.",
                "schema": {
                  "type": "string"
                },
                "example": "2579248247516384065",
                "required": true
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "accounts": {
                      "items": {
                        "$ref": "#/components/schemas/VirtualAccountBase"
                      },
                      "type": "array"
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/MetaData"
                    }
                  },
                  "required": ["accounts", "metadata"]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "tags": ["Virtual Account Management"]
      },
      "post": {
        "operationId": "CreateVirtualAccount",
        "summary": "Create a Virtual Account",
        "description": "Creates a Virtual Account. Virtual accounts can be created for Individuals and Organisations.\n\n <span style=\"color:#f46d2a\">**Attention**</span> \\\n If you would like to test against our Virtual Account Management (VAM) endpoints,\n please read our [Virtual Account Management](https://developer.thebankoflondon.com/docs/overviews/virtual-account-management)\n overview for more information on how to get started. `virtualAggregatorNodeId` is an optional attribute in the request.\n\n### Example request body:\n```JSON\n{\n  \"headerAccountId\": \"GB-040075-12345678\",\n  \"accountOwner\": {\n    \"type\": \"INDIVIDUAL\",\n    \"id\": \"hkHcJybfBAKjZac9eiIAr\"\n  }\n}\n```\n\n### Example response body:\n```JSON\n{\n  \"id\": \"GB-040075-87654321\",\n  \"currency\": \"GBP\",\n  \"type\": \"VIRTUAL_ACCOUNT\",\n  \"headerAccountId\": \"GB-040075-12345678\",\n  \"accountOwner\": {\n    \"type\": \"INDIVIDUAL\",\n    \"id\": \"hkHcJybfBAKjZac9eiIAr\"\n  }\n}\n```",
        "parameters": [
          {
            "$ref": "#/components/parameters/JwsSignature"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateVirtualAccountRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Virtual account created successfully",
            "headers": {
              "x-correlation-id": {
                "description": "A unique identifier assigned to each request, facilitating issue tracing. In the event that a problem arises with a request, this ID can be provided to The Bank of London support team for assistance.",
                "schema": {
                  "type": "string"
                },
                "example": "2579248247516384065",
                "required": true
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateVirtualAccountResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "tags": ["Virtual Account Management"]
      }
    },
    "/v2/virtual/accounts/{id}": {
      "get": {
        "operationId": "GetAVirtualAccount",
        "summary": "Get a Virtual Account",
        "description": "Retrieves the details of a specific virtual bank account. The consumer application needs permissions to read the requested account.\n\n<span style=\"color:#f46d2a\">**Attention**</span> \\\n    If you would like to test against our Virtual Account Management (VAM) endpoints, please read our [Virtual Account Management](https://developer.thebankoflondon.com/docs/overviews/virtual-account-management) overview for more information on how to get started.\n\n### Example request:\n\n```\nGET /virtual/accounts/GB-042972-84535966\n```\n\n### Example response:\n```JSON\n{\n  \"id\": \"GB-042972-84535966\",\n  \"createdDateTime\": \"2024-03-26T15:42:35.000Z\",\n  \"currency\": \"GBP\",\n  \"balances\": {\n    \"current\": 0,\n    \"available\": 0\n  },\n  \"totals\": {\n    \"totalDebitsCurrentMonth\": 0,\n    \"totalCreditsCurrentMonth\": 0,\n    \"totalCreditInterestPaid\": 0,\n    \"totalMonthlyCreditInterestAccrued\": 0\n  },\n  \"accountHolderName\": \"John Smith\",\n  \"nickname\": \"\",\n  \"status\": {\n    \"identifier\": \"ACTIVE\"\n  },\n  \"countryCode\": \"GB\",\n  \"identifiers\": {\n    \"uk\": {\n      \"accountNumber\": \"84535966\",\n      \"sortCode\": \"042972\"\n    },\n    \"iban\": \"GB98TBOL04297284535966\"\n  },\n  \"type\": \"VIRTUAL_ACCOUNT\",\n  \"lockType\": \"NONE\",\n  \"limits\": {\n    \"minimumLimit\": 0,\n    \"maximumTransactionLimit\": 250000\n  },\n  \"headerAccountId\": \"GB-042972-98824239\",\n  \"accountOwner\": {\n    \"type\": \"INDIVIDUAL\",\n    \"id\": \"hkHcJybfBAKjZac9eiIAr\"\n  },\n}\n```",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountId"
            }
          },
          {
            "in": "query",
            "name": "includeConstraints",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Returns the `constraints` property in the accounts response if any exist on the account.\n",
              "example": true,
              "default": false
            }
          },
          {
            "$ref": "#/components/parameters/JwsSignature"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "x-correlation-id": {
                "description": "A unique identifier assigned to each request, facilitating issue tracing. In the event that a problem arises with a request, this ID can be provided to The Bank of London support team for assistance.",
                "schema": {
                  "type": "string"
                },
                "example": "2579248247516384065",
                "required": true
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetSingleVirtualAccountResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "tags": ["Virtual Account Management"]
      },
      "patch": {
        "operationId": "UpdateAVirtualAccount",
        "summary": "Update a Virtual Account",
        "description": "This operation updates a virtual account by its `id` in the context of\nan application registered with The Bank of London Developer Studio. \n\nAt present, only the nickname can be updated.\n\n<span style=\"color:#f46d2a\">**Attention**</span> \\\n    If you would like to test against our Virtual Account Management (VAM) endpoints, please read our [Virtual Account Management](https://developer.thebankoflondon.com/docs/overviews/virtual-account-management) overview for more information on how to get started.\n\n### Example request body:\n```JSON\n{\n  \"nickname\": \"Business Transactions\"\n}\n```\n\nThe API will return the updated account.\n\n### Example response:\n```JSON\n{\n  \"id\": \"GB-042972-84535966\",\n  \"createdDateTime\": \"2024-03-26T15:42:35.000Z\",\n  \"currency\": \"GBP\",\n  \"balances\": {\n    \"current\": 0,\n    \"available\": 0\n  },\n  \"totals\": {\n    \"totalDebitsCurrentMonth\": 0,\n    \"totalCreditsCurrentMonth\": 0,\n    \"totalCreditInterestPaid\": 0,\n    \"totalMonthlyCreditInterestAccrued\": 0\n  },\n  \"accountHolderName\": \"John Smith\",\n  \"nickname\": \"Business Transactions\",\n  \"status\": {\n    \"identifier\": \"ACTIVE\"\n  },\n  \"countryCode\": \"GB\",\n  \"identifiers\": {\n    \"uk\": {\n      \"accountNumber\": \"84535966\",\n      \"sortCode\": \"042972\"\n    },\n    \"iban\": \"GB98TBOL04297284535966\"\n  },\n  \"type\": \"VIRTUAL_ACCOUNT\",\n  \"lockType\": \"NONE\",\n  \"limits\": {\n    \"minimumLimit\": 0,\n    \"maximumTransactionLimit\": 250000\n  },\n  \"accountOwner\": {\n    \"type\": \"INDIVIDUAL\",\n    \"id\": \"hkHcJybfBAKjZac9eiIAr\"\n  },\n}\n```",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountId"
            }
          },
          {
            "$ref": "#/components/parameters/JwsSignature"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateVirtualAccountRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "x-correlation-id": {
                "description": "A unique identifier assigned to each request, facilitating issue tracing. In the event that a problem arises with a request, this ID can be provided to The Bank of London support team for assistance.",
                "schema": {
                  "type": "string"
                },
                "example": "2579248247516384065",
                "required": true
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VirtualAccountBase"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "tags": ["Virtual Account Management"]
      }
    },
    "/v2/virtual/accounts/{id}/close": {
      "post": {
        "operationId": "CloseVirtualAccount",
        "summary": "Close Virtual Account",
        "description": "Closes a Virtual Account. This operation is only applicable to `VIRTUAL_ACCOUNT` type accounts.\n\n### Example request body:\n```JSON\n{\n  \"closureReason\": \"CUST_INITIATED\",\n  \"recipient\": {\n    \"type\": \"UK\",\n    \"accountHolderName\": \"John Smith\",\n    \"sortCode\": \"123456\",\n    \"accountNumber\": \"12345678\"\n  }\n}\n```\n\n### Example response body:\n```JSON\n{\n  \"id\": \"GB-040075-87654321\",\n  \"status\": {\n    \"identifier\": \"CLOSED\",\n  }\n}\n```",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountId"
            }
          },
          {
            "$ref": "#/components/parameters/JwsSignature"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CloseVirtualAccountRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Account closed successfully",
            "headers": {
              "x-correlation-id": {
                "description": "A unique identifier assigned to each request, facilitating issue tracing. In the event that a problem arises with a request, this ID can be provided to The Bank of London support team for assistance.",
                "schema": {
                  "type": "string"
                },
                "example": "2579248247516384065",
                "required": true
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CloseAccountResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "tags": ["Virtual Account Management"]
      }
    },
    "/v2/virtual/transactions": {
      "get": {
        "operationId": "GetVirtualAccountTransactions",
        "summary": "Get Virtual Account Transactions",
        "description": "This operation allows to retrieve a list of transactions for a virtual account along with the transaction ID\n(`id`) to be able to retrieve a specific transaction later via `GET\n/transactions/{transactionId}`.\n\nIt must be filtered by either The Bank of London virtual account ID (`accountId`) to\nretrieve only payments for a specific virtual account or by the `headerAccountId` to \nretrieve all transactions for all virtual accounts under the header account.\n\nIt can also be filtered by the `fromDate`, `toDate` and `transactionType` fields to narrow down the result set.\n\n### Example request:\n```\nGET /virtual/transactions?accountId=GB-040075-12345678&fromDate=2020-10-10&toDate=2020-10-12\n```\n### Example for filtering by type:\n```\nGET /virtual/transactions?accountId=GB-040075-12345678&fromDate=2020-10-10&toDate=2020-10-12&transactionType=INTERNAL_DEBIT_THIRD_PARTY\n```\nThe API will respond with an array of objects that contain all the details of the resulting transactions.\n### Example response:\n```JSON\n{\n  \"transactions\": [\n    {\n      \"id\": \"0022484107DB1EED9D85FA3B8119427D001\",\n      \"type\": \"INTERNAL_DEBIT_THIRD_PARTY\",\n      \"typeDescription\": \"Outbound internal transfer (third party)\",\n      \"sender\": {\n        \"type\": \"TBOL\",\n        \"accountId\": \"GB-040075-12345678\",\n        \"accountNumber\": \"12345678\",\n        \"sortCode\": \"040075\"\n      },\n      \"recipient\": {\n        \"type\": \"TBOL\",\n        \"accountId\": \"GB-040075-12345678\",\n        \"accountNumber\": \"12345678\",\n        \"sortCode\": \"040075\"\n      },\n      \"isCredit\": \"false\",\n      \"reference\": \"Invoice 12345\",\n      \"notes\": \"My first transaction\",\n      \"amount\": {\n        \"currency\": \"GBP\",\n        \"value\": 4320.5\n      },\n      \"postingDate\": \"2022-10-07\",\n      \"releaseDateTime\": \"2022-10-07T08:55:33.213Z\",\n      \"valueDate\": \"2022-10-07\",\n      \"createdDateTime\": \"2022-10-07T08:55:33.213Z\",\n      \"account\": {\n        \"currency\": \"GBP\",\n        \"balance\": 5000\n      },\n      \"status\": {\n        \"identifier\": \"SUCCESSFUL\"\n      }\n    },\n    {...}\n  ],\n  \"metadata\": {\n    \"totalRecords\": 2,\n    \"pageSize\": 20,\n    \"page\": 1\n  },\n}\n```",
        "parameters": [
          {
            "$ref": "#/components/parameters/JwsSignature"
          },
          {
            "in": "query",
            "name": "accountId",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/AccountId"
            }
          },
          {
            "in": "query",
            "name": "fromDate",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/TransactionFromDate"
            }
          },
          {
            "in": "query",
            "name": "toDate",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/TransactionToDate"
            }
          },
          {
            "in": "query",
            "name": "transactionType",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/TransactionType"
            }
          },
          {
            "in": "query",
            "name": "isCredit",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/TransactionIsCreditQueryParam"
            }
          },
          {
            "in": "query",
            "name": "search",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/TransactionSearch"
            }
          },
          {
            "in": "query",
            "name": "orderBy",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/TransactionOrderBy"
            }
          },
          {
            "in": "query",
            "name": "headerAccountId",
            "description": "If specified, the response will return the transactions of all virtual accounts which have headerAccountId set to the provided value.\n",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/HeaderAccountId"
            }
          },
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          }
        ],
        "responses": {
          "200": {
            "description": "Success\n<span style=\"color:#f46d2a; font-size:14px; font-family:Inter;\">**Attention**</span> \\\n<span style=\"font-size:14px; font-family:Inter;\">Please note that the oneOf transactions in the **body** below, is extensible and new objects can be \nreturned with a new transaction **type**\nin the future without a major version change. Please ensure this is factored into your\napplication code.</span>\n",
            "headers": {
              "x-correlation-id": {
                "description": "A unique identifier assigned to each request, facilitating issue tracing. In the event that a problem arises with a request, this ID can be provided to The Bank of London support team for assistance.",
                "schema": {
                  "type": "string"
                },
                "example": "2579248247516384065",
                "required": true
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "transactions": {
                      "type": "array",
                      "items": {
                        "oneOf": [
                          {
                            "$ref": "#/components/schemas/PaymentTransaction"
                          },
                          {
                            "$ref": "#/components/schemas/FeeInterestTransaction"
                          }
                        ]
                      }
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/MetaData"
                    }
                  },
                  "required": ["transactions", "metadata"]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "tags": ["Virtual Account Management"]
      }
    },
    "/v2/virtual/aggregator-nodes": {
      "get": {
        "operationId": "GetVirtualAggregatorNodes",
        "summary": "Get Virtual Aggregator Nodes",
        "description": "Get a list of Virtual Aggregator nodes.\n\nAggregator nodes must be filtered by `headerAccountId` to retrieve all aggregator nodes under the header account.\nThey can also be filtered by the `organisationId` and `individualId` fields to narrow down the result set.\n\n### Example request:\n```\nGET /virtual/aggregator-nodes?headerAccountId=GB-040075-12345678&organisationId=u5vab5K9RZFTTzNJNAszH\n```\nThe API will respond with an array of objects that contain all the details of the resulting aggregator nodes.\n### Example response:\n```JSON\n{\n  \"aggregatorNodes\": [\n    {\n      \"id\": \"0000001182\",\n      \"name\": \"My Aggregator Node\",\n      \"parentVirtualAggregatorNodeId\": \"0000000210\",\n      \"headerAccountId\": \"GB-042972-93526398\",\n      \"owner\": {\n        \"type\": \"INDIVIDUAL\",\n        \"id\": \"u5vab5K9RZFTTzNJNAszH\"\n      }\n    },\n    {...}\n  ],\n  \"metadata\": {\n    \"totalRecords\": 1,\n    \"pageSize\": 20,\n    \"page\": 1\n  },\n}\n```",
        "parameters": [
          {
            "$ref": "#/components/parameters/JwsSignature"
          },
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "in": "query",
            "name": "headerAccountId",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AggregatorNodeHeaderAccountId"
            }
          },
          {
            "in": "query",
            "name": "organisationId",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Supplying the `organisationId` will return aggregator nodes for specific organisation.\n"
            }
          },
          {
            "in": "query",
            "name": "individualId",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Supplying the `individualId` will return aggregator nodes for specific individual.\n"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "x-correlation-id": {
                "description": "A unique identifier assigned to each request, facilitating issue tracing. In the event that a problem arises with a request, this ID can be provided to The Bank of London support team for assistance.",
                "schema": {
                  "type": "string"
                },
                "example": "2579248247516384065",
                "required": true
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "aggregatorNodes": {
                      "items": {
                        "$ref": "#/components/schemas/AggregatorNodeResponse"
                      },
                      "type": "array"
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/MetaData"
                    }
                  },
                  "required": ["aggregatorNodes", "metadata"]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "tags": ["Virtual Account Management"]
      },
      "post": {
        "operationId": "CreateVirtualAggregatorNode",
        "summary": "Create a Virtual Aggregator Node",
        "description": "Creates A Virtual Aggregator Node.\n\nVirtual aggregator nodes are an aggregation tool and are not externally addressable. They can be used to group virtual accounts and view aggregated data relating to those virtual accounts.\n\n <span style=\"color:#f46d2a\">**Attention**</span> \\\n If you would like to test against our Virtual Account Management (VAM) endpoints,\n please read our [Virtual Account Management](https://developer.thebankoflondon.com/docs/overviews/virtual-account-management)\n overview for more information on how to get started.\n\n### Example request body:\n```JSON\n  {\n    \"headerAccountId\": \"GB-042972-93526388\",\n    \"name\": \"My Aggregator Node\"\n  }\n```\n\n### Example response body:\n```JSON\n  {\n    \"id\": \"0000001180\",\n    \"name\": \"My Aggregator Node\",\n    \"parentVirtualAggregatorNodeId\": \"0000000205\",\n    \"headerAccountId\": \"GB-042972-93526388\"\n  }\n```",
        "parameters": [
          {
            "$ref": "#/components/parameters/JwsSignature"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAggregatorNodeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Aggregator node created successfully",
            "headers": {
              "x-correlation-id": {
                "description": "A unique identifier assigned to each request, facilitating issue tracing. In the event that a problem arises with a request, this ID can be provided to The Bank of London support team for assistance.",
                "schema": {
                  "type": "string"
                },
                "example": "2579248247516384065",
                "required": true
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateAggregatorNodeResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "tags": ["Virtual Account Management"]
      }
    },
    "/v2/virtual/aggregator-nodes/{id}": {
      "get": {
        "operationId": "GetVirtualAggregatorNode",
        "summary": "Get a Virtual Aggregator Node",
        "description": "Retrieves details of a virtual aggregator node as well as aggregated data of the virtual accounts under the virtual aggregator node.\n\n <span style=\"color:#f46d2a\">**Attention**</span> \\\n If you would like to test against our Virtual Account Management (VAM) endpoints,\n please read our [Virtual Account Management](https://developer.thebankoflondon.com/docs/overviews/virtual-account-management)\n overview for more information on how to get started.\n\n### Example request:\n\n```\nGET /virtual/aggregator-nodes/0000001398\n```\n\n### Example response:\n```JSON\n{\n    \"id\": \"0000001398\",\n    \"parentVirtualAggregatorNodeId\": \"0000000205\",\n    \"headerAccountId\": \"GB-042972-93526388\",\n    \"name\": \"Documentation example\",\n    \"virtualAccountCount\": 11,\n    \"aggregatedBalance\": 22555.33,\n    \"currency\": \"GBP\"\n}\n```",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AggregatorNodeId"
            }
          },
          {
            "$ref": "#/components/parameters/JwsSignature"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "x-correlation-id": {
                "description": "A unique identifier assigned to each request, facilitating issue tracing. In the event that a problem arises with a request, this ID can be provided to The Bank of London support team for assistance.",
                "schema": {
                  "type": "string"
                },
                "example": "2579248247516384065",
                "required": true
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAggregatorNodeResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "tags": ["Virtual Account Management"]
      },
      "patch": {
        "operationId": "UpdateVirtualAggregatorNode",
        "summary": "Update a Virtual Aggregator Node",
        "description": "Updates a Virtual Aggregator Node.\n\n <span style=\"color:#f46d2a\">**Attention**</span> \\\n If you would like to test against our Virtual Account Management (VAM) endpoints,\n please read our [Virtual Account Management](https://developer.thebankoflondon.com/docs/overviews/virtual-account-management)\n overview for more information on how to get started.\n\n### Example request body:\n```JSON\n  {\n    \"name\": \"Council VAN\",\n    \"parentVirtualAggregatorNodeId\": \"0000001113\"\n  }\n```\n\n### Example response body:\n```JSON\n  {\n    \"id\": \"0000000001\",\n    \"name\": \"Virtual aggregator name\",\n    \"headerAccountId\": \"GB-042972-01010101\",\n    \"parentVirtualAggregatorNodeId\": \"0000001113\"\n  }\n```",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the aggregator node to update.",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/JwsSignature"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAggregatorNodeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Aggregator node updated successfully",
            "headers": {
              "x-correlation-id": {
                "description": "A unique identifier assigned to each request, facilitating issue tracing. In the event that a problem arises with a request, this ID can be provided to The Bank of London support team for assistance.",
                "schema": {
                  "type": "string"
                },
                "example": "2579248247516384065",
                "required": true
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AggregatorNodeResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "tags": ["Virtual Account Management"]
      }
    },
    "/v2/virtual/hierarchy": {
      "get": {
        "operationId": "GetHierarchy",
        "summary": "Get a Hierarchy",
        "description": "Retrieve the structure of a virtual account hierarchy, showing the header account at the top of the structure, the default virtual aggregator node below that and all subsequent virtual aggregator nodes and virtual accounts that have been set up, along with the associated hierarchy level. \n\n <span style=\"color:#f46d2a\">**Attention**</span> \\\n If you would like to test against our Virtual Account Management (VAM) endpoints,\n please read our [Virtual Account Management](https://developer.thebankoflondon.com/docs/overviews/virtual-account-management)\n overview for more information on how to get started.\n\n### Example request:\n\n```\nGET /virtual/hierarchy?headerAccountId=GB-000000-00000000\n```\nThe API will respond with an array of objects that contain all the details of the resulting hierarchy.\n\n### Example response:\n```JSON\n{\n  \"metadata\": {\n    \"totalRecords\": 1,\n    \"pageSize\": 20,\n    \"page\": 1\n  },\n  \"elements\": [\n    {\n      \"id\": \"GB-000000-00000000\",\n      \"level\": \"1.1.1\",\n      \"name\": \"My Node\",\n      \"type\": \"HEADER_ACCOUNT\",\n    }\n  ]\n}\n```",
        "parameters": [
          {
            "$ref": "#/components/parameters/JwsSignature"
          },
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "in": "query",
            "name": "headerAccountId",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/HeaderAccountId"
            }
          },
          {
            "in": "query",
            "name": "parentVirtualAggregatorNodeId",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/ParentAggregatorNodeId"
            }
          },
          {
            "in": "query",
            "name": "date",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Allows the user to view the hierarchy as it was on a specific date. If none is specified you will be shown the hierarchy as it is now.",
              "example": "2025-01-01"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "x-correlation-id": {
                "description": "A unique identifier assigned to each request, facilitating issue tracing. In the event that a problem arises with a request, this ID can be provided to The Bank of London support team for assistance.",
                "schema": {
                  "type": "string"
                },
                "example": "2579248247516384065",
                "required": true
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "elements": {
                      "items": {
                        "$ref": "#/components/schemas/GetHierarchyResponse"
                      },
                      "type": "array"
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/MetaData"
                    }
                  },
                  "required": ["elements", "metadata"]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "tags": ["Virtual Account Management"]
      }
    },
    "/v2/confirmation-of-payee": {
      "post": {
        "operationId": "ConfirmPayee",
        "summary": "Confirm Payee",
        "description": "Performs matching upon the name and account type against the account details and provides the response in the Account Name Verification Report.\n\n\n### Example Request\n```json\n{\n  \"type\": \"UK\",\n  \"name\": \"John Smith\",\n  \"accountType\": \"PERSONAL\",\n  \"sortCode\": \"000000\",\n  \"accountNumber\": \"00000000\"\n}\n```\n\n### Example Confirmed Response\n```json\n{\n  \"status\": {\n    \"identifier\": \"CONFIRMED\",\n  }\n}\n```\n\n### Example Rejected Response\n```json\n{\n  \"actualPayeeName\": \"John Smith\", \n  \"status\": {\n    \"identifier\": \"REJECTED\",\n    \"detailedStatusIdentifier\": \"MBAM\",\n    \"reason\": \"Name is a close match to the account name\"\n  }\n}\n```\n\n### Example Failed Response\n```json\n{\n  \"status\": {\n    \"identifier\": \"FAILED\",\n    \"detailedStatusIdentifier\": \"AC01\",\n  }\n}\n```",
        "parameters": [
          {
            "$ref": "#/components/parameters/JwsSignature"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfirmationOfPayeeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "x-correlation-id": {
                "description": "A unique identifier assigned to each request, facilitating issue tracing. In the event that a problem arises with a request, this ID can be provided to The Bank of London support team for assistance.",
                "schema": {
                  "type": "string"
                },
                "example": "2579248247516384065",
                "required": true
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfirmationOfPayeeResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "tags": ["Confirmation of Payee"]
      }
    },
    "/v2/payments/internal": {
      "post": {
        "operationId": "CreateAnInternalPayment",
        "summary": "Create an Internal Payment",
        "description": "This operation initiates a payment in the context of\nan application registered with The Bank of London Developer Studio. It takes a request body\nthat contains all the necessary information required to issue a single internal payment.\n\nAll payments must originate from a Bank of London account (`sender` field). \nThe `recipient` field  must be a Bank of London account ID that is owned by the requesting account holder, otherwise the request will be rejected.\nA customer can only transfer between two of their own accounts eg. Operating Account → Client Collateral Account.\n\n## Single Internal Debit Payment\n\n### Example request body:\n```JSON\n{\n  \"type\": \"INTERNAL_DEBIT\",\n  \"sender\": {\n    \"type\": \"TBOL\",\n    \"accountId\": \"GB-040075-12345678\"\n  },\n  \"recipient\": {\n    \"type\": \"TBOL\",\n    \"accountId\": \"GB-040075-87654321\"\n  },\n  \"amount\": {\n    \"currency\": \"GBP\",\n    \"value\": 4320.5\n  },\n  \"reference\": \"INV-12345\",\n  \"notes\": \"my custom note\",\n  \"idempotencyId\": \"32ed5f75-638e-454c-a91b-ec16dc8f6e84\"\n}\n```\n\nThe API will return the ID of the created payment along with its\nstatus after initiation. The ID can be used to retrieve the payment\ndetails (`GET /payments/{paymentId}`) including its current status in the\nfuture.\n\n### Example response:\n```JSON\n{\n  \"id\": \"FItJ8s2G-aOUfXUFqzRXE\",\n  \"type\": \"INTERNAL_DEBIT\",\n  \"scheme\": \"INTERNAL\",\n  \"sender\": {\n    \"type\": \"TBOL\",\n    \"accountId\": \"GB-040075-12345678\"\n    \"sortCode\": \"040075\",\n    \"accountNumber\": \"12345678\"\n  },\n  \"recipient\": {\n    \"type\": \"TBOL\",\n    \"accountId\": \"GB-040075-87654321\"\n    \"accountHolderName\": \"John Smith\",\n    \"sortCode\": \"040075\",\n    \"accountNumber\": \"87654321\"\n  },\n  \"amount\": {\n    \"currency\": \"GBP\",\n    \"value\": 4320.5\n  },\n  \"reference\": \"INV-12345\",\n  \"notes\": \"my custom note\",\n  \"plannedExecutionDateTime\": \"2022-10-05T00:00:00.000Z\",\n  \"status\": {\n    \"identifier\":\"PENDING\",\n    \"detailedStatusIdentifier\":\"RECEIVED\",\n    \"history\": [\n      {\n        \"identifier\":\"PENDING\",\n        \"detailedStatusIdentifier\":\"RECEIVED\",\n        \"dateTime\":\"2024-05-02T15:51:15.792Z\"\n      },\n      {\n        \"identifier\":\"PENDING\",\n        \"detailedStatusIdentifier\":\"PENDING\",\n        \"dateTime\":\"2024-05-02T15:51:14.939Z\"\n      }\n    ]\n  },\n  \"createdDateTime\": \"2023-10-05T12:55:54.946Z\",\n  \"createdBy\": \"64e739504746e6fe27ed53b5\",\n  \"paymentOrderId\": \"S4B1  20240510000000065638\",\n  \"idempotencyId\": \"32ed5f75-638e-454c-a91b-ec16dc8f6e84\",\n  \"creator\": {\n    \"type\": \"API\",\n    \"key\": \"03967d18-5152-4f5a-9276-7f96c96f05ba\"\n  }\n}\n```\n\n## Immediate and Future Payments\n\nProviding `plannedExecutionDateTime` for `INTERNAL_DEBIT` payment will schedule a future payment whereas omitting the\n`plannedExecutionDateTime` will result in an immediate payment.\n\n\nThe consumer application (identified by the API key) must always have\nthe permission to execute payments from the sender's account.",
        "parameters": [
          {
            "$ref": "#/components/parameters/JwsSignature"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "object",
                    "title": "Internal Payment Request",
                    "description": "Payment object that is required to initiate a single Internal Debit payment.",
                    "properties": {
                      "type": {
                        "type": "string",
                        "description": "Represents an immediate or future dated Internal payment.",
                        "enum": ["INTERNAL_DEBIT"]
                      },
                      "sender": {
                        "$ref": "#/components/schemas/PaymentSender"
                      },
                      "recipient": {
                        "$ref": "#/components/schemas/PaymentRecipientTbol"
                      },
                      "amount": {
                        "$ref": "#/components/schemas/PaymentAmount"
                      },
                      "reference": {
                        "$ref": "#/components/schemas/PaymentReferenceRequest"
                      },
                      "notes": {
                        "$ref": "#/components/schemas/PaymentNotes"
                      },
                      "plannedExecutionDateTime": {
                        "$ref": "#/components/schemas/PlannedPaymentExecutionDateTime"
                      },
                      "idempotencyId": {
                        "$ref": "#/components/schemas/IdempotencyId"
                      }
                    },
                    "required": [
                      "type",
                      "sender",
                      "recipient",
                      "amount",
                      "reference",
                      "idempotencyId"
                    ]
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Accepted\n\n<span style=\"color:#f46d2a; font-size:14px; font-family:Inter;\">**Attention**</span> \\\n<span style=\"font-size:14px; font-family:Inter;\">Please note that the oneOf in the **body** below, is extensible and new objects can be \nreturned with a new payment **type** in the future without a major version change. Please ensure this is factored into your\napplication code.</span>\n",
            "headers": {
              "x-correlation-id": {
                "description": "A unique identifier assigned to each request, facilitating issue tracing. In the event that a problem arises with a request, this ID can be provided to The Bank of London support team for assistance.",
                "schema": {
                  "type": "string"
                },
                "example": "2579248247516384065",
                "required": true
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/InternalSinglePayment"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/PaymentUnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/PaymentForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/BankAccountNotFoundError"
          },
          "409": {
            "$ref": "#/components/responses/ErrorResponseConflictIdempotencyId"
          },
          "422": {
            "$ref": "#/components/responses/CreateInternalPaymentUnprocessableError"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "tags": ["Payments"]
      }
    },
    "/v2/payments/faster-payment": {
      "post": {
        "operationId": "CreateAFasterPayment",
        "summary": "Create a Faster Payment",
        "description": "This operation initiates a payment in the context of\nan application registered with The Bank of London Developer Studio. It takes a request body\nthat contains all the necessary information required to issue a single payment.\n\nAll payments must originate from a Bank of London account (`sender` field)\nand can be transferred to either a Bank of London account or any UK domestic\naccount of another bank.\n\n## Single FPS Debit Payment\n\n### Example request body:\n```JSON\n{\n  \"type\": \"FPS_DEBIT\",\n  \"sender\": {\n    \"type\": \"TBOL\",\n    \"accountId\": \"GB-040075-12345678\"\n  },\n  \"recipient\": {\n    \"type\": \"UK\",\n    \"accountHolderName\": \"John Smith\",\n    \"sortCode\": \"123456\",\n    \"accountNumber\": \"12345678\"\n  },\n  \"amount\": {\n    \"currency\": \"GBP\",\n    \"value\": 4320.5\n  },\n  \"reference\": \"INV-12345\",\n  \"notes\": \"my custom note\",\n  \"plannedExecutionDateTime\": \"2022-10-05T00:00:00.000Z\",\n  \"idempotencyId\": \"32ed5f75-638e-454c-a91b-ec16dc8f6e84\"\n}\n```\n\nThe API will return the ID of the created payment along with its\nstatus after initiation. The ID can be used to retrieve the payment\ndetails (`GET /payments/{paymentId}`) including its current status in the\nfuture.\n\n### Example response:\n```JSON\n{\n  \"id\": \"FItJ8s2G-aOUfXUFqzRXE\",\n  \"type\": \"FPS_DEBIT\",\n  \"scheme\": \"FPS\",\n  \"sender\": {\n    \"type\": \"TBOL\",\n    \"accountId\": \"GB-040075-12345678\"\n    \"sortCode\": \"040075\",\n    \"accountNumber\": \"12345678\"\n  },\n  \"recipient\": {\n    \"type\": \"UK\",\n    \"accountHolderName\": \"John Smith\",\n    \"sortCode\": \"123456\",\n    \"accountNumber\": \"12345678\"\n  },\n  \"amount\": {\n    \"currency\": \"GBP\",\n    \"value\": 4320.5\n  },\n  \"reference\": \"INV-12345\",\n  \"notes\": \"my custom note\",\n  \"plannedExecutionDateTime\": \"2022-10-05T00:00:00.000Z\",\n  \"status\": {\n    \"identifier\":\"PENDING\",\n    \"detailedStatusIdentifier\":\"RECEIVED\",\n    \"history\": [\n      {\n        \"identifier\":\"PENDING\",\n        \"detailedStatusIdentifier\":\"RECEIVED\",\n        \"dateTime\":\"2024-05-02T15:51:15.792Z\"\n      },\n      {\n        \"identifier\":\"PENDING\",\n        \"detailedStatusIdentifier\":\"PENDING\",\n        \"dateTime\":\"2024-05-02T15:51:14.939Z\"\n      }\n    ]\n  },\n  \"createdDateTime\": \"2023-10-05T12:55:54.946Z\",\n  \"createdBy\": \"64e739504746e6fe27ed53b5\",\n  \"paymentOrderId\": \"S4B1  20240510000000065638\",\n  \"idempotencyId\": \"32ed5f75-638e-454c-a91b-ec16dc8f6e84\",\n  \"creator\": {\n    \"type\": \"API\",\n    \"key\": \"03967d18-5152-4f5a-9276-7f96c96f05ba\"\n  }\n}\n```\n\n## Immediate and Future Payments\n\nProviding `plannedExecutionDateTime` for `FPS_DEBIT` payment will schedule a future payment whereas omitting the\n`plannedExecutionDateTime` will result in an immediate payment.\n\n\nThe consumer application (identified by the API key) must always have\nthe permission to execute payments from the sender's account.",
        "parameters": [
          {
            "$ref": "#/components/parameters/JwsSignature"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "object",
                    "title": "FPS Payment Request",
                    "description": "Payment object that is required to initiate a single FPS Debit payment.",
                    "properties": {
                      "type": {
                        "type": "string",
                        "description": "Represents an immediate or future dated FPS payment.",
                        "enum": ["FPS_DEBIT"]
                      },
                      "sender": {
                        "$ref": "#/components/schemas/PaymentSender"
                      },
                      "recipient": {
                        "$ref": "#/components/schemas/PaymentRecipient"
                      },
                      "amount": {
                        "$ref": "#/components/schemas/PaymentAmount"
                      },
                      "reference": {
                        "$ref": "#/components/schemas/PaymentReferenceRequest"
                      },
                      "notes": {
                        "$ref": "#/components/schemas/PaymentNotes"
                      },
                      "plannedExecutionDateTime": {
                        "$ref": "#/components/schemas/PlannedPaymentExecutionDateTime"
                      },
                      "idempotencyId": {
                        "$ref": "#/components/schemas/IdempotencyId"
                      }
                    },
                    "required": [
                      "type",
                      "sender",
                      "recipient",
                      "amount",
                      "reference",
                      "idempotencyId"
                    ]
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Accepted\n\n<span style=\"color:#f46d2a; font-size:14px; font-family:Inter;\">**Attention**</span> \\\n<span style=\"font-size:14px; font-family:Inter;\">Please note that the oneOf in the **body** below, is extensible and new objects can be \nreturned with a new payment **type** in the future without a major version change. Please ensure this is factored into your\napplication code.</span>\n",
            "headers": {
              "x-correlation-id": {
                "description": "A unique identifier assigned to each request, facilitating issue tracing. In the event that a problem arises with a request, this ID can be provided to The Bank of London support team for assistance.",
                "schema": {
                  "type": "string"
                },
                "example": "2579248247516384065",
                "required": true
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/FPSSinglePayment"
                    },
                    {
                      "$ref": "#/components/schemas/InternalSinglePayment"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/PaymentUnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/PaymentForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/BankAccountNotFoundError"
          },
          "409": {
            "$ref": "#/components/responses/ErrorResponseConflictIdempotencyId"
          },
          "422": {
            "$ref": "#/components/responses/CreateFPSUnprocessableError"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "tags": ["Payments"]
      }
    },
    "/v2/payments/bacs": {
      "post": {
        "operationId": "CreateABacsPayment",
        "summary": "Create a Bacs Payment",
        "description": "This operation initiates a Bacs payment in the context of\nan application registered with The Bank of London Developer Studio. It takes a request body\nthat contains all the necessary information required to issue either a\nsingle or a standing order Bacs payment. The `type` field serves as a discriminator.\n\nBacs operates on a 3 working day cycle between Monday to Friday. The scheme does not operate on weekends and Bank holidays (England & Wales).\n\nOn successful acceptance and processing of your payments, funds will be held in your account on Day 1 and will typically be credited to the recipient's account on Day 3.\n\nYou can recall a Bacs payment only up to 5.30PM on the day you initiate the payment; for any recalls, please contact the customer service team by email: `uksupport@thebankoflondon.com` or call us on `+44 3301 659 131`\n\nAll payments must originate from a Bank of London account (`sender` field)\nand can be transferred to any UK domestic account of another bank.\n\nThe consumer application (identified by the API key) must always have\nthe permission to execute payments from the sender's account.\n\n## Single Bacs Debit Payment\n\n### Example request body:\n```JSON\n{\n  \"type\": \"BACS_DEBIT\",\n  \"sender\": {\n    \"type\": \"TBOL\",\n    \"accountId\": \"GB-040075-12345678\"\n  },\n  \"payments\": [\n    {\n      \"recipient\": {\n        \"type\": \"UK\",\n        \"sortCode\": \"123456\",\n        \"accountNumber\": \"12345678\",\n        \"accountHolderName\": \"John Smith\"\n      },\n      \"amount\": {\n        \"currency\": \"GBP\",\n        \"value\": 1\n      },\n      \"reference\": \"INV-12345\",\n      \"notes\": \"my note\"\n    }\n  ],\n  \"plannedExecutionDate\": \"2023-10-05\",\n  \"idempotencyId\": \"32ed5f75-638e-454c-a91b-ec16dc8f6e84\"\n}\n```\n\nThe API will return the ID of the created payment along with its\nstatus after initiation. The ID can be used to retrieve the payment\ndetails (`GET /payments/{paymentId}`) including its current status in the\nfuture.\n\n### Example response:\n```JSON\n{\n  \"id\": \"eWD5O4sUHIuoV_KnlSG6j\",\n  \"type\": \"BACS_DEBIT\",\n  \"scheme\": \"BACS\",\n  \"sender\": {\n    \"type\": \"TBOL\",\n    \"accountId\": \"GB-040075-12345678\",\n    \"sortCode\": \"040075\",\n    \"accountNumber\": \"12345678\"\n  },\n  \"payments\": [\n    {\n      \"recipient\": {\n        \"type\": \"UK\",\n        \"sortCode\": \"123456\",\n        \"accountNumber\": \"12345678\",\n        \"accountHolderName\": \"John Smith\"\n      },\n      \"amount\": {\n        \"value\": 1,\n        \"currency\": \"GBP\"\n      },\n      \"reference\": \"INV-12345\",\n      \"notes\": \"my note\"\n    }\n  ],\n  \"plannedExecutionDate\": \"2023-10-05\",\n  \"status\": {\n    \"identifier\":\"PENDING\",\n    \"detailedStatusIdentifier\":\"RECEIVED\",\n    \"history\": [\n      {\n        \"identifier\":\"PENDING\",\n        \"detailedStatusIdentifier\":\"RECEIVED\",\n        \"dateTime\":\"2024-05-02T15:51:15.792Z\"\n      },\n      {\n        \"identifier\":\"PENDING\",\n        \"detailedStatusIdentifier\":\"PENDING\",\n        \"dateTime\":\"2024-05-02T15:51:14.939Z\"\n      }\n    ]\n  },\n  \"createdDateTime\": \"2023-10-05T12:55:54.946Z\",\n  \"createdBy\": \"64e739504746e6fe27ed53b5\",\n  \"paymentOrderId\": \"S4B1  20240510000000065638\".\n  \"idempotencyId\": \"32ed5f75-638e-454c-a91b-ec16dc8f6e84\",\n  \"creator\": {\n    \"type\": \"API\",\n    \"key\": \"03967d18-5152-4f5a-9276-7f96c96f05ba\"\n  }\n}\n```\n\n## Immediate and Future Payments\n\nProviding a future date for `plannedExecutionDate` for `BACS_DEBIT` payment will schedule a future payment. Providing today's date for `plannedExecutionDate` will result in an immediate payment.\n\nPayments are processed in the Europe/London timezone so `plannedExecutionDate` must be a UK date in the format `YYYY-MM-DD`.",
        "parameters": [
          {
            "$ref": "#/components/parameters/JwsSignature"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/BacsDebitPaymentRequest"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Accepted\n\n<span style=\"color:#f46d2a; font-size:14px; font-family:Inter;\">**Attention**</span> \\\n<span style=\"font-size:14px; font-family:Inter;\">Please note that the oneOf in the **body** below, is extensible and new objects can be \nreturned with a new payment **type** in the future without a major version change. Please ensure this is factored into your\napplication code.</span>\n",
            "headers": {
              "x-correlation-id": {
                "description": "A unique identifier assigned to each request, facilitating issue tracing. In the event that a problem arises with a request, this ID can be provided to The Bank of London support team for assistance.",
                "schema": {
                  "type": "string"
                },
                "example": "2579248247516384065",
                "required": true
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/BacsSinglePayment"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/PaymentUnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/BankAccountNotFoundError"
          },
          "409": {
            "$ref": "#/components/responses/ErrorResponseConflictIdempotencyId"
          },
          "422": {
            "$ref": "#/components/responses/CreateBacsPaymentUnprocessableError"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "tags": ["Payments"]
      }
    },
    "/v2/payments/chaps": {
      "post": {
        "operationId": "CreateACHAPSPayment",
        "summary": "Create a CHAPS Payment",
        "description": "This operation initiates a CHAPS payment in the context of\nan application registered with The Bank of London Developer Studio. It takes a request body\nthat contains all the necessary information required to issue a\nsingle CHAPS payment.\n\nCHAPS operates same day processing between Monday to Friday; our current cut off for same day payment is 1.00PM,\nand payments submitted after this cut-off time will be processed the next working day. The scheme does not \noperate on weekends and bank holidays (England & Wales).\n\nPlease ensure that any CHAPS payments are only made on your behalf and not on behalf of your clients \n(if applicable).\n\nVirtual accounts cannot be used for CHAPS payments.\n\nTBOL uses an agency bank to process CHAPS payments on its behalf; CHAPS payments cannot be reversed. If you need\nany assistance, please contact us as soon as possible at uksupport@thebankoflondon.com or call us on \n+443301 659 131\n\n## Single CHAPS Payment\n\n### Example request body:\n```JSON\n{\n  \"type\": \"CHAPS_DEBIT\",\n  \"sender\": {\n    \"type\": \"TBOL\",\n    \"accountId\": \"GB-040075-12345678\"\n  },\n  \"recipient\": {\n    \"type\": \"UK\",\n    \"accountHolderName\": \"John Smith\",\n    \"sortCode\": \"123456\",\n    \"accountNumber\": \"12345678\"\n  },\n  \"amount\": {\n    \"currency\": \"GBP\",\n    \"value\": 1200000.50\n  },\n  \"reference\": \"INV-12345\",\n  \"notes\": \"Additional notes for the sender\",\n  \"plannedExecutionDateTime\": \"2024-01-11T00:00:00.000Z\",\n  \"idempotencyId\": \"32ed5f75-638e-454c-a91b-ec16dc8f6e84\"\n}\n```\n\nThe API will return details of the created payment along with its status after initiation. The ID can be used to\nretrieve the payment details (`GET /payments/{paymentId}`) including its current status in the future.\n\n### Example response:\n```JSON\n{\n  \"id\": \"FItJ8s2G-aOUfXUFqzRXE\",\n  \"type\": \"CHAPS_DEBIT\",\n  \"scheme\": \"CHAPS\",\n  \"sender\": {\n    \"type\": \"TBOL\",\n    \"accountId\": \"GB-040075-12345678\",\n    \"sortCode\": \"040075\",\n    \"accountNumber\": \"12345678\"\n  },\n  \"recipient\": {\n    \"type\": \"UK\",\n    \"accountHolderName\": \"John Smith\",\n    \"sortCode\": \"123456\",\n    \"accountNumber\": \"12345678\"\n  },\n  \"amount\": {\n    \"currency\": \"GBP\",\n    \"value\": 1200000.50\n  },\n  \"reference\": \"INV-12345\",\n  \"notes\": \"Additional notes for the sender\",\n  \"plannedExecutionDateTime\": \"2024-01-11T00:00:00.000Z\",\n  \"status\": {\n    \"identifier\":\"PENDING\",\n    \"detailedStatusIdentifier\":\"RECEIVED\",\n    \"history\": [\n      {\n        \"identifier\":\"PENDING\",\n        \"detailedStatusIdentifier\":\"RECEIVED\",\n        \"dateTime\":\"2024-05-02T15:51:15.792Z\"\n      },\n      {\n        \"identifier\":\"PENDING\",\n        \"detailedStatusIdentifier\":\"PENDING\",\n        \"dateTime\":\"2024-05-02T15:51:14.939Z\"\n      }\n    ]\n  },\n  \"createdDateTime\": \"2023-10-05T12:55:54.946Z\",\n  \"createdBy\": \"64e739504746e6fe27ed53b5\",\n  \"paymentOrderId\": \"S4B1  20240510000000065638\",\n  \"idempotencyId\": \"32ed5f75-638e-454c-a91b-ec16dc8f6e84\",\n  \"creator\": {\n    \"type\": \"API\",\n    \"key\": \"03967d18-5152-4f5a-9276-7f96c96f05ba\"\n  }\n}\n```",
        "parameters": [
          {
            "$ref": "#/components/parameters/JwsSignature"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "object",
                    "title": "CHAPS Payment Request",
                    "description": "Payment object that is required to initiate a single CHAPS payment.",
                    "properties": {
                      "type": {
                        "type": "string",
                        "description": "Represents an immediate or future dated CHAPS payment.",
                        "enum": ["CHAPS_DEBIT"]
                      },
                      "sender": {
                        "$ref": "#/components/schemas/PaymentSender"
                      },
                      "recipient": {
                        "$ref": "#/components/schemas/PaymentRecipient"
                      },
                      "amount": {
                        "$ref": "#/components/schemas/ChapsPaymentAmount"
                      },
                      "reference": {
                        "$ref": "#/components/schemas/PaymentReferenceRequest"
                      },
                      "notes": {
                        "$ref": "#/components/schemas/PaymentNotes"
                      },
                      "plannedExecutionDateTime": {
                        "$ref": "#/components/schemas/PlannedPaymentExecutionDateTime"
                      },
                      "idempotencyId": {
                        "$ref": "#/components/schemas/IdempotencyId"
                      }
                    },
                    "required": [
                      "type",
                      "sender",
                      "recipient",
                      "amount",
                      "reference",
                      "idempotencyId"
                    ]
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Accepted",
            "headers": {
              "x-correlation-id": {
                "description": "A unique identifier assigned to each request, facilitating issue tracing. In the event that a problem arises with a request, this ID can be provided to The Bank of London support team for assistance.",
                "schema": {
                  "type": "string"
                },
                "example": "2579248247516384065",
                "required": true
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/CHAPSSinglePayment"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/CreateChapsBadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/PaymentUnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/PaymentForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/BankAccountNotFoundError"
          },
          "409": {
            "$ref": "#/components/responses/ErrorResponseConflictIdempotencyId"
          },
          "422": {
            "$ref": "#/components/responses/CreateChapsPaymentUnprocessableError"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "tags": ["Payments"]
      }
    },
    "/v2/payments": {
      "get": {
        "operationId": "GetPayments",
        "summary": "Get Payments",
        "description": "Retrieves a list of payment requests in the context of a consumer\napplication.\n\nPayments must be filtered using the `accountId` query parameter.\nThere are also optional query parameters available for further filtering.\n\nPayment requests may be just initiated or may have been in progress for\na while. The API returns their current status along with the payment ID\n(`id`) to be able to retrieve a specific payment request later via `GET\n/payments/{paymentId}`.\n\n### Example request:\n\n```\nGET /payments?accountId=GB-040075-12345678\n```\n\n### Example for filtering by created date range and scheme:\n```\nGET /payments?accountId=GB-040075-12345678&createdDateFrom=2020-10-10&createdDateTo=2020-10-12&scheme=FPS\n```\n\nThe API will respond with an array of objects that contain all the details of the resulting payment requests.\n\n### Example response:\n```JSON\n{\n  \"payments\": [\n    {\n      \"id\": \"FItJ8s2G-aOUfXUFqzRXE\",\n      \"type\": \"FPS_DEBIT\",\n      \"scheme\": \"FPS\",\n      \"sender\": {\n        \"type\": \"TBOL\",\n        \"accountId\": \"GB-040075-12345678\",\n        \"sortCode\": \"040075\",\n        \"accountNumber\": \"12345678\"\n      },\n      \"recipient\": {\n        \"type\": \"UK\",\n        \"accountHolderName\": \"John Smith\",\n        \"sortCode\": \"123456\",\n        \"accountNumber\": \"12345678\"\n      },\n      \"reference\": \"My first payment\",\n      \"notes\": \"my note\",\n      \"amount\": {\n        \"currency\": \"GBP\",\n        \"value\": 4320.5\n      },\n      \"status\": {\n        \"identifier\": \"PENDING\",\n        \"detailedStatusIdentifier\": \"ACCEPTED_TECHNICAL_VALIDATION\",\n        \"history\": [\n          {\n            \"identifier\": \"PENDING\",\n            \"detailedStatusIdentifier\": \"ACCEPTED_TECHNICAL_VALIDATION\",\n            \"dateTime\": \"2020-10-19T12:55:54.946Z\"\n          },\n          {\n            \"identifier\": \"PENDING\",\n            \"detailedStatusIdentifier\": \"RECEIVED\",\n            \"dateTime\": \"2020-10-19T12:55:52.25Z\"\n          },\n          {\n            \"identifier\": \"PENDING\",\n            \"detailedStatusIdentifier\": \"PENDING\",\n            \"dateTime\": \"2020-10-19T12:55:50.667Z\"\n          }\n        ]\n      },\n      \"createdDateTime\": \"2023-10-19T12:55:47.467Z\",\n      \"plannedExecutionDateTime\": \"2023-10-20\",\n      \"createdBy\": \"64e739504746e6fe27ed53b5\",\n      \"paymentOrderId\": \"S4B1  20240510000000065638\",\n      \"idempotencyId\": \"32ed5f75-638e-454c-a91b-ec16dc8f6e84\",\n      \"creator\": {\n        \"type\": \"USER\",\n        \"id\": \"64e739504746e6fe27ed53b5\"\n      }\n    },\n    {\n      \"id\": \"FItJ8s2G-aOUfXUFqzRXE\",\n      \"type\": \"FPS_STANDING_ORDER_DEBIT\",\n      \"scheme\": \"FPS\",\n      \"sender\": {\n        {...}\n      },\n      \"recipient\": {\n        {...}\n      },\n      \"amount\": {\n        {...}\n      },\n      \"reference\": \"My payment\",\n      \"schedule\": {\n        \"frequency\": \"MONTHLY\",\n        \"startDateTime\": \"2020-10-20T12:55:54.946Z\",\n        \"numberOfPayments\": 3\n      },\n      \"status\": {\n        \"identifier\": \"PENDING\",\n        \"detailedStatusIdentifier\": \"ACCEPTED_TECHNICAL_VALIDATION\",\n        \"history\": [\n          {\n            \"identifier\": \"PENDING\",\n            \"detailedStatusIdentifier\": \"ACCEPTED_TECHNICAL_VALIDATION\",\n            \"dateTime\": \"2020-10-19T12:55:54.946Z\"\n          },\n          {\n            \"identifier\": \"PENDING\",\n            \"detailedStatusIdentifier\": \"RECEIVED\",\n            \"dateTime\": \"2020-10-19T12:55:52.25Z\"\n          },\n          {\n            \"identifier\": \"PENDING\",\n            \"detailedStatusIdentifier\": \"PENDING\",\n            \"dateTime\": \"2020-10-19T12:55:50.667Z\"\n          }\n        ]\n      },\n      \"createdBy\": \"64e739504746e6fe27ed53b5\",\n      \"createdDateTime\": \"2023-10-20T00:27:59.613Z\",\n      \"plannedExecutionDate\": \"2023-10-20\",\n      \"paymentOrderId\": \"S4B1  20240510000000065639\",\n      \"idempotencyId\": \"32ed5f75-638e-454c-a91b-ec16dc8f6e85\",\n      \"standingOrderId\": \"VkfAIi3VOVO3ssMGHmt6P\",\n      \"creator\": {\n        \"type\": \"SYSTEM\"\n      }\n    },\n    {\n      \"id\": \"eWD5O4sUHIuoV_KnlSG6j\",\n      \"type\": \"BACS_DEBIT\",\n      \"scheme\": \"BACS\",\n      \"sender\": {\n        \"type\": \"TBOL\",\n        \"accountId\": \"GB-040075-12345678\",\n        \"sortCode\": \"040075\",\n        \"accountNumber\": \"12345678\"\n      },\n      \"payments\": [\n        {\n          \"recipient\": {\n            \"type\": \"UK\",\n            \"sortCode\": \"123456\",\n            \"accountNumber\": \"12345678\",\n            \"accountHolderName\": \"John Smith\"\n          },\n          \"reference\": \"INV-12345\",\n          \"notes\": \"my note\",\n          \"amount\": {\n            \"value\": 1,\n            \"currency\": \"GBP\"\n          }\n        }\n      ],\n      \"status\": {\n        \"identifier\": \"PENDING_APPROVAL\"\n        \"detailedStatusIdentifier\": \"PENDING_APPROVAL\",\n        \"history\": [\n          {\n            \"identifier\": \"PENDING_APPROVAL\",\n            \"detailedStatusIdentifier\": \"PENDING_APPROVAL\",\n            \"dateTime\": \"2023-10-20T00:28:15.276Z\"\n          }\n        ]\n      },\n      \"createdBy\": \"64e739504746e6fe27ed53b5\",\n      \"createdDateTime\": \"2023-10-20T00:27:59.613Z\",\n      \"plannedExecutionDate\": \"2023-10-20\"\n      \"paymentOrderId\": \"S4B1  20240510000000065640\",\n      \"idempotencyId\": \"32ed5f75-638e-454c-a91b-ec16dc8f6e86\",\n      \"creator\": {\n        \"type\": \"API\",\n        \"key\": \"03967d18-5152-4f5a-9276-7f96c96f05ba\"\n      }\n    },\n    {...}\n  ],\n  \"metadata\": {\n    \"totalRecords\": 3,\n    \"pageSize\": 20,\n    \"page\": 1\n  },\n}\n```",
        "parameters": [
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "in": "query",
            "name": "accountId",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountId"
            }
          },
          {
            "in": "query",
            "name": "createdDateFrom",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The oldest date from which the payments will be provided.",
              "format": "date",
              "example": "2022-10-06"
            }
          },
          {
            "in": "query",
            "name": "createdDateTo",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The most recent date from which the payments will be provided.",
              "format": "date",
              "example": "2022-10-01"
            }
          },
          {
            "in": "query",
            "name": "plannedExecutionDateFrom",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The oldest date from which the payments will be provided based on the plannedExecutionDate.",
              "format": "date",
              "example": "2022-10-06"
            }
          },
          {
            "in": "query",
            "name": "plannedExecutionDateTo",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The most recent date from which the payments will be provided based on the plannedExecutionDate.",
              "format": "date",
              "example": "2022-10-01"
            }
          },
          {
            "in": "query",
            "name": "scheme",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PaymentScheme"
            }
          },
          {
            "in": "query",
            "name": "status",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PaymentStatusQueryParam"
            }
          },
          {
            "in": "query",
            "name": "amount",
            "required": false,
            "description": "The amount value of the payment.",
            "schema": {
              "$ref": "#/components/schemas/value"
            }
          },
          {
            "in": "query",
            "name": "reference",
            "required": false,
            "description": "Reference note that is sent along with the payment and usually contains\npersonal or business related information. This is visible to the sender\nand the recipient. This is a query against the full reference text and is case insensitive.",
            "schema": {
              "$ref": "#/components/schemas/PaymentReferenceRequest"
            }
          },
          {
            "in": "query",
            "name": "type",
            "required": false,
            "description": "The type of payment.",
            "schema": {
              "$ref": "#/components/schemas/PaymentTypeQueryParam"
            }
          },
          {
            "in": "query",
            "name": "idempotencyId",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The idempotency ID associated with a payment.",
              "example": "32ed5f75-638e-454c-a91b-ec16dc8f6e84"
            }
          },
          {
            "in": "query",
            "name": "standingOrderId",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PaymentStandingOrderId"
            }
          },
          {
            "$ref": "#/components/parameters/JwsSignature"
          }
        ],
        "responses": {
          "200": {
            "description": "Success\n\n<span style=\"color:#f46d2a; font-size:14px; font-family:Inter;\">**Attention**</span> \\\n<span style=\"font-size:14px; font-family:Inter;\">Please note that the oneOf payments in the **body** below, is extensible and new objects can be \nreturned with a new payment **type** and **scheme**\nin the future without a major version change. Please ensure this is factored into your application code.\n",
            "headers": {
              "x-correlation-id": {
                "description": "A unique identifier assigned to each request, facilitating issue tracing. In the event that a problem arises with a request, this ID can be provided to The Bank of London support team for assistance.",
                "schema": {
                  "type": "string"
                },
                "example": "2579248247516384065",
                "required": true
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "payments": {
                      "type": "array",
                      "items": {
                        "oneOf": [
                          {
                            "$ref": "#/components/schemas/InternalSinglePayment"
                          },
                          {
                            "$ref": "#/components/schemas/FPSSinglePayment"
                          },
                          {
                            "$ref": "#/components/schemas/CHAPSSinglePayment"
                          },
                          {
                            "$ref": "#/components/schemas/BacsSinglePayment"
                          }
                        ]
                      }
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/MetaData"
                    }
                  },
                  "required": ["payments", "metadata"]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "tags": ["Payments"]
      }
    },
    "/v2/payments/{paymentId}": {
      "get": {
        "operationId": "GetPayment",
        "summary": "Get Payment",
        "description": "Retrieves a single payment by its ID `paymentId`.\n\n### Example request:\n\n```\nGET /payments/FItJ8s2G-aOUfXUFqzRXE\n```\n\nThe API will respond with all the details of the payment request.\n\n### Example response:\n```JSON\n{\n  \"id\": \"FItJ8s2G-aOUfXUFqzRXE\",\n  \"type\": \"FPS_DEBIT\",\n  \"scheme\": \"FPS\",\n  \"sender\": {\n    \"type\": \"TBOL\",\n    \"accountId\": \"GB-040075-12345678\"\n    \"sortCode\": \"040075\",\n    \"accountNumber\": \"12345678\"\n  },\n  \"recipient\": {\n    \"type\": \"UK\",\n    \"accountHolderName\": \"John Smith\",\n    \"sortCode\": \"123456\",\n    \"accountNumber\": \"12345678\"\n  },\n  \"reference\": \"My first payment\",\n  \"amount\": {\n    \"currency\": \"GBP\",\n    \"value\": 4320.5\n  },\n  \"status\": {\n    \"identifier\": \"PENDING\",\n    \"detailedStatusIdentifier\": \"ACCEPTED_TECHNICAL_VALIDATION\",\n    \"history\": [\n      {\n        \"identifier\": \"PENDING\",\n        \"detailedStatusIdentifier\": \"ACCEPTED_TECHNICAL_VALIDATION\",\n        \"dateTime\": \"2020-10-19T12:55:54.946Z\"\n      },\n      {\n        \"identifier\": \"PENDING\",\n        \"detailedStatusIdentifier\": \"RECEIVED\",\n        \"dateTime\": \"2020-10-19T12:55:52.25Z\"\n      },\n      {\n        \"identifier\": \"PENDING\",\n        \"detailedStatusIdentifier\": \"PENDING\",\n        \"dateTime\": \"2020-10-19T12:55:50.667Z\"\n      }\n    ]\n  },\n  \"createdDateTime\": \"2023-10-19T12:55:47.467Z\",\n  \"plannedExecutionDate\": \"2023-10-20\",\n  \"createdBy\": \"64e739504746e6fe27ed53b5\",\n  \"paymentOrderId\": \"S4B1  20240510000000065638\",\n  \"idempotencyId\": \"32ed5f75-638e-454c-a91b-ec16dc8f6e84\",\n  \"creator\": {\n    \"type\": \"API\",\n    \"key\": \"03967d18-5152-4f5a-9276-7f96c96f05ba\"\n  }\n}\n```",
        "parameters": [
          {
            "in": "path",
            "name": "paymentId",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PaymentId"
            }
          },
          {
            "$ref": "#/components/parameters/JwsSignature"
          }
        ],
        "responses": {
          "200": {
            "description": "Success\n\n<span style=\"color:#f46d2a; font-size:14px; font-family:Inter;\">**Attention**</span> \\\n<span style=\"font-size:14px; font-family:Inter;\">Please note that the oneOf payments in the **body** below, is extensible and new objects can be \nreturned with a new payment **type** and **scheme**\nin the future without a major version change. Please ensure this is factored into your application code.\n",
            "headers": {
              "x-correlation-id": {
                "description": "A unique identifier assigned to each request, facilitating issue tracing. In the event that a problem arises with a request, this ID can be provided to The Bank of London support team for assistance.",
                "schema": {
                  "type": "string"
                },
                "example": "2579248247516384065",
                "required": true
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/InternalSinglePayment"
                    },
                    {
                      "$ref": "#/components/schemas/FPSSinglePayment"
                    },
                    {
                      "$ref": "#/components/schemas/CHAPSSinglePayment"
                    },
                    {
                      "$ref": "#/components/schemas/BacsSinglePayment"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/PaymentNotFound"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "tags": ["Payments"]
      }
    },
    "/v2/standing-orders/faster-payment": {
      "post": {
        "operationId": "CreateAFasterPaymentStandingOrder",
        "summary": "Create a Faster Payment Standing Order",
        "description": "This operation initiates an FPS standing order in the context of\nan application registered with The Bank of London Developer Studio. It takes a request body\nthat contains all the necessary information required to issue a\nstanding order.\n\nStanding orders cannot be created for the following accounts:\n  - Easy Access Deposit\n  - Fixed Notice Deposit\n\nThe start date must be at least one day in the future, and it must be a working day. The start date cannot be a weekend or public holiday.\n\nThe consumer application (identified by the API key) must always have\nthe permission to execute payments from the sender's account.\n\n### Example request body:\n```JSON\n{\n  \"sender\": {\n    \"type\": \"TBOL\",\n    \"accountId\": \"GB-043030-12345678\"\n  },\n  \"recipient\": {\n    \"type\": \"UK\",\n    \"sortCode\": \"123456\",\n    \"accountNumber\": \"12345678\",\n    \"accountHolderName\": \"John Smith\"\n  },\n  \"amount\": {\n    \"currency\": \"GBP\",\n    \"value\": 100\n  },\n  \"schedule\": {\n    \"startDateTime\": \"2024-02-15T00:00:00.000Z\",\n    \"numberOfPayments\": 3,\n    \"frequency\": \"WEEKLY\"\n  },\n  \"reference\": \"INV-12345\",\n  \"notes\": \"Additional info for Recipient\",\n  \"idempotencyId\": \"32ed5f75-638e-454c-a91b-ec16dc8f6e84\"\n}\n```\n\nThe API will return the full standing order along with its ID and\nstatus after initiation. The ID can be used to retrieve the standing order\ndetails (`GET /standing-orders/{standingOrderId}`) including its current status.\n\n### Example response:\n```JSON\n{\n  \"id\": \"5AsbLCDIbxHTc2eLxyrEa\",\n  \"scheme\": \"FPS\",\n  \"sender\": {\n    \"type\": \"TBOL\",\n    \"accountId\": \"GB-043030-12345678\",\n    \"sortCode\": \"043030\",\n    \"accountNumber\": \"12345678\"\n  },\n  \"recipient\": {\n    \"type\": \"UK\",\n    \"sortCode\": \"123456\",\n    \"accountNumber\": \"12345678\",\n    \"accountHolderName\": \"John Smith\"\n  },\n  \"amount\": {\n    \"currency\": \"GBP\",\n    \"value\": 100\n  },\n  \"schedule\": {\n    \"startDateTime\": \"2024-02-15T00:00:00.000Z\",\n    \"numberOfPayments\": 3,\n    \"frequency\": \"WEEKLY\"\n  },\n  \"status\": {\n    \"identifier\": \"PENDING\",\n    \"history\": [\n      {\n        \"identifier\": \"PENDING\",\n        \"detailedStatusIdentifier\": \"PENDING\",\n        \"dateTime\": \"2024-02-15T00:00:00.000Z\"\n      }\n    ]\n  },\n  \"creator\": {\n    \"type\": \"API\",\n    \"key\": \"03967d18-5152-4f5a-9276-7f96c96f05ba\"\n  }\n  \"createdBy\": \"64e739504746e6fe27ed53b5\",\n  \"createdDateTime\": \"2024-02-15T00:00:00.000Z\",\n  \"reference\": \"INV-12345\",\n  \"notes\": \"Additional info for Recipient\",\n  \"cancellation\": {\n    \"canCancel\": true\n  },\n  \"idempotencyId\": \"32ed5f75-638e-454c-a91b-ec16dc8f6e84\"\n}\n```",
        "parameters": [
          {
            "$ref": "#/components/parameters/JwsSignature"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "object",
                    "title": "FPS Standing Order Request",
                    "description": "Standing Order object that is required to initiate a FPS Standing Order",
                    "properties": {
                      "sender": {
                        "$ref": "#/components/schemas/StandingOrderSender"
                      },
                      "recipient": {
                        "$ref": "#/components/schemas/StandingOrderUKRecipient"
                      },
                      "amount": {
                        "$ref": "#/components/schemas/StandingOrderAmount"
                      },
                      "schedule": {
                        "$ref": "#/components/schemas/StandingOrderSchedule"
                      },
                      "reference": {
                        "$ref": "#/components/schemas/PaymentReferenceRequest1"
                      },
                      "notes": {
                        "$ref": "#/components/schemas/PaymentNotes1"
                      },
                      "idempotencyId": {
                        "$ref": "#/components/schemas/IdempotencyId"
                      }
                    },
                    "required": [
                      "sender",
                      "recipient",
                      "amount",
                      "schedule",
                      "reference",
                      "idempotencyId"
                    ]
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Accepted\n",
            "headers": {
              "x-correlation-id": {
                "description": "A unique identifier assigned to each request, facilitating issue tracing. In the event that a problem arises with a request, this ID can be provided to The Bank of London support team for assistance.",
                "schema": {
                  "type": "string"
                },
                "example": "2579248247516384065",
                "required": true
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FPSStandingOrder"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/StandingOrderUnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/BankAccountNotFoundError"
          },
          "409": {
            "$ref": "#/components/responses/ErrorResponseConflictIdempotencyId"
          },
          "422": {
            "$ref": "#/components/responses/CreateFPSStandingOrderUnprocessableError"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "tags": ["Standing Orders"]
      }
    },
    "/v2/standing-orders/internal": {
      "post": {
        "operationId": "CreateAnInternalStandingOrder",
        "summary": "Create an Internal Standing Order",
        "description": "This operation initiates a standing order via Internal Transfer in the context of\nan application registered with The Bank of London Developer Studio. It takes a request body\nthat contains all the necessary information required to issue a\nstanding order.\n\nStanding orders cannot be created for the following accounts:\n  - Easy Access Deposit\n  - Fixed Notice Deposit\n\nA Bank of London account ID that is owned by the requesting account holder must be specified as the recipient, otherwise the request will be rejected. \nA customer can only transfer between two of their own accounts eg. Operating Account → Client Collateral Account.\n\nIn contrast to the Faster Payment endpoint, this endpoint does not have the same payment calendar limitations, so a weekend or bank holiday can be specified.\n\nThe consumer application (identified by the API key) must always have\nthe permission to execute payments from the sender's account.\n\n### Example request body:\n```JSON\n{\n  \"sender\": {\n    \"type\": \"TBOL\",\n    \"accountId\": \"GB-043030-12345678\"\n  },\n  \"recipient\": {\n    \"type\": \"TBOL\",\n    \"accountId\": \"GB-043030-87654321\"\n  },\n  \"amount\": {\n    \"currency\": \"GBP\",\n    \"value\": 100\n  },\n  \"schedule\": {\n    \"startDateTime\": \"2024-02-15T00:00:00.000Z\",\n    \"numberOfPayments\": 3,\n    \"frequency\": \"WEEKLY\"\n  },\n  \"reference\": \"INV-12345\",\n  \"notes\": \"Additional info for Recipient\",\n  \"idempotencyId\": \"32ed5f75-638e-454c-a91b-ec16dc8f6e84\"\n}\n```\n\nThe API will return the full standing order along with its ID and\nstatus after initiation. The ID can be used to retrieve the standing order\ndetails (`GET /standing-orders/{standingOrderId}`) including its current status.\n\n### Example response:\n```JSON\n{\n  \"id\": \"5AsbLCDIbxHTc2eLxyrEa\",\n  \"scheme\": \"INTERNAL\",\n  \"sender\": {\n    \"type\": \"TBOL\",\n    \"accountId\": \"GB-043030-12345678\",\n    \"sortCode\": \"043030\",\n    \"accountNumber\": \"12345678\"\n  },\n  \"recipient\": {\n    \"type\": \"TBOL\",\n    \"accountId\": \"GB-040075-12345678\",\n    \"sortCode\": \"040075\",\n    \"accountNumber\": \"12345678\"\n  },\n  \"amount\": {\n    \"currency\": \"GBP\",\n    \"value\": 100\n  },\n  \"schedule\": {\n    \"startDateTime\": \"2024-02-15T00:00:00.000Z\",\n    \"numberOfPayments\": 3,\n    \"frequency\": \"WEEKLY\"\n  },\n  \"creator\": {\n    \"type\": \"API\",\n    \"key\": \"03967d18-5152-4f5a-9276-7f96c96f05ba\"\n  }\n  \"status\": {\n    \"identifier\": \"PENDING\",\n    \"history\": [\n      {\n        \"identifier\": \"PENDING\",\n        \"detailedStatusIdentifier\": \"PENDING\",\n        \"dateTime\": \"2024-02-15T00:00:00.000Z\"\n      }\n    ]\n  },\n  \"createdBy\": \"64e739504746e6fe27ed53b5\",\n  \"createdDateTime\": \"2024-02-15T00:00:00.000Z\",\n  \"reference\": \"INV-12345\",\n  \"notes\": \"Additional info for Recipient\",\n  \"cancellation\": {\n    \"canCancel\": true\n  },\n  \"idempotencyId\": \"32ed5f75-638e-454c-a91b-ec16dc8f6e84\"\n}\n```",
        "parameters": [
          {
            "$ref": "#/components/parameters/JwsSignature"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "object",
                    "title": "Internal Standing Order Request",
                    "description": "Standing Order object that is required to initiate an Internal Standing Order",
                    "properties": {
                      "sender": {
                        "$ref": "#/components/schemas/StandingOrderSender"
                      },
                      "recipient": {
                        "$ref": "#/components/schemas/StandingOrderInternalRecipient"
                      },
                      "amount": {
                        "$ref": "#/components/schemas/StandingOrderAmount"
                      },
                      "schedule": {
                        "$ref": "#/components/schemas/StandingOrderSchedule"
                      },
                      "reference": {
                        "$ref": "#/components/schemas/PaymentReferenceRequest1"
                      },
                      "notes": {
                        "$ref": "#/components/schemas/PaymentNotes1"
                      },
                      "idempotencyId": {
                        "$ref": "#/components/schemas/IdempotencyId"
                      }
                    },
                    "required": [
                      "sender",
                      "recipient",
                      "amount",
                      "schedule",
                      "reference",
                      "idempotencyId"
                    ]
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Accepted\n",
            "headers": {
              "x-correlation-id": {
                "description": "A unique identifier assigned to each request, facilitating issue tracing. In the event that a problem arises with a request, this ID can be provided to The Bank of London support team for assistance.",
                "schema": {
                  "type": "string"
                },
                "example": "2579248247516384065",
                "required": true
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalStandingOrder"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/StandingOrderUnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/BankAccountNotFoundError"
          },
          "409": {
            "$ref": "#/components/responses/ErrorResponseConflictIdempotencyId"
          },
          "422": {
            "$ref": "#/components/responses/CreateInternalStandingOrderUnprocessableError"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "tags": ["Standing Orders"]
      }
    },
    "/v2/standing-orders": {
      "get": {
        "operationId": "GetStandingOrders",
        "summary": "Get Standing Orders",
        "description": "Retrieves a list of standing orders in the context of a consumer\napplication.\n\nStanding orders must be filtered using the `accountId` query parameter.\nThere are also optional query parameters available for further filtering.\n\nThe API returns their current status along with the standing order ID\n(`id`) to be able to retrieve a specific standing order later via `GET\n/standing-orders/{standingOrderId}`.\n\n### Example request:\n\n```\nGET /standing-orders?accountId=GB-040075-12345678\n```\n\n### Example for filtering by created date range and scheme:\n```\nGET /standing-orders?accountId=GB-040075-12345678&createdDateFrom=2020-10-10&createdDateTo=2020-10-12&scheme=FPS\n```\n\nThe API will respond with an array of objects that contain all the details of the resulting standing orders.\n\n### Example response:\n```JSON\n{\n  \"records\": [\n    {\n      \"id\": \"5AsbLCDIbxHTc2eLxyrEa\",\n      \"scheme\": \"FPS\",\n      \"sender\": {\n        \"type\": \"TBOL\",\n        \"accountId\": \"GB-043030-12345678\",\n        \"sortCode\": \"043030\",\n        \"accountNumber\": \"12345678\"\n      },\n      \"recipient\": {\n        \"type\": \"UK\",\n        \"sortCode\": \"123456\",\n        \"accountNumber\": \"12345678\",\n        \"accountHolderName\": \"John Smith\"\n      },\n      \"amount\": {\n        \"currency\": \"GBP\",\n        \"value\": 100\n      },\n      \"schedule\": {\n        \"startDateTime\": \"2024-02-15T00:00:00.000Z\",\n        \"numberOfPayments\": 3,\n        \"frequency\": \"WEEKLY\"\n      },\n      \"creator\": {\n        \"type\": \"API\",\n        \"key\": \"03967d18-5152-4f5a-9276-7f96c96f05ba\"\n      }\n      \"status\": {\n        \"identifier\": \"ACTIVE\",\n        \"history\": [\n          {\n            \"identifier\": \"ACTIVE\",\n            \"dateTime\": \"2024-02-15T00:00:00.000Z\"\n          },\n          {\n            \"identifier\": \"PENDING\",\n            \"detailedStatusIdentifier\": \"PENDING\",\n            \"dateTime\": \"2024-02-15T00:00:00.000Z\"\n          }\n        ]\n      },\n      \"createdBy\": \"64e739504746e6fe27ed53b5\",\n      \"createdDateTime\": \"2024-02-15T00:00:00.000Z\",\n      \"reference\": \"INV-12345\",\n      \"notes\": \"Additional info for Recipient\",\n      \"cancellation\": {\n        \"canCancel\": true\n      },\n      \"idempotencyId\": \"32ed5f75-638e-454c-a91b-ec16dc8f6e84\"\n    }\n    {...}\n  ],\n  \"metadata\": {\n    \"totalRecords\": 3,\n    \"pageSize\": 20,\n    \"page\": 1\n  },\n}\n```",
        "parameters": [
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          },
          {
            "in": "query",
            "name": "accountId",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountId"
            }
          },
          {
            "in": "query",
            "name": "createdDateFrom",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The oldest created date from which the standing orders will be provided.",
              "format": "date",
              "example": "2022-10-06"
            }
          },
          {
            "in": "query",
            "name": "createdDateTo",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The most recent created date from which the standing orders will be provided.",
              "format": "date",
              "example": "2022-10-01"
            }
          },
          {
            "in": "query",
            "name": "scheme",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/StandingOrderScheme"
            }
          },
          {
            "in": "query",
            "name": "status",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/StandingOrderStatusQueryParam"
            }
          },
          {
            "in": "query",
            "name": "amount",
            "required": false,
            "description": "The amount value of the standing order.",
            "schema": {
              "$ref": "#/components/schemas/value"
            }
          },
          {
            "in": "query",
            "name": "reference",
            "required": false,
            "description": "Reference note that is sent along with the related payments and usually contains\npersonal or business related information. This is visible to the sender\nand the recipient. This is a query against the full reference text and is case insensitive.",
            "schema": {
              "$ref": "#/components/schemas/PaymentReference1"
            }
          },
          {
            "in": "query",
            "name": "cancelledDateTimeFrom",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The oldest cancellation date from which the standing orders will be provided.",
              "format": "date",
              "example": "2022-10-06"
            }
          },
          {
            "in": "query",
            "name": "cancelledDateTimeTo",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The most recent cancellation date from which the standing orders will be provided.",
              "format": "date",
              "example": "2022-10-01"
            }
          },
          {
            "in": "query",
            "name": "idempotencyId",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The idempotency ID associated with a standing order.",
              "example": "32ed5f75-638e-454c-a91b-ec16dc8f6e84"
            }
          },
          {
            "$ref": "#/components/parameters/JwsSignature"
          }
        ],
        "responses": {
          "200": {
            "description": "Success\n",
            "headers": {
              "x-correlation-id": {
                "description": "A unique identifier assigned to each request, facilitating issue tracing. In the event that a problem arises with a request, this ID can be provided to The Bank of London support team for assistance.",
                "schema": {
                  "type": "string"
                },
                "example": "2579248247516384065",
                "required": true
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "records": {
                      "type": "array",
                      "items": {
                        "oneOf": [
                          {
                            "$ref": "#/components/schemas/FPSStandingOrder"
                          },
                          {
                            "$ref": "#/components/schemas/InternalStandingOrder"
                          }
                        ]
                      }
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/MetaData"
                    }
                  },
                  "required": ["records", "metadata"]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "tags": ["Standing Orders"]
      }
    },
    "/v2/standing-orders/{standingOrderId}": {
      "get": {
        "operationId": "GetStandingOrder",
        "summary": "Get Standing Order",
        "description": "Retrieves a single standing order by its ID `standingOrderId`.\n\n### Example request:\n\n```\nGET /standing-orders/5AsbLCDIbxHTc2eLxyrEa\n```\n\nThe API will respond with all the details of the standing order.\n\n### Example response:\n```JSON\n{\n  \"id\": \"5AsbLCDIbxHTc2eLxyrEa\",\n  \"scheme\": \"FPS\",\n  \"sender\": {\n    \"type\": \"TBOL\",\n    \"accountId\": \"GB-043030-12345678\",\n    \"sortCode\": \"043030\",\n    \"accountNumber\": \"12345678\"\n  },\n  \"recipient\": {\n    \"type\": \"UK\",\n    \"sortCode\": \"123456\",\n    \"accountNumber\": \"12345678\",\n    \"accountHolderName\": \"John Smith\"\n  },\n  \"amount\": {\n    \"currency\": \"GBP\",\n    \"value\": 100\n  },\n  \"schedule\": {\n    \"startDateTime\": \"2024-02-15T00:00:00.000Z\",\n    \"numberOfPayments\": 3,\n    \"frequency\": \"WEEKLY\"\n  },\n  \"creator\": {\n    \"type\": \"API\",\n    \"key\": \"03967d18-5152-4f5a-9276-7f96c96f05ba\"\n  }\n  \"status\": {\n    \"identifier\": \"ACTIVE\",\n    \"history\": [\n      {\n        \"identifier\": \"ACTIVE\",\n        \"dateTime\": \"2024-02-15T00:00:00.000Z\"\n      },\n      {\n        \"identifier\": \"PENDING\",\n        \"detailedStatusIdentifier\": \"PENDING\",\n        \"dateTime\": \"2024-02-15T00:00:00.000Z\"\n      }\n    ]\n  },\n  \"createdBy\": \"64e739504746e6fe27ed53b5\",\n  \"createdDateTime\": \"2024-02-15T00:00:00.000Z\",\n  \"reference\": \"INV-12345\",\n  \"notes\": \"Additional info for Recipient\",\n  \"cancellation\": {\n    \"canCancel\": true\n  },\n  \"idempotencyId\": \"32ed5f75-638e-454c-a91b-ec16dc8f6e84\"\n}\n```",
        "parameters": [
          {
            "in": "path",
            "name": "standingOrderId",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/StandingOrderId"
            }
          },
          {
            "$ref": "#/components/parameters/JwsSignature"
          }
        ],
        "responses": {
          "200": {
            "description": "Success\n",
            "headers": {
              "x-correlation-id": {
                "description": "A unique identifier assigned to each request, facilitating issue tracing. In the event that a problem arises with a request, this ID can be provided to The Bank of London support team for assistance.",
                "schema": {
                  "type": "string"
                },
                "example": "2579248247516384065",
                "required": true
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/FPSStandingOrder"
                    },
                    {
                      "$ref": "#/components/schemas/InternalStandingOrder"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/StandingOrderNotFound"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "tags": ["Standing Orders"]
      },
      "patch": {
        "operationId": "UpdateStandingOrder",
        "summary": "Update a Standing Order",
        "description": "This operation updates a standing order by its ID `standingOrderId` in the context of\nan application registered with The Bank of London Developer Studio. \n\nAt present, only the amount can be updated.\n\n### Example request body:\n```JSON\n{\n  \"amount\": {\n    \"currency\": \"GBP\",\n    \"value\": 200\n  }\n}\n```\n\nThe API will return the updated standing order.\n\n### Example response:\n```JSON\n{\n  \"id\": \"5AsbLCDIbxHTc2eLxyrEa\",\n  \"scheme\": \"FPS\",\n  \"sender\": {\n    \"type\": \"TBOL\",\n    \"accountId\": \"GB-043030-12345678\",\n    \"sortCode\": \"043030\",\n    \"accountNumber\": \"12345678\"\n  },\n  \"recipient\": {\n    \"type\": \"UK\",\n    \"sortCode\": \"123456\",\n    \"accountNumber\": \"12345678\",\n    \"accountHolderName\": \"John Smith\"\n  },\n  \"amount\": {\n    \"currency\": \"GBP\",\n    \"value\": 200\n  },\n  \"schedule\": {\n    \"startDateTime\": \"2024-02-15T00:00:00.000Z\",\n    \"numberOfPayments\": 3,\n    \"frequency\": \"WEEKLY\"\n  },\n  \"creator\": {\n    \"type\": \"API\",\n    \"key\": \"03967d18-5152-4f5a-9276-7f96c96f05ba\"\n  }\n  \"status\": {\n    \"identifier\": \"ACTIVE\",\n    \"history\": [\n      {\n        \"identifier\": \"ACTIVE\",\n        \"dateTime\": \"2024-02-15T00:00:00.000Z\"\n      },\n      {\n        \"identifier\": \"PENDING\",\n        \"detailedStatusIdentifier\": \"PENDING\",\n        \"dateTime\": \"2024-02-15T00:00:00.000Z\"\n      }\n    ]\n  },\n  \"createdBy\": \"64e739504746e6fe27ed53b5\",\n  \"createdDateTime\": \"2024-02-15T00:00:00.000Z\",\n  \"reference\": \"INV-12345\",\n  \"notes\": \"Additional info for Recipient\",\n  \"cancellation\": {\n    \"canCancel\": true\n  },\n  \"idempotencyId\": \"32ed5f75-638e-454c-a91b-ec16dc8f6e84\"\n}\n```",
        "parameters": [
          {
            "in": "path",
            "name": "standingOrderId",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/StandingOrderId"
            }
          },
          {
            "$ref": "#/components/parameters/JwsSignature"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "object",
                    "title": "Standing Order Update Request",
                    "description": "Standing Order object that is required to update a standing order",
                    "properties": {
                      "amount": {
                        "$ref": "#/components/schemas/StandingOrderAmount"
                      }
                    },
                    "required": ["amount"]
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Standing order successfully updated\n",
            "headers": {
              "x-correlation-id": {
                "description": "A unique identifier assigned to each request, facilitating issue tracing. In the event that a problem arises with a request, this ID can be provided to The Bank of London support team for assistance.",
                "schema": {
                  "type": "string"
                },
                "example": "2579248247516384065",
                "required": true
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/FPSStandingOrder"
                    },
                    {
                      "$ref": "#/components/schemas/InternalStandingOrder"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/StandingOrderNotFound"
          },
          "409": {
            "$ref": "#/components/responses/UpdateStandingOrderConflictError"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "tags": ["Standing Orders"]
      }
    },
    "/v2/standing-orders/{standingOrderId}/cancel": {
      "post": {
        "operationId": "CancelStandingOrder",
        "summary": "Cancel a Standing Order",
        "description": "This operation cancels a standing order by its ID `standingOrderId` in the context of\nan application registered with The Bank of London Developer Studio.\n\nThe API will return a success response and empty body if the standing order was successfully cancelled.",
        "parameters": [
          {
            "in": "path",
            "name": "standingOrderId",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/StandingOrderId"
            }
          },
          {
            "$ref": "#/components/parameters/JwsSignature"
          }
        ],
        "responses": {
          "200": {
            "description": "Standing order successfully cancelled\n",
            "headers": {
              "x-correlation-id": {
                "description": "A unique identifier assigned to each request, facilitating issue tracing. In the event that a problem arises with a request, this ID can be provided to The Bank of London support team for assistance.",
                "schema": {
                  "type": "string"
                },
                "example": "2579248247516384065",
                "required": true
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/StandingOrderNotFound"
          },
          "409": {
            "$ref": "#/components/responses/CancelStandingOrderConflictError"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "tags": ["Standing Orders"]
      }
    },
    "/v2/transactions": {
      "get": {
        "operationId": "GetTransactions",
        "summary": "Get Transactions",
        "description": "This operation allows to retrieve a list of transactions along with the transaction ID\n(`id`) to be able to retrieve a specific transaction later via `GET\n/transactions/{transactionId}`.\n\nIt must be filtered by The Bank of London account ID (`accountId`) to\nretrieve only payments for a specific account. \n\nIt can also be filtered by the `fromDate`, `toDate` and `transactionType` fields to narrow down the result\nset.\n\n### Example request:\n\n```\nGET /transactions?accountId=GB-040075-12345678&fromDate=2020-10-10&toDate=2020-10-12\n```\n\n### Example for filtering by type:\n```\nGET /transactions?accountId=GB-040075-12345678&fromDate=2020-10-10&toDate=2020-10-12&transactionType=INTERNAL_DEBIT_THIRD_PARTY\n```\n\nThe API will respond with an array of objects that contain all the details of the resulting transactions.\n\n### Example response:\n```JSON\n{\n  \"transactions\": [\n    {\n      \"id\": \"0022484107DB1EED9D85FA3B8119427D001\",\n      \"type\": \"INTERNAL_DEBIT_THIRD_PARTY\",\n      \"typeDescription\": \"Outbound internal transfer (third party)\",\n      \"sender\": {\n        \"type\": \"TBOL\",\n        \"accountHolderName\": \"Ryan Doe\",\n        \"accountId\": \"GB-040075-12345678\",\n        \"accountNumber\": \"12345678\",\n        \"sortCode\": \"040075\"\n      },\n      \"recipient\": {\n        \"type\": \"TBOL\",\n        \"accountHolderName\": \"John Doe\",\n        \"accountId\": \"GB-040075-12345678\",\n        \"accountNumber\": \"12345678\",\n        \"sortCode\": \"040075\"\n      },\n      \"isCredit\": \"false\",\n      \"reference\": \"Invoice 12345\",\n      \"notes\": \"My first transaction\",\n      \"amount\": {\n        \"currency\": \"GBP\",\n        \"value\": 4320.5\n      },\n      \"postingDate\": \"2022-10-07\",\n      \"releaseDateTime\": \"2022-10-07T08:55:33.213Z\",\n      \"valueDate\": \"2022-10-07\",\n      \"createdDateTime\": \"2022-10-07T08:55:33.213Z\",\n      \"account\": {\n        \"currency\": \"GBP\",\n        \"balance\": 5000\n      },\n      \"status\": {\n        \"identifier\": \"SUCCESSFUL\"\n      },\n      \"paymentOrderId\": \"S4B1  20240510000000065638\"\n    },\n    {...}\n  ],\n  \"metadata\": {\n    \"totalRecords\": 2,\n    \"pageSize\": 20,\n    \"page\": 1\n  },\n}\n```",
        "parameters": [
          {
            "$ref": "#/components/parameters/JwsSignature"
          },
          {
            "in": "query",
            "name": "accountId",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountId"
            }
          },
          {
            "in": "query",
            "name": "fromDate",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/TransactionFromDate"
            }
          },
          {
            "in": "query",
            "name": "toDate",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/TransactionToDate"
            }
          },
          {
            "in": "query",
            "name": "transactionType",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/TransactionType"
            }
          },
          {
            "in": "query",
            "name": "isCredit",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/TransactionIsCreditQueryParam"
            }
          },
          {
            "in": "query",
            "name": "search",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/TransactionSearch"
            }
          },
          {
            "in": "query",
            "name": "orderBy",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/TransactionOrderBy"
            }
          },
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          }
        ],
        "responses": {
          "200": {
            "description": "Success\n\n<span style=\"color:#f46d2a; font-size:14px; font-family:Inter;\">**Attention**</span> \\\n<span style=\"font-size:14px; font-family:Inter;\">Please note that the oneOf transactions in the **body** below, is extensible and new objects can be \nreturned with a new transaction **type**\nin the future without a major version change. Please ensure this is factored into your\napplication code.</span>\n",
            "headers": {
              "x-correlation-id": {
                "description": "A unique identifier assigned to each request, facilitating issue tracing. In the event that a problem arises with a request, this ID can be provided to The Bank of London support team for assistance.",
                "schema": {
                  "type": "string"
                },
                "example": "2579248247516384065",
                "required": true
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "transactions": {
                      "type": "array",
                      "items": {
                        "oneOf": [
                          {
                            "$ref": "#/components/schemas/PaymentTransaction1"
                          },
                          {
                            "$ref": "#/components/schemas/FeeInterestTransaction"
                          }
                        ]
                      }
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/MetaData"
                    }
                  },
                  "required": ["transactions", "metadata"]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "tags": ["Transactions"]
      }
    },
    "/v2/transactions/{transactionId}": {
      "get": {
        "operationId": "GetTransaction",
        "summary": "Get Transaction",
        "description": "Retrieves a single transaction by its ID `transactionId`.\n\n### Example request:\n\n```\nGET /transactions/0022484107DB1EED9D85FA3B8119427D001\n```\n\nThe API will respond with all the details of the transaction.\n\n### Example response:\n```JSON\n{\n  \"id\": \"0022484107DB1EED9D85FA3B8119427D001\",\n  \"type\": \"INTERNAL_DEBIT_THIRD_PARTY\",\n  \"typeDescription\": \"Outbound internal transfer (third party)\",\n  \"sender\": {\n    \"type\": \"TBOL\",\n    \"accountHolderName\": \"Ryan Doe\",\n    \"accountId\": \"GB-040075-12345678\",\n    \"sortCode\": \"123456\",\n    \"accountNumber\": \"12345678\"\n  },\n  \"recipient\": {\n    \"type\": \"TBOL\",\n    \"accountHolderName\": \"John Doe\",\n    \"accountId\": \"GB-040075-12345678\",\n    \"sortCode\": \"123456\",\n    \"accountNumber\": \"12345678\"\n  },\n  \"isCredit\": \"false\",\n  \"reference\": \"Invoice 12345\",\n  \"notes\": \"My first transaction\",\n  \"amount\": {\n    \"currency\": \"GBP\",\n    \"value\": 4320.5\n  },\n  \"postingDate\": \"2022-10-07\",\n  \"releaseDateTime\": \"2022-10-07T08:55:33.213Z\",\n  \"valueDate\": \"2022-10-07\",\n  \"createdDateTime\": \"2022-10-07T08:55:33.213Z\",\n  \"account\": {\n    \"currency\": \"GBP\",\n    \"balance\": 5000\n  },\n  \"status\": {\n    \"identifier\": \"SUCCESSFUL\"\n  },\n  \"paymentOrderId\": \"S4B1  20240510000000065638\"\n}\n```",
        "parameters": [
          {
            "$ref": "#/components/parameters/JwsSignature"
          },
          {
            "in": "path",
            "name": "transactionId",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TransactionId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success\n\n<span style=\"color:#f46d2a; font-size:14px; font-family:Inter;\">**Attention**</span> \\\n<span style=\"font-size:14px; font-family:Inter;\">Please note that the oneOf in the **body** below, is extensible and new objects can be \nreturned with a new transaction **types**\nin the future without a major version change. Please ensure this is factored into your\napplication code.</span>\n",
            "headers": {
              "x-correlation-id": {
                "description": "A unique identifier assigned to each request, facilitating issue tracing. In the event that a problem arises with a request, this ID can be provided to The Bank of London support team for assistance.",
                "schema": {
                  "type": "string"
                },
                "example": "2579248247516384065",
                "required": true
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/PaymentTransaction1"
                    },
                    {
                      "$ref": "#/components/schemas/FeeInterestTransaction"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "tags": ["Transactions"]
      }
    },
    "/v2/transactions/download/csv": {
      "get": {
        "deprecated": true,
        "operationId": "DownloadTransactionsCsv",
        "summary": "Download Transactions CSV",
        "description": "<span style=\"color:#f46d2a; font-size:14px; font-family:Inter;\">**Attention**</span> \\\n    <span style=\"font-size:14px; font-family:Inter;\">This endpoint is deprecated. \nPlease refer to the `/transaction-export` endpoints.</span>\n\nThe ability to download transactions in CSV format. In order to utilize this feature, you must include the \nmandatory query parameter `accountId` when making a request. Additionally, there are optional query parameters\navailable, including `transactionType`, `fromDate`, `toDate`, `orderBy`, `search`, `isCredit` and `fields`.\nwhich can be specified to filter the returned data. Upon successful request, the API will respond with \nCSV data containing columns such as `Account sort code`, `Account number`, `TBOL product type`, \n`Account nickname`, `Date`, `Time`, `Debtor/Beneficiary`, `Transaction reference`, `Transaction type`, \n`Amount`, `Current balance` and `Currency`. \n\n### Example request:\n\n```\nGET /transactions/download/csv?accountId=GB-040075-12345678&fromDate=2020-10-10&toDate=2020-10-12\n```\n\n### Example for filtering by type:\n```\nGET /transactions/download/csv?accountId=GB-040075-12345678&fromDate=2020-10-10&toDate=2020-10-12&transactionType=INTERNAL_DEBIT_THIRD_PARTY\n```\n\nThe API will respond with a CSV file containing all the details of the resulting transactions.\n\n### Example response:\n```CSV\nAccount sort code, Account number, TBOL product type, Account nickname, Date, Time, Debtor/Beneficiary, Transaction reference, Transaction type, Amount, Current balance, Currency\n043030, 00000000, Business Advantage Bank Account, Business transactions, 26/01/2024, 09:12:55, John Smith, Invoice 12345, Faster Payment, -200, 4800, GBP\n```",
        "parameters": [
          {
            "$ref": "#/components/parameters/JwsSignature"
          },
          {
            "in": "query",
            "name": "accountId",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountId"
            }
          },
          {
            "in": "query",
            "name": "transactionType",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/TransactionType"
            }
          },
          {
            "in": "query",
            "name": "fromDate",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/TransactionFromDate"
            }
          },
          {
            "in": "query",
            "name": "toDate",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/TransactionToDate"
            }
          },
          {
            "in": "query",
            "name": "orderBy",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/TransactionOrderBy"
            }
          },
          {
            "in": "query",
            "name": "search",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/TransactionSearch"
            }
          },
          {
            "in": "query",
            "name": "isCredit",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/TransactionIsCreditQueryParam"
            }
          },
          {
            "in": "query",
            "name": "fields",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/TransactionFields"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "CSV file with transactions",
            "headers": {
              "x-correlation-id": {
                "description": "A unique identifier assigned to each request, facilitating issue tracing. In the event that a problem arises with a request, this ID can be provided to The Bank of London support team for assistance.",
                "schema": {
                  "type": "string"
                },
                "example": "2579248247516384065",
                "required": true
              }
            },
            "content": {
              "text/csv": {
                "schema": {
                  "type": "string",
                  "format": "binary",
                  "example": "Account sort code, Account number, TBOL product type, Account nickname, Date, Time, Debtor/Beneficiary, Transaction reference, Transaction type, Amount, Current balance, Currency\n043030, 00000000, Business Advantage Bank Account, Business transactions, 26/01/2024, 09:12:55, John Smith, Invoice 12345, Faster Payment, -200, 4800, GBP\n"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "tags": ["Transactions"]
      }
    },
    "/v2/transactions/download/pdf": {
      "get": {
        "deprecated": true,
        "operationId": "DownloadTransactionsPdf",
        "summary": "Download Transactions PDF",
        "description": "<span style=\"color:#f46d2a; font-size:14px; font-family:Inter;\">**Attention**</span> \\\n    <span style=\"font-size:14px; font-family:Inter;\">This endpoint is deprecated. \nPlease refer to the `/transaction-export` endpoints.</span>\n\nThe ability to download transactions in PDF format. In order to utilize this feature, you must include the \nmandatory query parameter `accountId` when making a request. Additionally, there are optional query parameters\navailable, including `transactionType`, `fromDate`, `toDate`, `orderBy`, `search`, `isCredit` and `fields`.\nwhich can be specified to filter the returned data. Upon successful request, the API will respond with \nPDF data containing columns such as `Account sort code`, `Account number`, `TBOL product type`, \n`Account nickname`, `Date`, `Time`, `Debtor/Beneficiary`, `Transaction reference`, `Transaction type`, \n`Amount`, `Current balance` and `Currency`. \n\n### Example request:\n\n```\nGET /transactions/download/pdf?accountId=GB-040075-12345678&fromDate=2020-10-10&toDate=2020-10-12\n```\n\n### Example for filtering by type:\n```\nGET /transactions/download/pdf?accountId=GB-040075-12345678&fromDate=2020-10-10&toDate=2020-10-12&transactionType=INTERNAL_DEBIT_THIRD_PARTY\n```\n\nThe API will respond with a PDF file containing all the details of the resulting transactions.",
        "parameters": [
          {
            "$ref": "#/components/parameters/JwsSignature"
          },
          {
            "in": "query",
            "name": "accountId",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountId"
            }
          },
          {
            "in": "query",
            "name": "transactionType",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/TransactionType"
            }
          },
          {
            "in": "query",
            "name": "fromDate",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/TransactionFromDate"
            }
          },
          {
            "in": "query",
            "name": "toDate",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/TransactionToDate"
            }
          },
          {
            "in": "query",
            "name": "orderBy",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/TransactionOrderBy"
            }
          },
          {
            "in": "query",
            "name": "search",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/TransactionSearch"
            }
          },
          {
            "in": "query",
            "name": "isCredit",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/TransactionIsCreditQueryParam"
            }
          },
          {
            "in": "query",
            "name": "fields",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/TransactionFields"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "PDF file with transactions",
            "headers": {
              "x-correlation-id": {
                "description": "A unique identifier assigned to each request, facilitating issue tracing. In the event that a problem arises with a request, this ID can be provided to The Bank of London support team for assistance.",
                "schema": {
                  "type": "string"
                },
                "example": "2579248247516384065",
                "required": true
              }
            },
            "content": {
              "application/pdf": {
                "schema": {
                  "type": "string",
                  "format": "binary",
                  "example": "Account sort code, Account number, TBOL product type, Account nickname, Date, Time, Debtor/Beneficiary, Transaction reference, Transaction type, Amount, Current balance, Currency\n043030, 00000000, Business Advantage Bank Account, Business transactions, 26/01/2024, 09:12:55, John Smith, Invoice 12345, Faster Payment, -200, 4800, GBP\n"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "tags": ["Transactions"]
      }
    },
    "/v2/transaction-export/{transactionExportId}": {
      "get": {
        "operationId": "GetTransactionExport",
        "summary": "Get Transaction Export",
        "description": "This operation retrieves the transaction export record containing `id`, `createdDateTime`, `accountId`, `status` and optional \n`downloadUrl` properties. `downloadUrl` is only returned if the status of the transaction export is `COMPLETED`.\n  \n### Example request:\n  \n```\nGET /transaction-export/bDBqW5smsJPNpoI8u0zy2\n```\n  \nThe API will respond with all the details of the transaction export.\n  \n### Example response (for `COMPLETED` status):\n```JSON\n{\n  \"id\": \"bDBqW5smsJPNpoI8u0zy2\",\n  \"createdDateTime\": \"2024-07-30T08:30:00Z\",\n  \"accountId\": \"GB-000000-00000000\",\n  \"status\": \"COMPLETED\",\n  \"fromDate\": \"2024-06-30\",\n  \"toDate\": \"2025-07-01\",\n  \"fileFormat\": \"CSV\",\n  \"isCredit\": true,\n  \"fields\": [\n    \"TransactionID\",\n    \"AccountHolderName\",\n    \"AccountNickname\",\n    \"AccountNumber\",\n    \"AccountSortCode\",\n    \"Amount\",\n    \"Balance\",\n    \"Currency\",\n    \"Date\",\n    \"ProductType\",\n    \"Reference\",\n    \"Time\",\n    \"Type\",\n  ],\n  \"downloadUrl\": \"https://export-download-url.com\"\n}\n```\n  \n### Example response (for `REQUESTED`/`FAILED` statuses):\n```JSON\n{         \n  \"id\": \"bDBqW5smsJPNpoI8u0zy2\",\n  \"createdDateTime\": \"2024-07-30T08:30:00Z\",\n  \"accountId\": \"GB-000000-00000000\",\n  \"status\": \"REQUESTED\", // or \"FAILED\"\n  \"fromDate\": \"2024-06-30\",\n  \"toDate\": \"2025-07-01\",\n  \"fileFormat\": \"CSV\",\n  \"isCredit\": true,\n  \"fields\": [\n    \"TransactionID\",\n    \"AccountHolderName\",\n    \"AccountNickname\",\n    \"AccountNumber\",\n    \"AccountSortCode\",\n    \"Amount\",\n    \"Balance\",\n    \"Currency\",\n    \"Date\",\n    \"ProductType\",\n    \"Reference\",\n    \"Time\",\n    \"Type\",\n  ],\n}\n```\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/JwsSignature"
          },
          {
            "in": "path",
            "name": "transactionExportId",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TransactionExportId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Transaction export",
            "headers": {
              "x-correlation-id": {
                "description": "A unique identifier assigned to each request, facilitating issue tracing. In the event that a problem arises with a request, this ID can be provided to The Bank of London support team for assistance.",
                "schema": {
                  "type": "string"
                },
                "example": "2579248247516384065",
                "required": true
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionExport"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "tags": ["Transactions"]
      }
    },
    "/v2/transaction-export": {
      "get": {
        "operationId": "GetTransactionExportsByAccountId",
        "summary": "Get Transaction Exports",
        "description": "This operation retrieves a paginated list of transaction export records for specified account. \nNote: `downloadUrl` is only returned via `GET v2/transaction-export/{export-id}`\n\n### Example request:\n```\nGET /transaction-export?accountId=GB-000000-00000000\n```\n\nThe API will respond with a paginated list of transaction exports for a specified account ID.\n\n### Example response:\n```JSON\n{\n  \"metadata\": {\n    \"totalRecords\": 2,\n    \"pageSize\": 20,\n    \"page\": 1\n  },\n  \"transactionExports\": [\n    {\n      \"id\": \"bDBqW5smsJPNpoI8u0zy2\",\n      \"createdDateTime\": \"2024-07-30T08:30:00Z\",\n      \"accountId\": \"GB-000000-00000000\",\n      \"status\": \"COMPLETED\",\n      \"fileFormat\": \"PDF\",\n      \"fromDate\": \"2024-05-19\",\n      \"toDate\": \"2024-07-04\",\n      \"fields\": [\n        \"AccountNickname\",\n        \"AccountNumber\",\n        \"Amount\",\n        \"Balance\",\n        \"Date\",\n        \"Reference\",\n        \"Time\",\n        \"Type\",\n      ]\n    },\n    {\n      \"id\": \"fQ_GyyeVG3kBH4OEqOpAz\",\n      \"createdDateTime\": \"2024-07-30T08:30:00Z\",\n      \"accountId\": \"GB-000000-00000000\",\n      \"status\": \"REQUESTED\",\n      \"fileFormat\": \"CSV\",\n      \"fromDate\": \"2024-05-19\",\n      \"toDate\": \"2024-07-04\",\n      \"fields\": [\n        \"AccountHolderName\",\n        \"AccountNickname\",\n        \"AccountNumber\",\n        \"AccountSortCode\",\n        \"Amount\",\n        \"Balance\",\n        \"Currency\",\n        \"Date\",\n        \"ProductType\",\n        \"Reference\",\n        \"Time\",\n        \"Type\",\n        \"TransactionID\"\n      ],\n    }\n  ]\n}\n```\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/JwsSignature"
          },
          {
            "in": "query",
            "name": "accountId",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountId"
            }
          },
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          }
        ],
        "responses": {
          "200": {
            "description": "Success\n",
            "headers": {
              "x-correlation-id": {
                "description": "A unique identifier assigned to each request, facilitating issue tracing. In the event that a problem arises with a request, this ID can be provided to The Bank of London support team for assistance.",
                "schema": {
                  "type": "string"
                },
                "example": "2579248247516384065",
                "required": true
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "transactionExports": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/TransactionExportWithoutDownloadUrl"
                      }
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/MetaData"
                    }
                  },
                  "required": ["transactionExports", "metadata"]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "tags": ["Transactions"]
      },
      "post": {
        "operationId": "InitiateTransactionExport",
        "summary": "Initiate Transaction Export",
        "description": "This operation initiates an asynchronous transaction export generation process. \nReturns a record of the transaction export, containing `id`, `createdDateTime`, `accountId` and `status` properties.\n\nOnce transaction export generation is complete, user will be notified via web-hook and the resulting export file will be available for download. The download url will be found by calling\n`GET v2/transaction-export/{export-id}`\n\n### Example request:\n```\nPOST /transaction-export\n```\n\n### Example request body:\n\n```JSON\n{\n  \"accountId\":\"GB-000000-00000000\",\n  \"fromDate\":\"2024-06-30\",\n  \"fileFormat\":\"CSV\",\n  \"toDate\":\"2025-07-01\",\n  \"isCredit\": true,\n  \"fields\": [\n    \"TransactionID\",\n    \"AccountSortCode\",\n    \"AccountNumber\",\n    \"ProductType\",\n    \"AccountNickname\",\n    \"Date\",\n    \"Time\",\n    \"AccountHolderName\",\n    \"Reference\",\n    \"Type\",\n    \"Amount\",\n    \"Balance\",\n    \"Currency\"\n  ]\n}\n```\n\n### Example response:\n```JSON\n{\n  \"id\": \"bDBqW5smsJPNpoI8u0zy2\",\n  \"createdDateTime\": \"2024-07-30T08:30:00Z\",\n  \"accountId\": \"GB-000000-00000000\",\n  \"status\": \"REQUESTED\",\n  \"fromDate\": \"2024-06-30\", \n  \"fileFormat\": \"CSV\", \n  \"toDate\": \"2025-07-01\", \n  \"isCredit\": true, \n  \"fields\": [ \n    \"AccountSortCode\",\n    \"AccountNumber\",\n    \"ProductType\",\n    \"AccountNickname\",\n    \"Date\",\n    \"Time\",\n    \"AccountHolderName\",\n    \"Reference\",\n    \"Type\",\n    \"TransactionID\",\n    \"Amount\",\n    \"Balance\",\n    \"Currency\"\n  ]\n}\n```\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/JwsSignature"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InitiateTransactionExportBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Transaction export initiated",
            "headers": {
              "x-correlation-id": {
                "description": "A unique identifier assigned to each request, facilitating issue tracing. In the event that a problem arises with a request, this ID can be provided to The Bank of London support team for assistance.",
                "schema": {
                  "type": "string"
                },
                "example": "2579248247516384065",
                "required": true
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InitiateTransactionExportResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "tags": ["Transactions"]
      }
    },
    "/v2/mandates": {
      "get": {
        "operationId": "GetMandates",
        "summary": "Get Mandates",
        "description": "This operation allows you to retrieve a list of mandates (aka Direct Debits) along with the mandate ID\n(`id`) to be able to retrieve a specific mandate later via `GET\n/mandates/{mandateId}`.\n\nIt must be filtered by The Bank of London account ID (`accountId`) to\nretrieve only mandates (aka Direct Debits) for a specific account. \n\n### Example request:\n\n```\nGET /mandates?accountId=GB-040075-12345678\n```\n\nThe API will respond with an array of objects that contain all the details of the resulting mandates.\n\n### Example response:\n```JSON\n{\n  \"records\": [\n    {\n      \"id\": \"GB-043030-01117536GB86ZZZ176771MAND001\",\n      \"type\": \"BACS_DIRECT_DEBIT_MANDATE\",\n      \"scheme\": \"BACS\",\n      \"reference\": \"MAND001\",\n      \"sender\": {\n          \"type\": \"TBOL\",\n          \"accountId\": \"GB-043030-01117536\"\n          \"sortCode\": \"043030\",\n          \"accountNumber\": \"01117536\"\n      },\n      \"recipient\": {\n          \"type\": \"UK\",\n          \"accountHolderName\": \"TEST COMPANY LTD\"\n      },\n      \"lastAmountPaid\": {\n          \"currency\": \"GBP\",\n          \"value\": 4320\n      },\n      \"status\": {\n          \"identifier\": \"CANCELLED\"\n      },\n      \"cancellation\": {\n          \"reasonCode\": \"1_BACS_CANCELLED_BY_PAYER\",\n          \"canCancel\": false\n      }\n    },\n    {...}\n  ],\n  \"metadata\": {\n    \"totalRecords\": 2,\n    \"pageSize\": 20,\n    \"page\": 1\n  },\n}\n```\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/JwsSignature"
          },
          {
            "in": "query",
            "name": "accountId",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountId"
            }
          },
          {
            "in": "query",
            "name": "status",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The status of the mandate",
              "enum": ["ACTIVE", "LOCKED", "TO_BE_CONFIRMED", "CANCELLED", "UNKNOWN"],
              "example": "ACTIVE"
            }
          },
          {
            "in": "query",
            "name": "reference",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/MandateReference"
            }
          },
          {
            "in": "query",
            "name": "lastAmountPaid",
            "required": false,
            "schema": {
              "type": "number",
              "format": "double",
              "example": 5000
            }
          },
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          }
        ],
        "responses": {
          "200": {
            "description": "Success\n",
            "headers": {
              "x-correlation-id": {
                "description": "A unique identifier assigned to each request, facilitating issue tracing. In the event that a problem arises with a request, this ID can be provided to The Bank of London support team for assistance.",
                "schema": {
                  "type": "string"
                },
                "example": "2579248247516384065",
                "required": true
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "records": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Mandate"
                      }
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/MetaData"
                    }
                  },
                  "required": ["records", "metadata"]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/AccountIdError"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/BankAccountNotFoundError"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "tags": ["Mandates (Direct Debits)"]
      }
    },
    "/v2/mandates/{mandateId}": {
      "get": {
        "operationId": "GetMandate",
        "summary": "Get Mandate",
        "description": "This operation retrieves a single mandate (aka Direct Debit) by it's ID `mandateId`\n\n### Example request:\n\n```\nGET /mandates/GB-043030-01117536GB86ZZZ176771MAND001\n```\n\nThe API will respond with all the details of the mandate.\n\n### Example response:\n```JSON\n{\n  \"id\": \"GB-043030-01117536GB86ZZZ176771MAND001\",\n  \"type\": \"BACS_DIRECT_DEBIT_MANDATE\",\n  \"scheme\": \"BACS\",\n  \"reference\": \"MAND001\",\n  \"sender\": {\n      \"type\": \"TBOL\",\n      \"accountId\": \"GB-043030-01117536\"\n      \"sortCode\": \"043030\",\n      \"accountNumber\": \"01117536\"\n  },\n  \"recipient\": {\n      \"type\": \"UK\",\n      \"accountHolderName\": \"TEST COMPANY LTD\"\n  },\n  \"lastAmountPaid\": {\n      \"currency\": \"GBP\",\n      \"value\": 4320\n  },\n  \"status\": {\n      \"identifier\": \"CANCELLED\"\n  },\n  \"cancellation\": {\n      \"reasonCode\": \"1_BACS_CANCELLED_BY_PAYER\",\n      \"canCancel\": false\n  }\n}\n```\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/JwsSignature"
          },
          {
            "in": "path",
            "name": "mandateId",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/MandateId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success\n",
            "headers": {
              "x-correlation-id": {
                "description": "A unique identifier assigned to each request, facilitating issue tracing. In the event that a problem arises with a request, this ID can be provided to The Bank of London support team for assistance.",
                "schema": {
                  "type": "string"
                },
                "example": "2579248247516384065",
                "required": true
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mandate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/MandateNotFoundError"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "tags": ["Mandates (Direct Debits)"]
      }
    },
    "/v2/mandates/{mandateId}/cancel": {
      "post": {
        "operationId": "CancelMandate",
        "summary": "Cancel Mandate",
        "description": "This operation cancels a mandate by the ID `mandateId`.\n\n### Example request:\n\n```\nPOST /mandates/GB-043030-01117536GB86ZZZ176771MAND001/cancel\n```\n\n### Example Request Body:\n\n```JSON\n{\n  \"reasonCode\": \"1_BACS_CANCELLED_BY_PAYER\"\n}\n```\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/JwsSignature"
          },
          {
            "in": "path",
            "name": "mandateId",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/MandateId"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MandateCancel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Mandate successfully cancelled\n",
            "headers": {
              "x-correlation-id": {
                "description": "A unique identifier assigned to each request, facilitating issue tracing. In the event that a problem arises with a request, this ID can be provided to The Bank of London support team for assistance.",
                "schema": {
                  "type": "string"
                },
                "example": "2579248247516384065",
                "required": true
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/MandateNotFoundError"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "tags": ["Mandates (Direct Debits)"]
      }
    },
    "/v2/statements": {
      "get": {
        "operationId": "GetStatements",
        "summary": "Get Statements",
        "description": "The API retrieves a list of statements along with the statement ID\nto be able to download a specific statement later via `GET /statements/{statementID}/download`.\n\nIt can be filtered by the `accountId`, `startDate` and `endDate` to narrow down the result\nset.\n\n### Example request:\n\n```Filter&nbsp;by&nbsp;accountId\nGET /statements?accountId=GB-040075-12345678\n```\n\n```Filter&nbsp;by&nbsp;date&nbsp;range\nGET /statements?startDate=2024-02-01&endDate=2024-02-29\n```\n\nThe API will respond with an array of objects that contain all the details of the resulting statements.\n\n### Example response:\n```JSON\n{\n  \"statements\": [\n    {\n      \"id\": \"0022484107DB1EED9D85FA3B8119427D001\",\n      \"name\": \"14367501-february-2024-bank-statement\",\n      \"startDate\": \"2024-02-01\",\n      \"endDate\": \"2024-02-29\",\n      \"accountId\": \"GB-040075-12345678\",\n      \"accountNickname\": \"FTD\",\n      \"accountType\": \"FIXED_TERM_DEPOSIT\",\n      \"accountStatus\": {\n        \"identifier\": \"ACTIVE\"\n      }\n    },\n    {...}\n  ],\n  \"metadata\": {\n    \"totalRecords\": 2,\n    \"pageSize\": 20,\n    \"page\": 1\n  },\n}\n```",
        "parameters": [
          {
            "$ref": "#/components/parameters/JwsSignature"
          },
          {
            "in": "query",
            "name": "accountId",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/AccountId"
            }
          },
          {
            "$ref": "#/components/parameters/StatementStartDateQueryParam"
          },
          {
            "$ref": "#/components/parameters/StatementEndDateQueryParam"
          },
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "x-correlation-id": {
                "description": "A unique identifier assigned to each request, facilitating issue tracing. In the event that a problem arises with a request, this ID can be provided to The Bank of London support team for assistance.",
                "schema": {
                  "type": "string"
                },
                "example": "2579248247516384065",
                "required": true
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statements": {
                      "items": {
                        "$ref": "#/components/schemas/Statement"
                      },
                      "type": "array"
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/MetaData"
                    }
                  },
                  "required": ["statements", "metadata"]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "tags": ["Statements"]
      }
    },
    "/v2/statements/{statementId}/download": {
      "get": {
        "operationId": "DownloadStatements",
        "summary": "Download Statements",
        "description": "The ability to download statements. Upon successful request, the API will respond with \na pdf file.\n\n### Example request:\n\n```\nGET /statements/{statementId}/download\n```",
        "parameters": [
          {
            "$ref": "#/components/parameters/JwsSignature"
          },
          {
            "in": "path",
            "name": "statementId",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/StatementId"
            }
          },
          {
            "in": "query",
            "name": "accountId",
            "required": false,
            "description": "The Bank of London account ID identifies the account within the The Bank of London API. This field is considered a unique ID and cannot be constructed using the account number and sort code. As such it must only be provided with `accountId` values returned by The Bank of London Account API. This property must be provided when fetching a statement for another customer e.g. a statement belonging to an individual that is linked to your organisation. ",
            "schema": {
              "$ref": "#/components/schemas/AccountId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "PDF file with the statement information",
            "headers": {
              "x-correlation-id": {
                "description": "A unique identifier assigned to each request, facilitating issue tracing. In the event that a problem arises with a request, this ID can be provided to The Bank of London support team for assistance.",
                "schema": {
                  "type": "string"
                },
                "example": "2579248247516384065",
                "required": true
              }
            },
            "content": {
              "application/pdf": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "tags": ["Statements"]
      }
    },
    "/v2/webhooks": {
      "post": {
        "operationId": "CreateWebhook",
        "summary": "Create Webhook",
        "description": "This operation allows you to configure Webhooks, enabling you to receive notifications about various events related to your payments or transactions.\n\nThe response includes the public key of the webhook. The public key is used to verify the signature of the webhook events.\n\nFor more details on our webhook solution, please read [our webhooks guide](https://developer.thebankoflondon.com/docs/guides/manage-webhooks-guide).\n\n### Example request:\n\n```JSON\n{\n  \"name\": \"My Webhook\",\n  \"url\": \"https://www.your-webhook-handling-url.com/api/payment-event-callback\",\n  \"events\": [\n    \"TRANSACTION_SUCCESSFUL\"\n  ],\n  \"version\": 2\n}\n```\n\n### Example response:\n\n```json\n{\n  \"id\": \"QF6T5cuAyRE3BnHFHWD0z\",\n  \"name\": \"My Webhook\",\n  \"url\": \"https://www.your-webhook-handling-url.com/api/payment-event-callback\",\n  \"events\": [\n    \"TRANSACTION_SUCCESSFUL\"\n  ],\n  \"version\": 2,\n  \"enabled\": true,\n  \"publicKey\": \"-----BEGIN PUBLIC KEY-----\\nMvQI...SjAgEA-----END PUBLIC KEY-----\",\n  \"createdDate\": \"2020-01-01T00:00:00.000Z\"\n}\n```",
        "parameters": [
          {
            "$ref": "#/components/parameters/JwsSignature"
          }
        ],
        "requestBody": {
          "description": "The object containing data about the Webhook.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "name": {
                    "$ref": "#/components/schemas/WebhookName"
                  },
                  "url": {
                    "$ref": "#/components/schemas/Url"
                  },
                  "events": {
                    "type": "array",
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "<span style=\"color:#f46d2a\">**Attention**</span> \\\nPlease note that the allowed values for the **events** are\nextensible and new values can be added in the future without a\nmajor version change. Please ensure this is factored into your\napplication code.\n\nThe type of event. \\\n`PAYMENT_PENDING` - payment has been created and is `PENDING` or `SCHEDULED`. \\\n`PAYMENT_SUCCESSFUL` - payment has become `SUCCESSFUL`. \\\n`PAYMENT_FAILED` - payment has been updated with a status of `REJECTED` or `FAILED`. \\\n`TRANSACTION_SUCCESSFUL` - transaction has been created and successfully settled. \\\n`TRANSACTION_EXPORT_SUCCESSFUL` - transaction export has completed successfully. \\\n`TRANSACTION_EXPORT_FAILED` - transaction export has failed.\n",
                    "items": {
                      "$ref": "#/components/schemas/WebhookEvent"
                    }
                  },
                  "version": {
                    "$ref": "#/components/schemas/WebhookVersion"
                  }
                },
                "required": ["name", "url", "events", "version"]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "x-correlation-id": {
                "description": "A unique identifier assigned to each request, facilitating issue tracing. In the event that a problem arises with a request, this ID can be provided to The Bank of London support team for assistance.",
                "schema": {
                  "type": "string"
                },
                "example": "2579248247516384065",
                "required": true
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Webhook"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "tags": ["Webhook Management"]
      },
      "get": {
        "operationId": "GetWebhooks",
        "summary": "Get Webhooks",
        "description": "Retrieves the list of webhooks that are associated with the consumer application.\n\nFor more details on our webhook solution, please read [our webhooks guide](https://developer.thebankoflondon.com/docs/guides/manage-webhooks-guide).\n\n### Example request:\n\n```\nGET /webhooks\n```\n\n### Example response:\n```JSON\n{\n  \"webhooks\": [\n    {\n      \"id\": \"QF6T5cuAyRE3BnHFHWD0z\",\n      \"name\": \"My Webhook\",\n      \"url\": \"https://www.your-webhook-handling-url.com/api/payment-event-callback\",\n      \"events\": [\n        \"TRANSACTION_SUCCESSFUL\"\n      ],\n      \"version\": 2,\n      \"enabled\": true,\n      \"publicKey\": \"-----BEGIN PUBLIC KEY-----\\nMvQI...SjAgEA-----END PUBLIC KEY-----\",\n      \"createdDate\": \"2020-01-01T00:00:00.000Z\"\n    },\n    {...}\n  ],\n  \"metadata\": {\n    \"totalRecords\": 15,\n    \"pageSize\": 20,\n    \"page\": 1\n  },\n}\n```",
        "parameters": [
          {
            "$ref": "#/components/parameters/JwsSignature"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "x-correlation-id": {
                "description": "A unique identifier assigned to each request, facilitating issue tracing. In the event that a problem arises with a request, this ID can be provided to The Bank of London support team for assistance.",
                "schema": {
                  "type": "string"
                },
                "example": "2579248247516384065",
                "required": true
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "webhooks": {
                      "type": "array",
                      "uniqueItems": true,
                      "items": {
                        "$ref": "#/components/schemas/Webhook"
                      }
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/MetaData"
                    }
                  },
                  "required": ["webhooks", "metadata"]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "tags": ["Webhook Management"]
      }
    },
    "/v2/webhooks/{id}": {
      "patch": {
        "operationId": "PatchWebhook",
        "summary": "Update Webhook",
        "description": "This operation allows you to update an existing webhook.\n\nFor more details on our webhook solution, please read [our webhooks guide](https://developer.thebankoflondon.com/docs/guides/manage-webhooks-guide).\n\n### Example request:\n\n```JSON\n{\n  \"events\": [\n    \"TRANSACTION_SUCCESSFUL\"\n  ]\n}\n```\n\n### Example response:\n\nReturns the updated webhook if the provided `id` is valid. Otherwise, a response with a 404 status code is returned..\n\n\n```JSON\n{\n  \"id\": \"QF6T5cuAyRE3BnHFHWD0z\",\n  \"name\": \"My Webhook\",\n  \"url\": \"https://www.your-webhook-handling-url.com/api/payment-event-callback\",\n  \"events\": [\n    \"TRANSACTION_SUCCESSFUL\"\n  ],\n  \"version\": 2,\n  \"enabled\": true,\n  \"publicKey\": \"-----BEGIN PUBLIC KEY-----\\nMvQI...SjAgEA-----END PUBLIC KEY-----\",\n  \"createdDate\": \"2020-01-01T00:00:00.000Z\"\n}\n```",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/WebhookId"
            }
          },
          {
            "$ref": "#/components/parameters/JwsSignature"
          }
        ],
        "requestBody": {
          "description": "The object containing data about the Webhook.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "name": {
                    "$ref": "#/components/schemas/NullableWebhookName"
                  },
                  "url": {
                    "$ref": "#/components/schemas/NullableUrl"
                  },
                  "events": {
                    "allOf": [
                      {
                        "type": "array",
                        "nullable": true,
                        "minItems": 1,
                        "uniqueItems": true,
                        "items": {
                          "$ref": "#/components/schemas/WebhookEvent"
                        },
                        "example": ["TRANSACTION_SUCCESSFUL"]
                      },
                      {
                        "description": "The type of event. \\\n`PAYMENT_PENDING` - payment has been created and is `PENDING` or `SCHEDULED`. \\\n`PAYMENT_SUCCESSFUL` - payment has become `SUCCESSFUL`. \\\n`PAYMENT_FAILED` - payment has been updated with a status of `REJECTED` or `FAILED`. \\\n`TRANSACTION_SUCCESSFUL` - transaction has been created and successfully settled. \\\n`TRANSACTION_EXPORT_SUCCESSFUL` - transaction export has completed successfully. \\\n`TRANSACTION_EXPORT_FAILED` - transaction export has failed.\n"
                      }
                    ]
                  },
                  "version": {
                    "$ref": "#/components/schemas/NullableWebhookVersion"
                  },
                  "enabled": {
                    "$ref": "#/components/schemas/NullableWebhookEnabledStatus"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "x-correlation-id": {
                "description": "A unique identifier assigned to each request, facilitating issue tracing. In the event that a problem arises with a request, this ID can be provided to The Bank of London support team for assistance.",
                "schema": {
                  "type": "string"
                },
                "example": "2579248247516384065",
                "required": true
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Webhook"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "tags": ["Webhook Management"]
      },
      "delete": {
        "operationId": "DeleteWebhook",
        "summary": "Delete Webhook",
        "description": "This operation allows you to delete a webhook.\n\nReturns an empty response if the provided `id` is valid. Otherwise, a response with a 404 status code is returned.\n\nFor more details on our webhook solution, please read [our webhooks guide](https://developer.thebankoflondon.com/docs/guides/manage-webhooks-guide).\n\n### Example request:\n\n```\nDELETE /webhooks/RBf1q02PaupHGtVFcLm_S\n```",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/WebhookId"
            }
          },
          {
            "$ref": "#/components/parameters/JwsSignature"
          }
        ],
        "responses": {
          "204": {
            "description": "Success",
            "headers": {
              "x-correlation-id": {
                "description": "A unique identifier assigned to each request, facilitating issue tracing. In the event that a problem arises with a request, this ID can be provided to The Bank of London support team for assistance.",
                "schema": {
                  "type": "string"
                },
                "example": "2579248247516384065",
                "required": true
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "tags": ["Webhook Management"]
      }
    },
    "/v2/webhooks/{id}/create-test-event": {
      "post": {
        "operationId": "CreateTestEvent",
        "summary": "Create Webhook Test Event",
        "description": "This operation allows you to create a test event for a webhook.\n\nReturns an empty response if the provided `id` is valid. Otherwise, a response with a 404 status code is returned.\n\nIf the webhook is not enabled, a response with a 400 status code is returned.\n\nIf the request to the webhook fails, an email will be sent to all users of the consumer application with the Webhook Degradation contact preference enabled.\n\nFor more details on our webhook solution, please read [our webhooks guide](https://developer.thebankoflondon.com/docs/guides/manage-webhooks-guide).\n\n### Example request:\n\n```\nPOST /webhooks/RBf1q02PaupHGtVFcLm_S/create-test-event\n```",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/WebhookId"
            }
          },
          {
            "$ref": "#/components/parameters/JwsSignature"
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "headers": {
              "x-correlation-id": {
                "description": "A unique identifier assigned to each request, facilitating issue tracing. In the event that a problem arises with a request, this ID can be provided to The Bank of London support team for assistance.",
                "schema": {
                  "type": "string"
                },
                "example": "2579248247516384065",
                "required": true
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "tags": ["Webhook Management"]
      }
    },
    "/v2/webhooks/{id}/regenerate-key": {
      "post": {
        "operationId": "RegenerateWebhookKey",
        "summary": "Regenerate Webhook Key",
        "description": "This operation allows you to regenerate the key for an existing webhook.\n\nReturns a new public key if the provided webhook `id` is valid. Otherwise, a response with a 404 status code is returned.\n\nFor more details on our webhook solution, please read [our webhooks guide](https://developer.thebankoflondon.com/docs/guides/manage-webhooks-guide).\n\n### Example request:\n\n```\nPOST /webhooks/RBf1q02PaupHGtVFcLm_S/regenerate-key\n```\n\n### Example response:\n\n```json\n{\n  \"id\": \"RBf1q02PaupHGtVFcLm_S\",\n  \"publicKey\": \"-----BEGIN PUBLIC KEY-----\\nMvQI...SjAgEA-----END PUBLIC KEY-----\"\n}\n```",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/WebhookId"
            }
          },
          {
            "$ref": "#/components/parameters/JwsSignature"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "x-correlation-id": {
                "description": "A unique identifier assigned to each request, facilitating issue tracing. In the event that a problem arises with a request, this ID can be provided to The Bank of London support team for assistance.",
                "schema": {
                  "type": "string"
                },
                "example": "2579248247516384065",
                "required": true
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegenerateWebhookKeyResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "tags": ["Webhook Management"]
      }
    }
  },
  "components": {
    "schemas": {
      "AccountType": {
        "type": "string",
        "description": "<span style=\"color:#f46d2a\">**Attention**</span> \\\nPlease note that the allowed values for the **type** are\nextensible and new can be added in the future without a\nmajor version change. Please ensure this is factored into your\napplication code.\n",
        "enum": [
          "CCA",
          "EASY_ACCESS_DEPOSIT",
          "FIXED_TERM_DEPOSIT",
          "INSTANT_ACCESS_DEPOSIT",
          "NOTICE_DEPOSIT",
          "OPERATING",
          "SEGREGATED",
          "BAAS_PHYSICAL_ACCOUNT"
        ]
      },
      "AccountOwnership": {
        "type": "string",
        "enum": ["DIRECT", "INDIRECT", "ALL"],
        "description": "Controls whether to return directly linked or customers' physical accounts, or both. \\\n`DIRECT` - returns directly linked physical accounts (DEFAULT). \\\n`INDIRECT` - returns customers' physical accounts. \\\n`ALL` - combines both of the above.\n",
        "example": "DIRECT",
        "default": "DIRECT"
      },
      "AccountStatusFilter": {
        "type": "string",
        "enum": ["ACTIVE", "CLOSED", "ALL"],
        "description": "Supplying the `status` will return accounts with specific status only.\n",
        "default": "ACTIVE"
      },
      "AccountId": {
        "type": "string",
        "description": "The Bank of London account ID identifies the account within the The Bank of London API. This field is considered a unique ID and cannot be constructed using the account number and sort code. As such it must only be provided with `accountId` values returned by The Bank of London Account API.",
        "example": "GB-040075-12345678"
      },
      "Limits": {
        "type": "object",
        "nullable": true,
        "description": "Limits applicable to the account.",
        "properties": {
          "minimumLimit": {
            "type": "number",
            "nullable": true,
            "description": "The minimum balance for the account.",
            "format": "double",
            "example": 0
          }
        }
      },
      "Status": {
        "type": "object",
        "description": "An object that represents the status of The Bank of London API entity (e.g. payment status, account status etc.)",
        "properties": {
          "identifier": {
            "type": "string",
            "description": "A machine readable string identifier for the status."
          }
        },
        "required": ["identifier"]
      },
      "AccountStatus": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Status"
          },
          {
            "description": "<span style=\"color:#f46d2a\">**Attention**</span> \\\nPlease note that the oneOf status is extensible and new objects can be returned \nwith the new account status **identifier** in the future without a major version change. \nPlease ensure this is factored into your application code.\n\nThe current status of the account.\n"
          },
          {
            "oneOf": [
              {
                "title": "ACTIVE",
                "properties": {
                  "identifier": {
                    "enum": ["ACTIVE"],
                    "description": "Account is active and can be used to process payments."
                  }
                }
              },
              {
                "title": "CLOSED",
                "properties": {
                  "identifier": {
                    "enum": ["CLOSED"],
                    "description": "Account is closed."
                  }
                }
              }
            ]
          }
        ]
      },
      "AccountTotals": {
        "type": "object",
        "description": "Totals for an account.",
        "properties": {
          "totalMonthlyCreditInterestAccrued": {
            "type": "number",
            "description": "The amount of interest accrued on the account in the current month. This interest is not yet paid.",
            "format": "double",
            "example": 1000,
            "default": 0
          },
          "totalCreditInterestPaid": {
            "type": "number",
            "description": "The total interest paid on the account since the account was opened.",
            "format": "double",
            "example": 1000,
            "default": 0
          },
          "totalCreditsCurrentMonth": {
            "type": "number",
            "description": "The total credits on the account in the current month.",
            "format": "double",
            "example": 1000,
            "default": 0
          },
          "totalDebitsCurrentMonth": {
            "type": "number",
            "description": "The total debits on the account in the current month.",
            "format": "double",
            "example": 1000,
            "default": 0
          }
        },
        "required": [
          "totalMonthlyCreditInterestAccrued",
          "totalCreditInterestPaid",
          "totalCreditsCurrentMonth",
          "totalDebitsCurrentMonth"
        ]
      },
      "AccountBalances": {
        "type": "object",
        "description": "Account balances.",
        "properties": {
          "available": {
            "type": "number",
            "description": "The available balance is the amount of money that the account holder can withdraw immediately.",
            "format": "double",
            "example": 1000
          },
          "current": {
            "type": "number",
            "description": "The current balance includes any pending transactions that have not yet been cleared.",
            "format": "double",
            "example": 2000
          }
        },
        "required": ["current", "available"]
      },
      "Currency": {
        "type": "string",
        "enum": ["GBP"],
        "description": "<span style=\"color:#f46d2a\">**Attention**</span> \\\nPlease note that the allowed values for the **currency** are\nextensible and new values can be added in the future without a\nmajor version change. Please ensure this is factored into your\napplication code.\n\n`GBP`: British Pound Sterling\n",
        "example": "GBP"
      },
      "AccountLockType": {
        "type": "string",
        "description": "<span style=\"color:#f46d2a\">**Attention**</span> \\\nPlease note that the allowed values for the **lockType** are\nextensible and new values can be added in the future without a\nmajor version change. Please ensure this is factored into your\napplication code.\n\nThe lock type of the account. \\\n`NONE` - account is not locked. \\\n`GENERAL` - account is locked and reason is not specified. \\\n`LOW_BALANCE` - account is locked due to minimum balance being reached. \\\n`FIXING_PHASE` - `FIXED_TERM_DEPOSIT` account is locked. It will be unlocked at the end of fixed term.\n",
        "enum": ["NONE", "GENERAL", "LOW_BALANCE", "FIXING_PHASE"]
      },
      "AccountNickname": {
        "type": "string",
        "nullable": true,
        "description": "User defined name to identify the account.",
        "example": "Business transactions",
        "minLength": 1,
        "maxLength": 25
      },
      "InterestDetailUnit": {
        "description": "The unit of interest.",
        "type": "string",
        "enum": ["%"]
      },
      "InterestDetail": {
        "type": "object",
        "nullable": true,
        "description": "The unit and value of interest.",
        "properties": {
          "unit": {
            "$ref": "#/components/schemas/InterestDetailUnit"
          },
          "value": {
            "type": "number",
            "format": "double",
            "example": 0.5
          }
        },
        "required": ["unit", "value"]
      },
      "InterestData": {
        "type": "object",
        "description": "Types of interest and associated properties.",
        "nullable": true,
        "properties": {
          "AER": {
            "$ref": "#/components/schemas/InterestDetail"
          },
          "GROSS": {
            "$ref": "#/components/schemas/InterestDetail"
          }
        }
      },
      "AccountCountryCode": {
        "type": "string",
        "description": "<span style=\"color:#f46d2a\">**Attention**</span> \\\nPlease note that the allowed values for the **countryCode** are\nextensible and new values can be added in the future without a\nmajor version change. Please ensure this is factored into your\napplication code.\n\nThe country code in which the account resides.\n",
        "enum": ["GB"],
        "example": "GB"
      },
      "UkAccountNumber": {
        "type": "string",
        "description": "In the UK, most bank account numbers consist of eight digits. Some UK banks have shorter account numbers, the number `0` should not be prefixed in those cases. Generally, an account number is only relevant in conjunction with a sort code.",
        "example": "12345678",
        "minLength": 6,
        "maxLength": 8
      },
      "UkSortCode": {
        "type": "string",
        "description": "A 6-digit identification number of the bank branch holding the account.",
        "example": "123456",
        "minLength": 6,
        "maxLength": 6
      },
      "Iban": {
        "type": "string",
        "description": "Account identifier in an IBAN format",
        "example": "GB98TBOL12345612345678"
      },
      "AccountIdentifiers": {
        "type": "object",
        "description": "Identifies the account numbers.",
        "properties": {
          "uk": {
            "type": "object",
            "description": "Identifier of a bank account within the United Kingdom.",
            "properties": {
              "accountNumber": {
                "$ref": "#/components/schemas/UkAccountNumber"
              },
              "sortCode": {
                "$ref": "#/components/schemas/UkSortCode"
              }
            },
            "required": ["accountNumber", "sortCode"]
          },
          "iban": {
            "$ref": "#/components/schemas/Iban"
          }
        },
        "required": ["uk", "iban"]
      },
      "AccountCreatedDateTime": {
        "type": "string",
        "description": "The date and time when the account was created.",
        "format": "date-time",
        "example": "2022-01-30T08:30:00Z"
      },
      "AccountHolderName": {
        "type": "string",
        "description": "Name of the account holder which is issuing or receiving a payment.",
        "example": "John Smith"
      },
      "FixedTermDepositDates": {
        "type": "object",
        "description": "Deposit dates for `FIXED_TERM_DEPOSIT` account. This property is always provided when account type is equal to `FIXED_TERM_DEPOSIT`, otherwise it is not returned.",
        "nullable": true,
        "properties": {
          "startDate": {
            "type": "string",
            "description": "The start date of fixed term deposit.",
            "format": "date",
            "example": "2024-02-01"
          },
          "endDate": {
            "type": "string",
            "description": "The end date of fixed term deposit.",
            "format": "date",
            "example": "2024-08-01"
          }
        },
        "required": ["startDate", "endDate"]
      },
      "NullableAccountOwner": {
        "type": "object",
        "description": "Owner of the account. When it is not specified the account will be owned directly by your organisation.",
        "properties": {
          "type": {
            "type": "string",
            "description": "<span style=\"color:#f46d2a\">**Attention**</span> \\\nPlease note that the allowed values for the **type** are\nextensible and new can be added in the future without a\nmajor version change. Please ensure this is factored into your\napplication code.\n\nThe type of owner\n",
            "enum": ["INDIVIDUAL", "ORGANISATION"]
          },
          "id": {
            "type": "string",
            "description": "The owner's ID",
            "example": "hkHcJybfBAKjZac9eiIAr"
          }
        },
        "required": ["type", "id"],
        "nullable": true
      },
      "SalesProductId": {
        "type": "string",
        "nullable": true,
        "description": "Used to define the interest rate for the account.\n\nNote: Sales product IDs are client specific and must be pre-configured. Please contact us at client.partners@thebankoflondon.com to configure them for you.\n",
        "example": "COMP_SP1"
      },
      "BaseAccount": {
        "properties": {
          "id": {
            "$ref": "#/components/schemas/AccountId"
          },
          "type": {
            "$ref": "#/components/schemas/AccountType"
          },
          "limits": {
            "$ref": "#/components/schemas/Limits"
          },
          "status": {
            "$ref": "#/components/schemas/AccountStatus"
          },
          "totals": {
            "$ref": "#/components/schemas/AccountTotals"
          },
          "balances": {
            "$ref": "#/components/schemas/AccountBalances"
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "lockType": {
            "$ref": "#/components/schemas/AccountLockType"
          },
          "nickname": {
            "$ref": "#/components/schemas/AccountNickname"
          },
          "interests": {
            "$ref": "#/components/schemas/InterestData"
          },
          "countryCode": {
            "$ref": "#/components/schemas/AccountCountryCode"
          },
          "identifiers": {
            "$ref": "#/components/schemas/AccountIdentifiers"
          },
          "createdDateTime": {
            "$ref": "#/components/schemas/AccountCreatedDateTime"
          },
          "accountHolderName": {
            "$ref": "#/components/schemas/AccountHolderName"
          },
          "fixedTermDepositDates": {
            "$ref": "#/components/schemas/FixedTermDepositDates"
          },
          "accountOwner": {
            "$ref": "#/components/schemas/NullableAccountOwner"
          },
          "salesProductId": {
            "$ref": "#/components/schemas/SalesProductId"
          }
        },
        "required": [
          "id",
          "createdDateTime",
          "currency",
          "balances",
          "status",
          "identifiers",
          "accountHolderName",
          "nickname",
          "countryCode",
          "type",
          "lockType"
        ]
      },
      "Account": {
        "description": "Physical account owned by the requestor or requestors customers",
        "title": "Account",
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseAccount"
          }
        ],
        "type": "object"
      },
      "MetaData": {
        "type": "object",
        "properties": {
          "totalRecords": {
            "type": "integer",
            "description": "The total number of available records for the query.",
            "example": 100
          },
          "page": {
            "type": "integer",
            "description": "The page number returned for the query.",
            "example": 1
          },
          "pageSize": {
            "type": "integer",
            "description": "The number of records per page for the query.",
            "example": 20
          }
        },
        "required": ["totalRecords", "page", "pageSize"]
      },
      "ErrorResponseDetails": {
        "additionalProperties": true,
        "properties": {},
        "nullable": true,
        "type": "object",
        "description": "A map of additional details about the error. For example, a validation error might include a map of field names to error messages",
        "example": {
          "body.extraProperty": {
            "message": "\"extraProperty\" is an excess property and therefore is not allowed",
            "value": "extraProperty"
          }
        }
      },
      "ErrorResponseJSON": {
        "additionalProperties": false,
        "properties": {
          "status": {
            "type": "integer",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "details": {
            "$ref": "#/components/schemas/ErrorResponseDetails"
          },
          "code": {
            "type": "string",
            "description": "A unique code for the error, if available.",
            "nullable": true
          }
        },
        "type": "object"
      },
      "BadRequestError": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ErrorResponseJSON"
          },
          {
            "properties": {
              "status": {
                "enum": [400]
              },
              "name": {
                "enum": ["BadRequest"]
              },
              "message": {
                "example": "The request has validation errors"
              }
            }
          }
        ]
      },
      "UnauthorizedError": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ErrorResponseJSON"
          },
          {
            "properties": {
              "status": {
                "enum": [401]
              },
              "name": {
                "enum": ["Unauthorized"]
              },
              "message": {
                "example": "Missing x-jws-signature header"
              }
            }
          }
        ]
      },
      "ForbiddenError": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ErrorResponseJSON"
          },
          {
            "properties": {
              "status": {
                "enum": [403]
              },
              "name": {
                "enum": ["Forbidden"]
              },
              "message": {
                "example": "You do not have permission to access this resource"
              }
            }
          }
        ]
      },
      "ValidationError": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ErrorResponseJSON"
          },
          {
            "properties": {
              "status": {
                "enum": [422]
              },
              "name": {
                "enum": ["ValidationFailure", "UnprocessableEntity"]
              },
              "message": {
                "example": "Validation Failed"
              }
            }
          }
        ]
      },
      "InternalServerError": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ErrorResponseJSON"
          },
          {
            "properties": {
              "name": {
                "enum": ["InternalServerError"]
              },
              "status": {
                "enum": [500]
              },
              "message": {
                "example": "Request failed with status code 500"
              }
            }
          }
        ]
      },
      "PhysicalAccountType": {
        "type": "string",
        "description": "<span style=\"color:#f46d2a\">**Attention**</span> \\\nPlease note that the allowed values for the **type** are\nextensible and new can be added in the future without a\nmajor version change. Please ensure this is factored into your\napplication code.\n\nThe type of account to be created. \\\n`BAAS_PHYSICAL_ACCOUNT`: A physical account assigned to clients customers, (Individual or Organisation).\n",
        "enum": ["BAAS_PHYSICAL_ACCOUNT"]
      },
      "AccountOwner": {
        "type": "object",
        "description": "Owner of the account.",
        "properties": {
          "type": {
            "type": "string",
            "description": "<span style=\"color:#f46d2a\">**Attention**</span> \\\nPlease note that the allowed values for the **type** are\nextensible and new can be added in the future without a\nmajor version change. Please ensure this is factored into your\napplication code.\n\nThe type of owner\n",
            "enum": ["INDIVIDUAL", "ORGANISATION"]
          },
          "id": {
            "type": "string",
            "description": "The owner's ID",
            "example": "hkHcJybfBAKjZac9eiIAr"
          }
        },
        "required": ["type", "id"]
      },
      "CreateAccountRequest": {
        "type": "object",
        "title": "Create Account Request",
        "description": "Request object that is required to create an account",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/PhysicalAccountType"
          },
          "accountOwner": {
            "$ref": "#/components/schemas/AccountOwner"
          },
          "nickname": {
            "$ref": "#/components/schemas/AccountNickname"
          },
          "salesProductId": {
            "$ref": "#/components/schemas/SalesProductId"
          }
        },
        "required": ["type", "accountOwner"]
      },
      "CreateAccountResponse": {
        "type": "object",
        "title": "Create Account Response",
        "description": "Create account response object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The account identifier",
            "example": "GB-040075-87654321"
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "type": {
            "$ref": "#/components/schemas/PhysicalAccountType"
          },
          "accountOwner": {
            "$ref": "#/components/schemas/AccountOwner"
          },
          "nickname": {
            "$ref": "#/components/schemas/AccountNickname"
          },
          "salesProductId": {
            "$ref": "#/components/schemas/SalesProductId"
          }
        },
        "required": ["id", "currency", "type", "accountOwner"]
      },
      "NotFoundError": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ErrorResponseJSON"
          },
          {
            "properties": {
              "status": {
                "enum": [404]
              },
              "name": {
                "enum": ["NotFound"]
              },
              "message": {
                "example": "The requested resource was not found"
              }
            }
          }
        ]
      },
      "Constraints": {
        "type": "object",
        "description": "The operational constraints applied to the account. \nThis object is present if the query parameter `includeConstraints` is set to `true` and the account has constraints applied to it.\n",
        "nullable": true,
        "properties": {
          "withdrawal": {
            "type": "object",
            "description": "Withdrawal constraints.",
            "properties": {
              "noticePeriod": {
                "type": "object",
                "description": "The notice period constraint applied to the account.",
                "properties": {
                  "duration": {
                    "type": "number",
                    "description": "The duration of the notice period.",
                    "format": "double",
                    "example": 100
                  },
                  "unitOfTime": {
                    "type": "string",
                    "description": "The unit of time of the notice period duration.",
                    "enum": ["DAY", "WEEK", "MONTH", "YEAR"]
                  }
                },
                "required": ["duration", "unitOfTime"]
              },
              "nominatedPayees": {
                "type": "array",
                "nullable": true,
                "description": "Restrictions of payees. If set, account can only send money to these specific payees. Only applies for external transfers.",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The name of the payee.",
                      "example": "John Smith"
                    },
                    "accountNumber": {
                      "$ref": "#/components/schemas/UkAccountNumber"
                    },
                    "sortCode": {
                      "$ref": "#/components/schemas/UkSortCode"
                    }
                  }
                }
              }
            },
            "required": ["noticePeriod"]
          }
        },
        "required": ["withdrawal"]
      },
      "GetSingleAccountResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Account"
          },
          {
            "type": "object",
            "properties": {
              "constraints": {
                "$ref": "#/components/schemas/Constraints"
              }
            }
          }
        ]
      },
      "UpdateAccountRequest": {
        "type": "object",
        "title": "Update Account Request",
        "description": "Request object that is required to update an account",
        "properties": {
          "nickname": {
            "$ref": "#/components/schemas/AccountNickname"
          },
          "salesProductId": {
            "$ref": "#/components/schemas/SalesProductId"
          }
        }
      },
      "PhysicalAccountClosureReason": {
        "type": "string",
        "description": "<span style=\"color:#f46d2a\">**Attention**</span> \\\nPlease note that the allowed values for the **type** are\nextensible and new can be added in the future without a\nmajor version change. Please ensure this is factored into your\napplication code.\n\nThe reason for the account cloosure. \\\n`CUST_INITIATED`: Customer initiated the closure of the account. \\\n`CUST_DECEASED`: Customer is deceased. \\\n`FRAUD_AML`: Account or customer linked to fraud. \\\n`ACCT_TRANSFER`: Account was transferred to another bank.\n",
        "enum": ["CUST_INITIATED", "CUST_DECEASED", "FRAUD_AML", "ACCT_TRANSFER"]
      },
      "AccountIdentifierForAccountClosureUk": {
        "type": "object",
        "title": "UK",
        "properties": {
          "type": {
            "type": "string",
            "enum": ["UK"]
          },
          "sortCode": {
            "$ref": "#/components/schemas/UkSortCode"
          },
          "accountNumber": {
            "$ref": "#/components/schemas/UkAccountNumber"
          },
          "accountHolderName": {
            "type": "string",
            "description": "Name of the account holder.",
            "example": "John Smith"
          }
        },
        "required": ["type", "sortCode", "accountNumber", "accountHolderName"]
      },
      "CloseAccountRequest": {
        "type": "object",
        "title": "Create Account Request",
        "description": "Request object that is required to close an account",
        "properties": {
          "closureReason": {
            "$ref": "#/components/schemas/PhysicalAccountClosureReason"
          },
          "recipient": {
            "description": "Account details where the remaining balance of the\nclosed account, any pending interest or transactions (if applicable)\nwill be transferred to. The account must be a UK bank account.\n\n<span style=\"color:#f46d2a\">**Attention**</span> \\\nPlease note that the recipient is a oneOf object linked to the **type** in the object. \nCurrently `UK` is the only available oneOf object\nbut the **recipient** oneOf is extensible and new recipient types can be added in the future without a\nmajor version change. Please ensure this is factored into your\napplication code.\n\nRepresents the details of the payment recipient.\n",
            "allOf": [
              {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/AccountIdentifierForAccountClosureUk"
                  }
                ]
              }
            ]
          }
        },
        "required": ["closureReason", "recipient"]
      },
      "CloseAccountResponse": {
        "type": "object",
        "title": "Close Account Response",
        "description": "Close account response object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The account identifier of the closed account.",
            "example": "GB-040075-87654321"
          },
          "status": {
            "type": "object",
            "properties": {
              "identifier": {
                "type": "string",
                "description": "The status of the account",
                "example": "CLOSED",
                "enum": ["CLOSED"]
              }
            }
          }
        },
        "required": ["id", "status"]
      },
      "ConflictError": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ErrorResponseJSON"
          },
          {
            "properties": {
              "status": {
                "enum": [409]
              },
              "name": {
                "enum": ["Conflict"]
              },
              "message": {
                "example": "Resource already exists"
              }
            }
          }
        ]
      },
      "OrganisationId": {
        "type": "string",
        "nullable": true,
        "description": "ID of an organisation. When it is not specified, it is then implied that individual is linked to your organisation directly.",
        "example": "u5vab5K9RZFTTzNJNAs3H"
      },
      "PersonId": {
        "type": "string",
        "description": "Randomly generated id",
        "example": "cpNBTqwaiqem3mI72UEcP"
      },
      "PersonNamePrefix": {
        "type": "string",
        "nullable": true,
        "description": "<span style=\"color:#f46d2a\">**Attention**</span> \\\nPlease note that the allowed values for the **namePrefix** are\nextensible and new values can be added in the future without a\nmajor version change. Please ensure this is factored into your\napplication code.\n\nName prefix\n",
        "example": "Mr.",
        "enum": ["Mr.", "Ms."]
      },
      "PersonFirstName": {
        "type": "string",
        "description": "First name",
        "example": "John",
        "minLength": 1,
        "maxLength": 40
      },
      "PersonMiddleName": {
        "type": "string",
        "nullable": true,
        "description": "Middle name",
        "example": "Patricio",
        "maxLength": 40
      },
      "PersonLastName": {
        "type": "string",
        "description": "Last name",
        "example": "Smith",
        "minLength": 1,
        "maxLength": 40
      },
      "Nationality": {
        "type": "string",
        "description": "Country in ISO 3166-1 alpha-2 format",
        "example": "GB"
      },
      "DateOfBirth": {
        "type": "string",
        "description": "Birthdate in YYYY-MM-DD format",
        "format": "date",
        "example": "1991-06-21"
      },
      "PlaceOfBirth": {
        "type": "string",
        "nullable": true,
        "description": "Place of birth",
        "example": "GB",
        "maxLength": 40
      },
      "Identification": {
        "type": "object",
        "description": "Individual's identification information.",
        "properties": {
          "type": {
            "type": "string",
            "description": "<span style=\"color:#f46d2a\">**Attention**</span> \\\nPlease note that the allowed values for the **type** are\nextensible and new values can be added in the future without a\nmajor version change. Please ensure this is factored into your\napplication code.\n\nThe type of identification document\n",
            "enum": ["DRIVER_LICENSE", "NATIONAL_ID", "PASSPORT"]
          },
          "number": {
            "type": "string",
            "description": "The number of identification document. Note that if letters are used, they should be in uppercase.",
            "example": "657054SM1FD01",
            "maxLength": 30
          }
        },
        "required": ["type", "number"]
      },
      "PersonAddress": {
        "type": "object",
        "description": "Individual's address information",
        "properties": {
          "country": {
            "type": "string",
            "description": "Country in ISO 3166-1 alpha-2 format. By default, GB country code is\nsupported. If you wish to avail of other country codes the api\nsupports within the European Economic Area (EEA), please contact us.\n",
            "enum": [
              "GB",
              "AT",
              "BE",
              "BG",
              "HR",
              "CY",
              "CZ",
              "DK",
              "EE",
              "FI",
              "FR",
              "DE",
              "GR",
              "HU",
              "IE",
              "IT",
              "LV",
              "LT",
              "LU",
              "MT",
              "NL",
              "PL",
              "PT",
              "RO",
              "SK",
              "SI",
              "ES",
              "SE",
              "CH"
            ]
          },
          "city": {
            "type": "string",
            "nullable": true,
            "description": "City",
            "example": "London",
            "maxLength": 40
          },
          "postalCode": {
            "type": "string",
            "nullable": true,
            "description": "Postal code. Must be provided together with street.",
            "example": "EC1Y 8SY",
            "maxLength": 9
          },
          "street": {
            "type": "string",
            "nullable": true,
            "description": "Street. Must be provided together with postal code.",
            "example": "Featherstone Street",
            "maxLength": 60
          },
          "buildingNumber": {
            "type": "string",
            "nullable": true,
            "description": "House or building number",
            "example": "888",
            "maxLength": 9
          }
        },
        "required": ["country"]
      },
      "NullableEmail": {
        "type": "string",
        "description": "Email address",
        "example": "john.smith@example.domain.com",
        "maxLength": 80,
        "nullable": true
      },
      "PhoneNumber": {
        "type": "string",
        "description": "Phone number",
        "example": "+442071234567"
      },
      "Individual": {
        "properties": {
          "id": {
            "$ref": "#/components/schemas/PersonId"
          },
          "namePrefix": {
            "$ref": "#/components/schemas/PersonNamePrefix"
          },
          "firstName": {
            "$ref": "#/components/schemas/PersonFirstName"
          },
          "middleName": {
            "$ref": "#/components/schemas/PersonMiddleName"
          },
          "lastName": {
            "$ref": "#/components/schemas/PersonLastName"
          },
          "nationality": {
            "$ref": "#/components/schemas/Nationality"
          },
          "dateOfBirth": {
            "$ref": "#/components/schemas/DateOfBirth"
          },
          "placeOfBirth": {
            "$ref": "#/components/schemas/PlaceOfBirth"
          },
          "identification": {
            "$ref": "#/components/schemas/Identification"
          },
          "address": {
            "$ref": "#/components/schemas/PersonAddress"
          },
          "email": {
            "$ref": "#/components/schemas/NullableEmail"
          },
          "phoneNumber": {
            "$ref": "#/components/schemas/PhoneNumber"
          },
          "organisationId": {
            "$ref": "#/components/schemas/OrganisationId"
          }
        },
        "required": [
          "id",
          "firstName",
          "lastName",
          "nationality",
          "dateOfBirth",
          "identification",
          "address",
          "phoneNumber"
        ],
        "type": "object",
        "description": "Response object of getting an individual"
      },
      "TooManyRequestsError": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ErrorResponseJSON"
          },
          {
            "properties": {
              "status": {
                "enum": [429]
              },
              "name": {
                "enum": ["TooManyRequests"]
              },
              "message": {
                "example": "Rate limiting has been applied"
              }
            }
          }
        ]
      },
      "NullablePersonFirstName": {
        "type": "string",
        "description": "First name",
        "example": "John",
        "minLength": 1,
        "maxLength": 40,
        "nullable": true
      },
      "NullablePersonLastName": {
        "type": "string",
        "description": "Last name",
        "example": "Smith",
        "minLength": 1,
        "maxLength": 40,
        "nullable": true
      },
      "NullableNationality": {
        "type": "string",
        "description": "Country in ISO 3166-1 alpha-2 format",
        "example": "GB",
        "nullable": true
      },
      "NullableDateOfBirth": {
        "type": "string",
        "description": "Birthdate in YYYY-MM-DD format",
        "format": "date",
        "example": "1991-06-21",
        "nullable": true
      },
      "NullablePlaceOfBirth": {
        "type": "string",
        "nullable": true,
        "description": "Place of birth",
        "example": "GB",
        "maxLength": 40
      },
      "NullableIdentification": {
        "type": "object",
        "description": "Individual's identification information.",
        "properties": {
          "type": {
            "type": "string",
            "description": "<span style=\"color:#f46d2a\">**Attention**</span> \\\nPlease note that the allowed values for the **type** are\nextensible and new values can be added in the future without a\nmajor version change. Please ensure this is factored into your\napplication code.\n\nThe type of identification document\n",
            "enum": ["DRIVER_LICENSE", "NATIONAL_ID", "PASSPORT"]
          },
          "number": {
            "type": "string",
            "description": "The number of identification document. Note that if letters are used, they should be in uppercase.",
            "example": "657054SM1FD01",
            "maxLength": 30
          }
        },
        "required": ["type", "number"],
        "nullable": true
      },
      "NullablePersonAddress": {
        "type": "object",
        "description": "Individual's address information",
        "properties": {
          "country": {
            "type": "string",
            "description": "Country in ISO 3166-1 alpha-2 format. By default, GB country code is\nsupported. If you wish to avail of other country codes the api\nsupports within the European Economic Area (EEA), please contact us.\n",
            "enum": [
              "GB",
              "AT",
              "BE",
              "BG",
              "HR",
              "CY",
              "CZ",
              "DK",
              "EE",
              "FI",
              "FR",
              "DE",
              "GR",
              "HU",
              "IE",
              "IT",
              "LV",
              "LT",
              "LU",
              "MT",
              "NL",
              "PL",
              "PT",
              "RO",
              "SK",
              "SI",
              "ES",
              "SE",
              "CH"
            ]
          },
          "city": {
            "type": "string",
            "nullable": true,
            "description": "City",
            "example": "London",
            "maxLength": 40
          },
          "postalCode": {
            "type": "string",
            "nullable": true,
            "description": "Postal code. Must be provided together with street.",
            "example": "EC1Y 8SY",
            "maxLength": 9
          },
          "street": {
            "type": "string",
            "nullable": true,
            "description": "Street. Must be provided together with postal code.",
            "example": "Featherstone Street",
            "maxLength": 60
          },
          "buildingNumber": {
            "type": "string",
            "nullable": true,
            "description": "House or building number",
            "example": "888",
            "maxLength": 9
          }
        },
        "required": ["country"],
        "nullable": true
      },
      "NullablePhoneNumber": {
        "type": "string",
        "description": "Phone number",
        "example": "+442071234567",
        "nullable": true
      },
      "OrganisationId1": {
        "type": "string",
        "description": "Randomly generated id",
        "example": "cpNBTqwaiqem3mI72UEcP"
      },
      "OrganisationName": {
        "type": "string",
        "description": "Name",
        "example": "Test Organisation",
        "maxLength": 160
      },
      "CompanyNumber": {
        "type": "string",
        "description": "The unique number assigned to the organisation/company when it was\nfounded/incorporated with the authorities - i.e. Companies House in the\nUK. Note that if letters are included in the company number, they must\nbe upper case.\n",
        "example": "123456",
        "maxLength": 8
      },
      "FoundationDate": {
        "type": "string",
        "description": "The date the organisation/company was founded/incorporated",
        "example": "1995-10-16"
      },
      "OrganisationAddress": {
        "type": "object",
        "description": "Organisation's address information",
        "properties": {
          "country": {
            "type": "string",
            "description": "Country in ISO 3166-1 alpha-2 format. By default, GB country code is\nsupported. If you wish to avail of other country codes the api\nsupports within the European Economic Area (EEA), please contact us.\n",
            "enum": [
              "GB",
              "AT",
              "BE",
              "BG",
              "HR",
              "CY",
              "CZ",
              "DK",
              "EE",
              "FI",
              "FR",
              "DE",
              "GR",
              "HU",
              "IS",
              "IE",
              "IT",
              "LI",
              "LV",
              "LT",
              "LU",
              "MT",
              "NL",
              "NO",
              "PL",
              "PT",
              "RO",
              "SK",
              "SI",
              "ES",
              "SE",
              "CH"
            ]
          },
          "city": {
            "type": "string",
            "nullable": true,
            "description": "City",
            "example": "London",
            "maxLength": 40
          },
          "postalCode": {
            "type": "string",
            "nullable": true,
            "description": "Postal code. Must be provided together with street.",
            "example": "EC1Y 8SY",
            "maxLength": 9
          },
          "street": {
            "type": "string",
            "nullable": true,
            "description": "Street. Must be provided together with postal code.",
            "example": "Featherstone Street",
            "maxLength": 60
          },
          "buildingNumber": {
            "type": "string",
            "nullable": true,
            "description": "House or building number",
            "example": "888",
            "maxLength": 9
          }
        },
        "required": ["country"]
      },
      "OrganisationV2": {
        "properties": {
          "id": {
            "$ref": "#/components/schemas/OrganisationId1"
          },
          "name": {
            "$ref": "#/components/schemas/OrganisationName"
          },
          "companyNumber": {
            "$ref": "#/components/schemas/CompanyNumber"
          },
          "foundationDate": {
            "$ref": "#/components/schemas/FoundationDate"
          },
          "address": {
            "$ref": "#/components/schemas/OrganisationAddress"
          }
        },
        "required": ["id", "name", "companyNumber", "foundationDate", "address"],
        "type": "object",
        "description": "Response object of getting an organisation"
      },
      "NullableOrganisationName": {
        "type": "string",
        "description": "Name",
        "example": "Test Organisation",
        "maxLength": 160,
        "nullable": true
      },
      "NullableCompanyNumber": {
        "type": "string",
        "description": "The unique number assigned to the organisation/company when it was\nfounded/incorporated with the authorities - i.e. Companies House in the\nUK. Note that if letters are included in the company number, they must\nbe upper case.\n",
        "example": "123456",
        "maxLength": 8,
        "nullable": true
      },
      "NullableFoundationDate": {
        "type": "string",
        "description": "The date the organisation/company was founded/incorporated",
        "example": "1995-10-16",
        "nullable": true
      },
      "NullableOrganisationAddress": {
        "type": "object",
        "description": "Organisation's address information",
        "properties": {
          "country": {
            "type": "string",
            "description": "Country in ISO 3166-1 alpha-2 format. By default, GB country code is\nsupported. If you wish to avail of other country codes the api\nsupports within the European Economic Area (EEA), please contact us.\n",
            "enum": [
              "GB",
              "AT",
              "BE",
              "BG",
              "HR",
              "CY",
              "CZ",
              "DK",
              "EE",
              "FI",
              "FR",
              "DE",
              "GR",
              "HU",
              "IS",
              "IE",
              "IT",
              "LI",
              "LV",
              "LT",
              "LU",
              "MT",
              "NL",
              "NO",
              "PL",
              "PT",
              "RO",
              "SK",
              "SI",
              "ES",
              "SE",
              "CH"
            ]
          },
          "city": {
            "type": "string",
            "nullable": true,
            "description": "City",
            "example": "London",
            "maxLength": 40
          },
          "postalCode": {
            "type": "string",
            "nullable": true,
            "description": "Postal code. Must be provided together with street.",
            "example": "EC1Y 8SY",
            "maxLength": 9
          },
          "street": {
            "type": "string",
            "nullable": true,
            "description": "Street. Must be provided together with postal code.",
            "example": "Featherstone Street",
            "maxLength": 60
          },
          "buildingNumber": {
            "type": "string",
            "nullable": true,
            "description": "House or building number",
            "example": "888",
            "maxLength": 9
          }
        },
        "required": ["country"],
        "nullable": true
      },
      "NullableClientType": {
        "type": "string",
        "description": "<span style=\"color:#f46d2a\">**Attention**</span> \\\nPlease note that the allowed values for the **clientType** are\nextensible and new values can be added in the future without a\nmajor version change. Please ensure this is factored into your\napplication code.\n\n**Default allowed clients types are:** \\\n`GOVERNMENT_OR_NOT_FOR_PROFIT` - A government/public body, or a not-for-profit firm (e.g. charities) that is not regulated by a financial services regulator. \\\n`PROFESSIONAL_PRACTICE` - A professional practice such as a law firm or accountancy practice that is not regulated by a financial services regulator. \\\n`CORPORATE_BUSINESS_LARGE` - Any other type of firm, with a turnover of greater than £10M or greater than 10 employees that is not regulated by a financial services regulator. \\\n`CORPORATE_BUSINESS_SMALL` - Any other type of firm, with a turnover of less than £10M and less than 10 employees that is not regulated by a financial services regulator. \\\n`OTHER_NON_REGULATED` - Any other type of business that does not fit into any other client type and is not regulated by a financial services regulator.\n\n**If you require any of the following client types, please contact us.** \\\n`BANK` - A bank that is regulated by a recognised regulator. \\\n`BUILDING_SOCIETY_OR_CREDIT_UNION` - A building society or credit union that's regulated by a recognised regulator. \\\n`PAYMENT_INSTITUTION` - A payments business that is regulated by a recognised regulator. \\\n`MONEY_SERVICE_BUSINESS` - A money service business that is regulated by a recognised regulator. \\\n`ELECTRONIC_MONEY_INSTITUTION` - A electronic money business that is regulated by a recognised regulator. \\\n`DIGITAL_ASSETS_STABLE_COIN_ISSUER` - A digital assets firm that issues stable coins and is regulated by the FCA. \\\n`DIGITAL_ASSETS_NON_STABLE_COIN_ISSUER` - A digital assets firm that does not issue stable coins and is regulated by the FCA. \\\n`OTHER_DIGITAL_ASSETS` - A digital assets firm that doesn't fit into the other digital assets client types, and is regulated by a recognised regulator. \\\n`FUNDS` - A funds investment business that is regulated by a recognised regulator. \\\n`OTHER_REGULATED` - A regulated firm that doesn't fit into the other regulated client types (e.g. an insurance broker), and is regulated by a recognised regulator. \\\n`DEPOSIT_AGGREGATOR` - A deposit aggregator that is regulated by a recognised regulator.\n",
        "enum": [
          "GOVERNMENT_OR_NOT_FOR_PROFIT",
          "PROFESSIONAL_PRACTICE",
          "CORPORATE_BUSINESS_LARGE",
          "CORPORATE_BUSINESS_SMALL",
          "OTHER_NON_REGULATED",
          "BANK",
          "BUILDING_SOCIETY_OR_CREDIT_UNION",
          "PAYMENT_INSTITUTION",
          "MONEY_SERVICE_BUSINESS",
          "ELECTRONIC_MONEY_INSTITUTION",
          "DIGITAL_ASSETS_STABLE_COIN_ISSUER",
          "DIGITAL_ASSETS_NON_STABLE_COIN_ISSUER",
          "OTHER_DIGITAL_ASSETS",
          "FUNDS",
          "OTHER_REGULATED",
          "DEPOSIT_AGGREGATOR"
        ],
        "example": "GOVERNMENT_OR_NOT_FOR_PROFIT",
        "nullable": true
      },
      "GetSingleOrganisationResponseV3": {
        "allOf": [
          {
            "$ref": "#/components/schemas/OrganisationV2"
          },
          {
            "type": "object",
            "properties": {
              "clientType": {
                "$ref": "#/components/schemas/NullableClientType"
              }
            }
          }
        ]
      },
      "ClientType": {
        "type": "string",
        "description": "<span style=\"color:#f46d2a\">**Attention**</span> \\\nPlease note that the allowed values for the **clientType** are\nextensible and new values can be added in the future without a\nmajor version change. Please ensure this is factored into your\napplication code.\n\n**Default allowed clients types are:** \\\n`GOVERNMENT_OR_NOT_FOR_PROFIT` - A government/public body, or a not-for-profit firm (e.g. charities) that is not regulated by a financial services regulator. \\\n`PROFESSIONAL_PRACTICE` - A professional practice such as a law firm or accountancy practice that is not regulated by a financial services regulator. \\\n`CORPORATE_BUSINESS_LARGE` - Any other type of firm, with a turnover of greater than £10M or greater than 10 employees that is not regulated by a financial services regulator. \\\n`CORPORATE_BUSINESS_SMALL` - Any other type of firm, with a turnover of less than £10M and less than 10 employees that is not regulated by a financial services regulator. \\\n`OTHER_NON_REGULATED` - Any other type of business that does not fit into any other client type and is not regulated by a financial services regulator.\n\n**If you require any of the following client types, please contact us.** \\\n`BANK` - A bank that is regulated by a recognised regulator. \\\n`BUILDING_SOCIETY_OR_CREDIT_UNION` - A building society or credit union that's regulated by a recognised regulator. \\\n`PAYMENT_INSTITUTION` - A payments business that is regulated by a recognised regulator. \\\n`MONEY_SERVICE_BUSINESS` - A money service business that is regulated by a recognised regulator. \\\n`ELECTRONIC_MONEY_INSTITUTION` - A electronic money business that is regulated by a recognised regulator. \\\n`DIGITAL_ASSETS_STABLE_COIN_ISSUER` - A digital assets firm that issues stable coins and is regulated by the FCA. \\\n`DIGITAL_ASSETS_NON_STABLE_COIN_ISSUER` - A digital assets firm that does not issue stable coins and is regulated by the FCA. \\\n`OTHER_DIGITAL_ASSETS` - A digital assets firm that doesn't fit into the other digital assets client types, and is regulated by a recognised regulator. \\\n`FUNDS` - A funds investment business that is regulated by a recognised regulator. \\\n`OTHER_REGULATED` - A regulated firm that doesn't fit into the other regulated client types (e.g. an insurance broker), and is regulated by a recognised regulator. \\\n`DEPOSIT_AGGREGATOR` - A deposit aggregator that is regulated by a recognised regulator.\n",
        "enum": [
          "GOVERNMENT_OR_NOT_FOR_PROFIT",
          "PROFESSIONAL_PRACTICE",
          "CORPORATE_BUSINESS_LARGE",
          "CORPORATE_BUSINESS_SMALL",
          "OTHER_NON_REGULATED",
          "BANK",
          "BUILDING_SOCIETY_OR_CREDIT_UNION",
          "PAYMENT_INSTITUTION",
          "MONEY_SERVICE_BUSINESS",
          "ELECTRONIC_MONEY_INSTITUTION",
          "DIGITAL_ASSETS_STABLE_COIN_ISSUER",
          "DIGITAL_ASSETS_NON_STABLE_COIN_ISSUER",
          "OTHER_DIGITAL_ASSETS",
          "FUNDS",
          "OTHER_REGULATED",
          "DEPOSIT_AGGREGATOR"
        ],
        "example": "GOVERNMENT_OR_NOT_FOR_PROFIT"
      },
      "OrganisationV3": {
        "allOf": [
          {
            "$ref": "#/components/schemas/OrganisationV2"
          },
          {
            "type": "object",
            "properties": {
              "clientType": {
                "$ref": "#/components/schemas/ClientType"
              }
            }
          }
        ],
        "required": ["clientType"]
      },
      "AccountOwnership1": {
        "type": "string",
        "default": "ALL",
        "description": "Supplying the `accountOwnership` will return virtual accounts for specific ownership. \\\n`ALL`: all virtual accounts directly and indirectly linked to the requestor \\\n`DIRECT`: virtual accounts directly linked to the requestor \\\n`INDIRECT`: virtual accounts for both individuals and organisations\n",
        "example": "ALL",
        "enum": ["ALL", "DIRECT", "INDIRECT"]
      },
      "HeaderAccountId": {
        "type": "string",
        "description": "The head of hierarchy account associated with the virtual account.",
        "example": "GB-042972-98824239"
      },
      "AccountType1": {
        "type": "string",
        "description": "<span style=\"color:#f46d2a\">**Attention**</span> \\\nPlease note that the allowed values for the **type** are\nextensible and new can be added in the future without a\nmajor version change. Please ensure this is factored into your\napplication code.\n\nThe type of account \\\n  `VIRTUAL_ACCOUNT`: Virtual Deposit Account. Accounts can be internally or externally addressable, both forms support direct and indirect payments. \\\n  `VIRTUAL_SUSPENSE`: Virtual Suspense Account. Manages the balancing of the virtual hierarchy in case of an unreconciled payment. \\\n  `VIRTUAL_PANDL`: Virtual Profit & Loss Account. Allows profit to be taken from Virtual Account hierarchy by having different interest between real and virtual hierarchies.\n",
        "enum": ["VIRTUAL_ACCOUNT", "VIRTUAL_SUSPENSE", "VIRTUAL_PANDL"]
      },
      "VirtualAccountBase": {
        "properties": {
          "id": {
            "$ref": "#/components/schemas/AccountId"
          },
          "createdDateTime": {
            "$ref": "#/components/schemas/AccountCreatedDateTime"
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "balances": {
            "$ref": "#/components/schemas/AccountBalances"
          },
          "totals": {
            "$ref": "#/components/schemas/AccountTotals"
          },
          "nickname": {
            "$ref": "#/components/schemas/AccountNickname"
          },
          "accountHolderName": {
            "$ref": "#/components/schemas/AccountHolderName"
          },
          "status": {
            "$ref": "#/components/schemas/AccountStatus"
          },
          "countryCode": {
            "$ref": "#/components/schemas/AccountCountryCode"
          },
          "identifiers": {
            "$ref": "#/components/schemas/AccountIdentifiers"
          },
          "type": {
            "$ref": "#/components/schemas/AccountType1"
          },
          "lockType": {
            "$ref": "#/components/schemas/AccountLockType"
          },
          "limits": {
            "$ref": "#/components/schemas/Limits"
          },
          "fixedTermDepositDates": {
            "$ref": "#/components/schemas/FixedTermDepositDates"
          },
          "interests": {
            "$ref": "#/components/schemas/InterestData"
          },
          "accountOwner": {
            "$ref": "#/components/schemas/NullableAccountOwner"
          },
          "organisationId": {
            "$ref": "#/components/schemas/OrganisationId"
          }
        },
        "required": [
          "id",
          "createdDateTime",
          "currency",
          "balances",
          "status",
          "identifiers",
          "accountHolderName",
          "nickname",
          "countryCode",
          "type",
          "lockType"
        ],
        "type": "object",
        "description": "Response object of getting a virtual account"
      },
      "VirtualAccountAggregatorNodeId": {
        "type": "string",
        "nullable": true,
        "description": "When this field is provided, the virtual account is associated with a virtual aggregator node. The virtual aggregator node can then be used to retrieve all transactions for the associated virtual accounts.",
        "example": "0000000012"
      },
      "CreateVirtualAccountRequest": {
        "type": "object",
        "title": "Create Virtual Account Request",
        "description": "Request object that is required to create a virtual account",
        "properties": {
          "headerAccountId": {
            "$ref": "#/components/schemas/HeaderAccountId"
          },
          "virtualAggregatorNodeId": {
            "$ref": "#/components/schemas/VirtualAccountAggregatorNodeId"
          },
          "accountOwner": {
            "$ref": "#/components/schemas/NullableAccountOwner"
          }
        },
        "required": ["headerAccountId"]
      },
      "CreateVirtualAccountResponse": {
        "type": "object",
        "title": "Create Virtual Account Response",
        "description": "Create virtual account response object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The virtual account identifier",
            "example": "GB-040075-87654321"
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "type": {
            "type": "string",
            "enum": ["VIRTUAL_ACCOUNT"],
            "description": "Type of account. \\\n`VIRTUAL_ACCOUNT`: Virtual Deposit Account. Accounts can be internally or externally addressable, both forms support direct and indirect payments.\n"
          },
          "headerAccountId": {
            "$ref": "#/components/schemas/HeaderAccountId"
          },
          "accountOwner": {
            "$ref": "#/components/schemas/NullableAccountOwner"
          }
        },
        "required": ["id", "currency", "type", "headerAccountId"]
      },
      "VirtualAccountWithHeaderAccountId": {
        "allOf": [
          {
            "$ref": "#/components/schemas/VirtualAccountBase"
          },
          {
            "type": "object",
            "properties": {
              "headerAccountId": {
                "$ref": "#/components/schemas/HeaderAccountId"
              }
            },
            "required": ["headerAccountId"]
          }
        ]
      },
      "GetSingleVirtualAccountResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/VirtualAccountWithHeaderAccountId"
          },
          {
            "type": "object",
            "properties": {
              "constraints": {
                "$ref": "#/components/schemas/Constraints"
              }
            }
          }
        ]
      },
      "UpdateVirtualAccountRequest": {
        "type": "object",
        "title": "Update Virtual Account Request",
        "description": "Request object that is required to update a virtual account",
        "properties": {
          "nickname": {
            "$ref": "#/components/schemas/AccountNickname"
          }
        },
        "required": ["nickname"]
      },
      "CloseVirtualAccountRequest": {
        "type": "object",
        "title": "Close Virtual Account Request",
        "description": "Request object that is required to close a virtual account",
        "properties": {
          "closureReason": {
            "$ref": "#/components/schemas/PhysicalAccountClosureReason"
          },
          "recipient": {
            "description": "Account details where the remaining balance of the\nclosed account, any pending interest or transactions (if applicable)\nwill be transferred to. The account must be within the same Virtual Account Hierarchy.\nIt can be another `VIRTUAL_ACCOUNT` or a `VIRTUAL_SUSPENSE` account. \nUse [Get Virtual Accounts](/operations/GetVirtualAccounts) with the query parameter `accountOwnership=DIRECT` to find details of the `VIRTUAL_SUSPENSE` account. \n\n<span style=\"color:#f46d2a\">**Attention**</span>\nPlease note that the recipient is a oneOf object linked to the **type** in the object. \nCurrently `UK` is the only available oneOf object\nbut the **recipient** oneOf is extensible and new recipient types can be added in the future without a\nmajor version change. Please ensure this is factored into your\napplication code.\n\nRepresents the details of the payment recipient.",
            "allOf": [
              {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/AccountIdentifierForAccountClosureUk"
                  }
                ]
              }
            ]
          }
        },
        "required": ["recipient"]
      },
      "TransactionFromDate": {
        "type": "string",
        "description": "The oldest posting date from which the transactions will be\nprovided.\n",
        "format": "date",
        "example": "2022-10-07"
      },
      "TransactionToDate": {
        "type": "string",
        "description": "The most recent posting date from which the transactions will be\nprovided.\n",
        "format": "date",
        "example": "2022-10-07"
      },
      "TransactionType": {
        "type": "string",
        "description": "Type of the transaction. \\\n`BACS_DIRECT_CREDIT_INBOUND`: Inbound BACS Direct Credit Payment \\\n`BACS_DIRECT_CREDIT_OUTBOUND`: Outbound BACS Direct Credit Payment \\\n`BACS_DIRECT_DEBIT_COLL`: BACS Direct Debit Outbound Collection \\\n`BACS_DIRECT_DEBIT_FINALDDI`: BACS Direct Debit Outbound Final Payment per Direct Debit Instruction \\\n`BACS_DIRECT_DEBIT_FIRSTDDI`: BACS Direct Debit Outbound First Payment per Direct Debit Instruction \\\n`BACS_DIRECT_DEBIT_REGULARDDI`: BACS Direct Debit Outbound Regular Payment per Direct Debit Instruction \\\n`BACS_DIRECT_DEBIT_REPRES`: BACS Direct Debit Unable to Apply First Time \\\n`BACS_DIRECT_DEBIT_RETURN`: Returned Bacs Direct Debit \\\n`BACS_RECALL`: Recall of BACS outbound direct credit \\\n`BACS_REFUND`: Refund of BACS outbound direct credit \\\n`BACS_REVERSAL_DIRECTCREDIT`: Reversal of BACS outbound direct credit \\\n`BACS_REVERSAL_DIRECTDEBIT`: Reversal of BACS outbound direct debit \\\n`CHAPS_CREDIT`: Inbound CHAPS payment \\\n`CHAPS_DEBIT_OUTBND`: Outbound CHAPS payment \\\n`CHAPS_DEBIT_OUTBNDSOP`: Outbound CHAPS payment \\\n`CHAPS_RETURNED_CREDIT`: Returned CHAPS credit \\\n`CHAPS_RETURNED_CREDIT_OUTBND`: Returned CHAPS credit for an Previous Outbound Transfer \\\n`FPS_CREDIT`: Inbound Faster Payment \\\n`FPS_INTL_CREDIT`: Inbound Faster Payment that originated overseas \\\n`FPS_DEBIT`: Outbound Faster Payment \\\n`FPS_RETURN_CREDIT`: Returned Faster Payments credit \\\n`FPS_RETURNED_CREDIT`: Returned outbound Faster Payment \\\n`FPS_SCHEDULED_DEBIT`: Outbound future dated payment Faster Payments \\\n`FPS_STANDING_ORDER_DEBIT`: Outbound standing order payments Faster Payments \\\n`ACCOUNT_CLOSURE_CREDIT`: Credit for account balance clear on closure of The Bank of London account. \\\n`ACCOUNT_CLOSURE_CREDIT_COLL`: Credit from collection authorization at closure of The Bank of London account \\\n`ACCOUNT_CLOSURE_DEBIT`: Debit for account balance clear on closure of The Bank of London account \\\n`ACCOUNT_CLOSURE_DEBIT_OUTBND`: Debit for account balance clear on closure of The Bank of London account, process an outbound payment to an external account \\\n`INTEREST_CREDIT_STLMNT_TRF`: Credit of interest from The Bank of London interest bearing account \\\n`INTEREST_MATURITY_CREDIT`: Credit of interest from The Bank of London Business Advantage Fixed Term Deposit Account \\\n`INTERNAL_CREDIT`: Inbound internal transfer (third party) \\ \n`INTERNAL_DEBIT_THIRD_PARTY`: Outbound internal transfer (third party) \\\n`INTERNAL_DEBIT_THIRD_PARTY_DR_IMM`: Outbound internal transfer (third party) \\\n`INTERNAL_SCHEDULED_CREDIT`: Scheduled inbound internal transfer (third party) \\\n`INTERNAL_SCHEDULED_CREDIT_OWN`: Scheduled inbound internal transfer \\\n`INTERNAL_SCHEDULED_DEBIT_THIRD_PARTY`: Scheduled outbound internal transfer (third party) \\\n`INTERNAL_TRANSFER_CREDIT`: Inbound internal transfer \\\n`MAINTENANCE_FEE_DEBIT`: Maintenance fee debitted from account \\\n`MATURITY_CREDIT`: Credit of interest from The Bank of London Business Advantage Fixed Term Deposit Account \\\n`OWN_SCHEDULED_DEBIT`: Scheduled outbound internal transfer \\\n`OWN_TRANSFER_DEBIT`: Outbound internal transfer \\\n`SERVICE_FEE_BACS_INBND`: BACS inbound fee \\\n`SERVICE_FEE_BACS_INTBNDTRF`: BACS Inbound Fee credited to account \\\n`SERVICE_FEE_BACS_OUTBND`: BACS outbound fee \\\n`SERVICE_FEE_BACS_OUTBNDTRF`: BACS Outbound Fee credited to account \\\n`SERVICE_FEE_CHAPS_INBND`: CHAPS inbound fee \\\n`SERVICE_FEE_CHAPS_INTBNDTRF`: CHAPS Inbound Fee credited to account \\\n`SERVICE_FEE_CHAPS_OUTBND`: CHAPS outbound fee \\\n`SERVICE_FEE_CHAPS_OUTBNDTRF`: CHAPS Outbound Fee credited to account \\\n`SERVICE_FEE_FPS_INBND`: FPS inbound fee \\\n`SERVICE_FEE_FPS_INTBNDTRF`: FPS Inbound Fee credited to account \\\n`SERVICE_FEE_FPS_OUTBND`: FPS outbound fee \\\n`SERVICE_FEE_FPS_OUTBNDTRF`: FPS Outbound Fee credited to account \\\n`SERVICE_FEE_SETTL_CR`: Maintenance fee credited to account \\\n`INBOUND_SERVICE_FEE`: An incoming transaction fee \\\n`MONTHLY_FEE`: A monthly fee \\\n`MONTHLY_FEE_REFUND`: A refund of the monthly fee \\\n`OUTBOUND_SERVICE_FEE`: An outgoing transaction fee \\\n`PENALTY_FEE`: Penalty fee \\\n`SERVICE_FEE_BACS_INCOMING`: Inbound Bacs service fee \\\n`SERVICE_FEE_BACS_OUTGOING`: Outbound Bacs service fee \\\n`SERVICE_FEE_CHAPS_INCOMING`: Inbound CHAPS service fee \\\n`SERVICE_FEE_CHAPS_OUTGOING`: Outbound CHAPS service fee \\\n`SERVICE_FEE_CORRECTION_ACCNT_DR`: Manual The Bank of London monthly account fee correction \\\n`SERVICE_FEE_CORRECTION_BACSINBND`: Manual BACS inbound service fee correction \\\n`SERVICE_FEE_CORRECTION_BACSINBND_CR`: Manual BACS inbound service fee correction \\\n`SERVICE_FEE_CORRECTION_BACSOUTBND`: Manual BACS outbound service fee correction \\\n`SERVICE_FEE_CORRECTION_BACSOUTBND_CR`: Manual BACS outbound service fee correction \\\n`SERVICE_FEE_CORRECTION_CHAPSINBND`: Manual CHAPS inbound service fee correction \\\n`SERVICE_FEE_CORRECTION_CHAPSINBND_CR`: Manual CHAPS inbound service fee correction \\\n`SERVICE_FEE_CORRECTION_CHAPSOUTBND`: Manual CHAPS outbound service fee correction \\\n`SERVICE_FEE_CORRECTION_CHAPSOUTBND_CR`: Manual CHAPS outbound service fee correction \\\n`SERVICE_FEE_CORRECTION_FPSINBND_CR`: Manual Faster Payments inbound service fee correction \\\n`SERVICE_FEE_CORRECTION_FPSINBND_DR`: Manual Faster Payments inbound service fee correction \\\n`SERVICE_FEE_CORRECTION_FPSOUTBND_CR`: Manual Faster Payments outbound service fee correction \\\n`SERVICE_FEE_CORRECTION_FPSOUTBND_DR`: Manual Faster Payments outbound service fee correction \\\n`SERVICE_FEE_CORRECTION_MAINT_CR`: Manual The Bank of London monthly account fee correction \\\n`SERVICE_FEE_REFUND_BACSINBND`: Refund of BACS inbound service fee \\\n`SERVICE_FEE_REFUND_BACSOUTBND`: Refund of BACS outbound service fee \\\n`SERVICE_FEE_REFUND_CHAPSINBND`: Refund of CHAPS inbound service fee \\\n`SERVICE_FEE_REFUND_CHAPSOUTBND`: Refund of CHAPS outbound service fee \\\n`SERVICE_FEE_REFUND_FPSINBND`: Refund of Faster Payments inbound service fee \\\n`SERVICE_FEE_REFUND_FPSOUTBND`: Refund of Faster Payments outbound service fee \\\n`SETUP_FEE_ONB_DR`: Setup fee \\\n`SWIFT_CREDIT`: International Payment received via SWIFT \\\n`VA_CLOSURE_SUSPENSE_CREDIT`: After virtual account closure credit on suspense virtual account \\\n",
        "enum": [
          "BACS_DIRECT_CREDIT_INBOUND",
          "BACS_DIRECT_CREDIT_OUTBOUND",
          "BACS_DIRECT_DEBIT_COLL",
          "BACS_DIRECT_DEBIT_FINALDDI",
          "BACS_DIRECT_DEBIT_FIRSTDDI",
          "BACS_DIRECT_DEBIT_REGULARDDI",
          "BACS_DIRECT_DEBIT_REPRES",
          "BACS_DIRECT_DEBIT_RETURN",
          "BACS_RECALL",
          "BACS_REFUND",
          "BACS_REVERSAL_DIRECTCREDIT",
          "BACS_REVERSAL_DIRECTDEBIT",
          "CHAPS_CREDIT",
          "CHAPS_DEBIT_OUTBND",
          "CHAPS_DEBIT_OUTBNDSOP",
          "CHAPS_RETURNED_CREDIT",
          "CHAPS_RETURNED_CREDIT_OUTBND",
          "FPS_CREDIT",
          "FPS_INTL_CREDIT",
          "FPS_DEBIT",
          "FPS_RETURN_CREDIT",
          "FPS_RETURNED_CREDIT",
          "FPS_SCHEDULED_DEBIT",
          "FPS_STANDING_ORDER_DEBIT",
          "INTEREST_CREDIT",
          "INTEREST_REBATE_CR",
          "INTEREST_REBATE_DR",
          "ACCOUNT_CLOSURE_CREDIT",
          "ACCOUNT_CLOSURE_CREDIT_COLL",
          "ACCOUNT_CLOSURE_DEBIT",
          "ACCOUNT_CLOSURE_DEBIT_OUTBND",
          "INTEREST_CREDIT_STLMNT_TRF",
          "INTEREST_MATURITY_CREDIT",
          "INTERNAL_CREDIT",
          "INTERNAL_DEBIT_THIRD_PARTY",
          "INTERNAL_DEBIT_THIRD_PARTY_DR_IMM",
          "INTERNAL_SCHEDULED_CREDIT",
          "INTERNAL_SCHEDULED_CREDIT_OWN",
          "INTERNAL_SCHEDULED_DEBIT_THIRD_PARTY",
          "INTERNAL_TRANSFER_CREDIT",
          "MAINTENANCE_FEE_DEBIT",
          "MATURITY_CREDIT",
          "OWN_SCHEDULED_DEBIT",
          "OWN_TRANSFER_DEBIT",
          "SERVICE_FEE_BACS_INBND",
          "SERVICE_FEE_BACS_INTBNDTRF",
          "SERVICE_FEE_BACS_OUTBND",
          "SERVICE_FEE_BACS_OUTBNDTRF",
          "SERVICE_FEE_CHAPS_INBND",
          "SERVICE_FEE_CHAPS_INTBNDTRF",
          "SERVICE_FEE_CHAPS_OUTBND",
          "SERVICE_FEE_CHAPS_OUTBNDTRF",
          "SERVICE_FEE_FPS_INBND",
          "SERVICE_FEE_FPS_INTBNDTRF",
          "SERVICE_FEE_FPS_OUTBND",
          "SERVICE_FEE_FPS_OUTBNDTRF",
          "SERVICE_FEE_SETTL_CR",
          "INBOUND_SERVICE_FEE",
          "MONTHLY_FEE",
          "MONTHLY_FEE_REFUND",
          "OUTBOUND_SERVICE_FEE",
          "PENALTY_FEE",
          "SERVICE_FEE_BACS_INCOMING",
          "SERVICE_FEE_BACS_OUTGOING",
          "SERVICE_FEE_CHAPS_INCOMING",
          "SERVICE_FEE_CHAPS_OUTGOING",
          "SERVICE_FEE_CORRECTION_ACCNT_DR",
          "SERVICE_FEE_CORRECTION_BACSINBND",
          "SERVICE_FEE_CORRECTION_BACSINBND_CR",
          "SERVICE_FEE_CORRECTION_BACSOUTBND",
          "SERVICE_FEE_CORRECTION_BACSOUTBND_CR",
          "SERVICE_FEE_CORRECTION_CHAPSINBND",
          "SERVICE_FEE_CORRECTION_CHAPSINBND_CR",
          "SERVICE_FEE_CORRECTION_CHAPSOUTBND",
          "SERVICE_FEE_CORRECTION_CHAPSOUTBND_CR",
          "SERVICE_FEE_CORRECTION_FPSINBND_CR",
          "SERVICE_FEE_CORRECTION_FPSINBND_DR",
          "SERVICE_FEE_CORRECTION_FPSOUTBND_CR",
          "SERVICE_FEE_CORRECTION_FPSOUTBND_DR",
          "SERVICE_FEE_CORRECTION_MAINT_CR",
          "SERVICE_FEE_REFUND_BACSINBND",
          "SERVICE_FEE_REFUND_BACSOUTBND",
          "SERVICE_FEE_REFUND_CHAPSINBND",
          "SERVICE_FEE_REFUND_CHAPSOUTBND",
          "SERVICE_FEE_REFUND_FPSINBND",
          "SERVICE_FEE_REFUND_FPSOUTBND",
          "SETUP_FEE_ONB_DR",
          "SWIFT_CREDIT",
          "VA_CLOSURE_SUSPENSE_CREDIT"
        ],
        "example": "INTERNAL_DEBIT_THIRD_PARTY"
      },
      "TransactionIsCreditQueryParam": {
        "type": "boolean",
        "description": "Returns the transactions that are credit (`isCredit=true`) or debit (`isCredit=false`). If not provided, both credit and debit transactions are returned.\n",
        "example": true
      },
      "TransactionSearch": {
        "type": "string",
        "description": "Enables transaction search by `sender.reference`, `recipient.reference`, `recipient.accountHolderName`, `typeDescription`, and `amount.value`. \n\nThe search is case-insensitive and supports partial matches. The search query must be a maximum of 30 characters.\n\nYou can include multiple words in the search query, separated by spaces. When multiple words are provided, the search returns transactions containing all the words in the query.\n\nIf an amount is specified, the search returns both credit and debit transactions matching that amount.\n\nTransactions are ordered by `createdDateTime` by default. You can change the order using the `orderBy` query parameter.\n",
        "maxLength": 30
      },
      "TransactionOrderBy": {
        "type": "string",
        "description": "Enables transactions to be ordered by specific fields.\n",
        "enum": [
          "CREATED_DATE_TIME_DESC",
          "CREATED_DATE_TIME_ASC",
          "RELEASE_DATE_TIME_DESC",
          "RELEASE_DATE_TIME_ASC"
        ],
        "example": "RELEASE_DATE_TIME_DESC",
        "default": "CREATED_DATE_TIME_DESC"
      },
      "TransactionId": {
        "type": "string",
        "description": "The Bank of London transaction ID identifies the transaction within the The Bank of London API platform.",
        "example": "0022484107DB1EED9D85FA3B8119427D001"
      },
      "PaymentTransactionType": {
        "type": "string",
        "description": "To be **deprecated** in the next version - please use `transactionContext.type` instead.\n\n<span style=\"color:#f46d2a\">**Attention**</span> \\\nPlease note that the allowed values for the **type** are\nextensible and new values can be added in the future without a\nmajor version change. Please ensure this is factored into your\napplication code.\n\nType of the transaction. \\\n`BACS_DIRECT_CREDIT_INBOUND`: Inbound BACS Direct Credit Payment \\\n`BACS_DIRECT_CREDIT_OUTBOUND`: Outbound BACS Direct Credit Payment \\\n`BACS_DIRECT_DEBIT_COLL`: BACS Direct Debit Outbound Collection \\\n`BACS_DIRECT_DEBIT_FINALDDI`: BACS Direct Debit Outbound Final Payment per Direct Debit Instruction \\\n`BACS_DIRECT_DEBIT_FIRSTDDI`: BACS Direct Debit Outbound First Payment per Direct Debit Instruction \\\n`BACS_DIRECT_DEBIT_REGULARDDI`: BACS Direct Debit Outbound Regular Payment per Direct Debit Instruction \\\n`BACS_DIRECT_DEBIT_REPRES`: BACS Direct Debit Unable to Apply First Time \\\n`BACS_DIRECT_DEBIT_RETURN`: Returned Bacs Direct Debit \\\n`BACS_RECALL`: Recall of BACS outbound direct credit \\\n`BACS_REFUND`: Refund of BACS outbound direct credit \\\n`BACS_REVERSAL_DIRECTCREDIT`: Reversal of BACS outbound direct credit \\\n`BACS_REVERSAL_DIRECTDEBIT`: Reversal of BACS outbound direct debit \\\n`CHAPS_CREDIT`: Inbound CHAPS payment \\\n`CHAPS_DEBIT_OUTBND`: Outbound CHAPS payment \\\n`CHAPS_DEBIT_OUTBNDSOP`: Outbound CHAPS payment \\\n`CHAPS_RETURNED_CREDIT`: Returned CHAPS credit \\\n`CHAPS_RETURNED_CREDIT_OUTBND`: Returned CHAPS credit for an Previous Outbound Transfer \\\n`FPS_CREDIT`: Inbound Faster Payment \\\n`FPS_CREDIT_REVERSED`: Inbound Faster Payment reversed by the scheme on timeout \\\n`FPS_RETURNED_CREDIT_REVERSED`: Returned outbound Faster Payment reversed by the scheme on timeout \\\n`FPS_INTL_CREDIT_REVERSED`: Inbound Faster Payment from overseas reversed by the scheme on timeout \\\n`FPS_INTL_CREDIT`: Inbound Faster Payment that originated overseas \\\n`FPS_DEBIT`: Outbound Faster Payment \\\n`FPS_RETURN_CREDIT`: Returned Faster Payments credit \\\n`FPS_RETURNED_CREDIT`: Returned outbound Faster Payment \\\n`FPS_SCHEDULED_DEBIT`: Outbound future dated payment Faster Payments. \\\n`FPS_STANDING_ORDER_DEBIT`: Outbound standing order payments Faster Payments \\\n`INTEREST_CREDIT`: Credit of interest from The Bank of London interest bearing account \\\n`INTEREST_REBATE_CR`: Rebate of interest from The Bank of London interest bearing account \\\n`INTEREST_REBATE_DR`: Rebate of interest from The Bank of London interest bearing account \\\n`ACCOUNT_CLOSURE_CREDIT`: Credit for account balance clear on closure of The Bank of London account. \\\n`ACCOUNT_CLOSURE_CREDIT_COLL`: Credit from collection authorization at closure of The Bank of London account \\\n`ACCOUNT_CLOSURE_DEBIT`: Debit for account balance clear on closure of The Bank of London account \\\n`ACCOUNT_CLOSURE_DEBIT_OUTBND`: Debit for account balance clear on closure of The Bank of London account, process an outbound payment to an external account \\\n`INTEREST_CREDIT_STLMNT_TRF`: Credit of interest from The Bank of London interest bearing account \\\n`INTEREST_MATURITY_CREDIT`: Credit of interest from The Bank of London Business Advantage Fixed Term Deposit Account \\\n`INTERNAL_CREDIT`: Inbound internal transfer (third party). \\ \n`INTERNAL_DEBIT_THIRD_PARTY`: Outbound internal transfer (third party) \\\n`INTERNAL_DEBIT_THIRD_PARTY_DR_IMM`: Outbound internal transfer (third party) \\\n`INTERNAL_SCHEDULED_CREDIT`: Scheduled inbound internal transfer (third party) \\\n`INTERNAL_SCHEDULED_CREDIT_OWN`: Scheduled inbound internal transfer \\\n`INTERNAL_SCHEDULED_DEBIT_THIRD_PARTY`: Scheduled outbound internal transfer (third party) \\\n`INTERNAL_TRANSFER_CREDIT`: Inbound internal transfer \\\n`MAINTENANCE_FEE_DEBIT`: Maintenance fee debitted from account \\\n`MATURITY_CREDIT`: Credit of interest from The Bank of London Business Advantage Fixed Term Deposit Account \\\n`OWN_SCHEDULED_DEBIT`: Scheduled outbound internal transfer \\\n`OWN_TRANSFER_DEBIT`: Outbound internal transfer \\\n`PENALTY_FEE`: Penalty fee \\\n`SERVICE_FEE_BACS_INBND`: BACS inbound fee \\\n`SERVICE_FEE_BACS_INTBNDTRF`: BACS Inbound Fee credited to account \\\n`SERVICE_FEE_BACS_OUTBND`: BACS outbound fee \\\n`SERVICE_FEE_BACS_OUTBNDTRF`: BACS Outbound Fee credited to account \\\n`SERVICE_FEE_CHAPS_INBND`: CHAPS inbound fee \\\n`SERVICE_FEE_CHAPS_INTBNDTRF`: CHAPS Inbound Fee credited to account \\\n`SERVICE_FEE_CHAPS_OUTBND`: CHAPS outbound fee \\\n`SERVICE_FEE_CHAPS_OUTBNDTRF`: CHAPS Outbound Fee credited to account \\\n`SERVICE_FEE_FPS_INBND`: FPS inbound fee \\\n`SERVICE_FEE_FPS_INTBNDTRF`: FPS Inbound Fee credited to account \\\n`SERVICE_FEE_FPS_OUTBND`: FPS outbound fee \\\n`SERVICE_FEE_FPS_OUTBNDTRF`: FPS Outbound Fee credited to account \\\n`SERVICE_FEE_SETTL_CR`: Maintenance fee credited to account \\\n`SWIFT_CREDIT`: International Payment received via SWIFT \\\n`VA_INITIAL_BALANCE_TRANSFER`: Distribution of the initial balance between suspense and virtual account \\\n`VA_BALANCING_ENTRY`: Contra posting to balance the difference between HoH and the total of all virtual accounts \\\n`VA_REVERSAL_WRITEOFF`: Reversal of transaction after virtual account closure \\\n`VA_CLOSURE_SUSPENSE_DEBIT`:  Debit for account balance clear on closure of The Bank of London account \\\n`VA_CLOSURE_SUSPENSE_CREDIT`: After virtual account closure credit on suspense virtual account \\\n",
        "enum": [
          "BACS_DIRECT_CREDIT_INBOUND",
          "BACS_DIRECT_CREDIT_OUTBOUND",
          "BACS_DIRECT_DEBIT_COLL",
          "BACS_DIRECT_DEBIT_FINALDDI",
          "BACS_DIRECT_DEBIT_FIRSTDDI",
          "BACS_DIRECT_DEBIT_REGULARDDI",
          "BACS_DIRECT_DEBIT_REPRES",
          "BACS_DIRECT_DEBIT_RETURN",
          "BACS_RECALL",
          "BACS_REFUND",
          "BACS_REVERSAL_DIRECTCREDIT",
          "BACS_REVERSAL_DIRECTDEBIT",
          "CHAPS_CREDIT",
          "CHAPS_DEBIT_OUTBND",
          "CHAPS_DEBIT_OUTBNDSOP",
          "CHAPS_RETURNED_CREDIT",
          "CHAPS_RETURNED_CREDIT_OUTBND",
          "FPS_CREDIT",
          "FPS_INTL_CREDIT",
          "FPS_DEBIT",
          "FPS_RETURN_CREDIT",
          "FPS_RETURNED_CREDIT",
          "FPS_SCHEDULED_DEBIT",
          "FPS_STANDING_ORDER_DEBIT",
          "ACCOUNT_CLOSURE_CREDIT",
          "ACCOUNT_CLOSURE_CREDIT_COLL",
          "ACCOUNT_CLOSURE_DEBIT",
          "ACCOUNT_CLOSURE_DEBIT_OUTBND",
          "INTEREST_CREDIT_STLMNT_TRF",
          "INTEREST_MATURITY_CREDIT",
          "INTERNAL_CREDIT",
          "INTERNAL_DEBIT_THIRD_PARTY",
          "INTERNAL_DEBIT_THIRD_PARTY_DR_IMM",
          "INTERNAL_SCHEDULED_CREDIT",
          "INTERNAL_SCHEDULED_CREDIT_OWN",
          "INTERNAL_SCHEDULED_DEBIT_THIRD_PARTY",
          "INTERNAL_TRANSFER_CREDIT",
          "MAINTENANCE_FEE_DEBIT",
          "MATURITY_CREDIT",
          "OWN_SCHEDULED_DEBIT",
          "OWN_TRANSFER_DEBIT",
          "PENALTY FEE",
          "SERVICE_FEE_BACS_INBND",
          "SERVICE_FEE_BACS_INTBNDTRF",
          "SERVICE_FEE_BACS_OUTBND",
          "SERVICE_FEE_BACS_OUTBNDTRF",
          "SERVICE_FEE_CHAPS_INBND",
          "SERVICE_FEE_CHAPS_INTBNDTRF",
          "SERVICE_FEE_CHAPS_OUTBND",
          "SERVICE_FEE_CHAPS_OUTBNDTRF",
          "SERVICE_FEE_FPS_INBND",
          "SERVICE_FEE_FPS_INTBNDTRF",
          "SERVICE_FEE_SETTL_CR",
          "SWIFT_CREDIT",
          "VA_INITIAL_BALANCE_TRANSFER",
          "VA_BALANCING_ENTRY",
          "VA_REVERSAL_WRITEOFF",
          "VA_CLOSURE_SUSPENSE_DEBIT",
          "VA_CLOSURE_SUSPENSE_CREDIT"
        ],
        "example": "INTERNAL_DEBIT_THIRD_PARTY"
      },
      "TransactionTypeDescription": {
        "type": "string",
        "description": "To be **deprecated** in the next version - please use `transactionContext.typeDescription` instead.\n\nA short description of the transaction type.\n",
        "example": "Internal transfer"
      },
      "TransactionAccountIdentifierTbol": {
        "type": "object",
        "title": "TBOL",
        "properties": {
          "type": {
            "type": "string",
            "enum": ["TBOL"]
          },
          "accountId": {
            "$ref": "#/components/schemas/AccountId"
          },
          "accountHolderName": {
            "type": "string",
            "description": "Name of the account holder which is issuing or receiving a payment.",
            "example": "John Smith"
          },
          "sortCode": {
            "$ref": "#/components/schemas/UkSortCode"
          },
          "accountNumber": {
            "$ref": "#/components/schemas/UkAccountNumber"
          }
        },
        "required": ["type", "accountId", "sortCode", "accountNumber", "accountHolderName"]
      },
      "TransactionAccountIdentifierUk": {
        "type": "object",
        "title": "UK",
        "properties": {
          "type": {
            "type": "string",
            "enum": ["UK"]
          },
          "sortCode": {
            "$ref": "#/components/schemas/UkSortCode"
          },
          "accountNumber": {
            "$ref": "#/components/schemas/UkAccountNumber"
          },
          "accountHolderName": {
            "type": "string",
            "description": "Name of the account holder which is issuing or receiving a payment.",
            "example": "John Smith"
          }
        },
        "required": ["type", "sortCode", "accountNumber", "accountHolderName"]
      },
      "TransactionAccountIdentifierSepa": {
        "type": "object",
        "title": "SEPA (Coming Soon)",
        "properties": {
          "type": {
            "type": "string",
            "enum": ["SEPA"]
          },
          "iban": {
            "$ref": "#/components/schemas/Iban"
          },
          "accountHolderName": {
            "type": "string",
            "description": "Name of the account holder which is issuing or receiving a payment.",
            "example": "John Smith"
          }
        },
        "required": ["type", "iban", "accountHolderName"]
      },
      "TransactionSender": {
        "description": "<span style=\"color:#f46d2a\">**Attention**</span> \\\nPlease note that the sender is a oneOf object linked to the **type** in the object. \nThe **sender** oneOf is extensible and new sender types can be added in the future without a\nmajor version change. Please ensure this is factored into your\napplication code.\n\nRepresents the details of the transaction sender.\n",
        "oneOf": [
          {
            "$ref": "#/components/schemas/TransactionAccountIdentifierTbol"
          },
          {
            "$ref": "#/components/schemas/TransactionAccountIdentifierUk"
          },
          {
            "$ref": "#/components/schemas/TransactionAccountIdentifierSepa"
          }
        ]
      },
      "TransactionRecipient": {
        "description": "<span style=\"color:#f46d2a\">**Attention**</span> \\\nPlease note that the recipient is a oneOf object linked to the **type** in the object. \nThe **recipient** oneOf is extensible and new recipient types can be added in the future without a\nmajor version change. Please ensure this is factored into your\napplication code.\n\nRepresents the details of the transaction recipient.\n",
        "oneOf": [
          {
            "$ref": "#/components/schemas/TransactionAccountIdentifierTbol"
          },
          {
            "$ref": "#/components/schemas/TransactionAccountIdentifierUk"
          },
          {
            "$ref": "#/components/schemas/TransactionAccountIdentifierSepa"
          }
        ]
      },
      "TransactionReference": {
        "type": "string",
        "nullable": true,
        "description": "An arbitrary string attached to the transaction.",
        "example": "INV-12345"
      },
      "TransactionIsCredit": {
        "type": "boolean",
        "description": "To be **deprecated** in the next version - please use `transactionContext.isCredit` instead.\n\nBoolean, where `true` means credit, `false` stands for debit.\n",
        "example": true
      },
      "TransactionNotes": {
        "type": "string",
        "nullable": true,
        "description": "An arbitrary string attached to the transaction. Max length is 140 characters.",
        "example": "My transaction"
      },
      "TransactionAmount": {
        "type": "object",
        "properties": {
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "value": {
            "type": "number",
            "description": "The amounts value assuming the provided unit under currency.",
            "format": "double",
            "example": 4320.5
          }
        },
        "required": ["currency", "value"]
      },
      "schemas-TransactionAmount": {
        "allOf": [
          {
            "description": "The monetary value of the transaction as booked on The Bank of London account"
          },
          {
            "$ref": "#/components/schemas/TransactionAmount"
          }
        ]
      },
      "TransactionPostingDate": {
        "type": "string",
        "description": "The date when the transaction was posted and is reflected on the balance of an account.",
        "format": "date",
        "example": "2022-10-07"
      },
      "TransactionReleaseDateTime": {
        "type": "string",
        "nullable": true,
        "description": "The date when the transaction was released. This date is generally the same as the posting date unless the transaction was delayed awaiting approval.",
        "format": "date-time",
        "example": "2022-10-07T08:55:33.213Z"
      },
      "TransactionValueDate": {
        "type": "string",
        "description": "The date and time when the transaction was actually valued. This is generally the same as the posting date unless the transaction takes place on a weekend or bank holiday.",
        "format": "date",
        "example": "2022-10-07"
      },
      "TransactionCreatedDateTime": {
        "type": "string",
        "description": "The date when the transaction was created.",
        "format": "date-time",
        "example": "2022-10-07T08:55:33.213Z"
      },
      "AccountBalance": {
        "type": "number",
        "format": "double",
        "example": 5000
      },
      "Account1": {
        "type": "object",
        "properties": {
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "balance": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountBalance"
              },
              {
                "description": "The balance of the account after the transaction has been processed."
              }
            ]
          }
        },
        "required": ["currency", "balance"]
      },
      "TransactionStatus": {
        "type": "object",
        "description": "<span style=\"color:#f46d2a\">**Attention**</span> \\\nPlease note that the status is a oneOf object linked to the **identifier** in the object. \nThe **status** oneOf, based on the **identifier** is extensible and new status identifiers can be added in the future without a\nmajor version change. Please ensure this is factored into your application code.\n\nThe processing status of a single transaction.\n",
        "oneOf": [
          {
            "type": "object",
            "title": "SUCCESSFUL",
            "properties": {
              "identifier": {
                "type": "string",
                "description": "The transaction has been processed and posted.",
                "enum": ["SUCCESSFUL"]
              }
            },
            "required": ["identifier"]
          }
        ]
      },
      "PaymentOrderId": {
        "type": "string",
        "nullable": true,
        "description": "An ID that allows the linkage of a transaction and a payment",
        "example": "S4B1  20240510000000065638"
      },
      "TransactionContext": {
        "type": "object",
        "description": "Defines how the transaction originated.\n",
        "properties": {
          "type": {
            "type": "string",
            "description": "<span style=\"color:#f46d2a\">**Attention**</span> \\\nPlease note that the allowed values for the **type** are\nextensible and new values can be added in the future without a\nmajor version change. Please ensure this is factored into your\napplication code.\n\n`PAYMENT`: movement of funds which results in debit or credit on a TBOL account, but the other side of the transaction is external to TBOL (the funds were received by TBOL from external sender, or left TBOL to external beneficiary) \\\n`DIRECT_DEBIT`: movement of funds which requires a mandate in order to be executed. Currently only applicable to Bacs.  \\\n`TRANSFER`: movement of funds between accounts of the same customer within TBOL. \\\n`INTERNAL_TRANSFER`: movement of funds between TBOL accounts held by different customers. \\\n`FEE`: any type of fee deducted for periodic billing or other operational processes. \\\n`INTEREST`: any type of interest applied to TBOL account`\n",
            "enum": ["PAYMENT", "DIRECT_DEBIT", "TRANSFER", "INTERNAL_TRANSFER", "FEE", "INTEREST"]
          },
          "typeDescription": {
            "type": "string",
            "description": "A short description of the transaction type."
          },
          "isCredit": {
            "type": "boolean",
            "description": "Boolean, where `true` means credit, `false` stands for debit."
          },
          "isReturn": {
            "type": "boolean",
            "description": "Boolean, where `true` means the funds are returned (depending on the original payment direction could be a debit or a credit), otherwise `false` implying a fresh payment."
          },
          "scheme": {
            "type": "string",
            "description": "<span style=\"color:#f46d2a\">**Attention**</span> \\\nPlease note that the allowed values for the **scheme** are extensible and\nnew values can be added in the future without a major version\nchange. Please ensure this is factored into your application code.\n\nPayment rails for underlying transactions, where `INTERNAL` means\nboth sides of the transactions completed within The Bank of London.\n",
            "enum": ["FPS", "BACS", "CHAPS", "INTERNAL"]
          },
          "channel": {
            "type": "string",
            "nullable": true,
            "description": "<span style=\"color:#f46d2a\">**Attention**</span> \\\nPlease note that the allowed values for the **channel** are\nextensible and new values can be added in the future without a\nmajor version change. Please ensure this is factored into your\napplication code.\n\nOnly used for payments initiated by The Bank of London clients, otherwise null is\nreturned. It confirms payments initiation channel used to instruct\nthe payment.\n",
            "enum": ["BACK_OFFICE", "STANDING_ORDER", "ACCOUNT_CLOSURE"]
          }
        },
        "required": ["type", "scheme", "isReturn", "isCredit", "typeDescription"]
      },
      "PaymentTransaction": {
        "type": "object",
        "title": "Payment Transaction",
        "description": "An incoming or outgoing transaction with a sender and recipient.",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/TransactionId"
          },
          "type": {
            "$ref": "#/components/schemas/PaymentTransactionType"
          },
          "typeDescription": {
            "$ref": "#/components/schemas/TransactionTypeDescription"
          },
          "sender": {
            "$ref": "#/components/schemas/TransactionSender"
          },
          "recipient": {
            "$ref": "#/components/schemas/TransactionRecipient"
          },
          "reference": {
            "$ref": "#/components/schemas/TransactionReference"
          },
          "isCredit": {
            "$ref": "#/components/schemas/TransactionIsCredit"
          },
          "notes": {
            "$ref": "#/components/schemas/TransactionNotes"
          },
          "amount": {
            "$ref": "#/components/schemas/schemas-TransactionAmount"
          },
          "postingDate": {
            "$ref": "#/components/schemas/TransactionPostingDate"
          },
          "releaseDateTime": {
            "$ref": "#/components/schemas/TransactionReleaseDateTime"
          },
          "valueDate": {
            "$ref": "#/components/schemas/TransactionValueDate"
          },
          "createdDateTime": {
            "$ref": "#/components/schemas/TransactionCreatedDateTime"
          },
          "account": {
            "$ref": "#/components/schemas/Account1"
          },
          "status": {
            "$ref": "#/components/schemas/TransactionStatus"
          },
          "paymentOrderId": {
            "$ref": "#/components/schemas/PaymentOrderId"
          },
          "transactionContext": {
            "$ref": "#/components/schemas/TransactionContext"
          }
        },
        "required": [
          "id",
          "type",
          "typeDescription",
          "sender",
          "recipient",
          "amount",
          "valueDate",
          "postingDate",
          "createdDateTime",
          "account",
          "status",
          "isCredit",
          "transactionContext"
        ]
      },
      "FeeInterestTransactionType": {
        "description": "<span style=\"color:#f46d2a\">**Attention**</span> \\\nPlease note that the allowed values for the **type** are\nextensible and new values can be added in the future without a\nmajor version change. Please ensure this is factored into your\napplication code.\n\nType of the transaction. \\\n`INTEREST_CREDIT`: Credit of interest from The Bank of London interest bearing account \\\n`INTEREST_REBATE_CR`: Rebate of interest from The Bank of London interest bearing account \\\n`INTEREST_REBATE_DR`: Rebate of interest from The Bank of London interest bearing account \\\n`INBOUND_SERVICE_FEE`: An incoming transaction fee \\\n`MONTHLY_FEE`: A monthly fee \\\n`MONTHLY_FEE_REFUND`: A refund of the monthly fee \\\n`OUTBOUND_SERVICE_FEE`: An outgoing transaction fee \\\n`SERVICE_FEE_BACS_INCOMING`: Inbound Bacs service fee \\\n`SERVICE_FEE_BACS_OUTGOING`: Outbound Bacs service fee \\\n`SERVICE_FEE_CHAPS_INCOMING`: Inbound CHAPS service fee \\\n`SERVICE_FEE_CHAPS_OUTGOING`: Outbound CHAPS service fee \\\n`SERVICE_FEE_CORRECTION_ACCNT_DR`: Manual The Bank of London monthly account fee correction \\\n`SERVICE_FEE_CORRECTION_BACSINBND`: Manual BACS inbound service fee correction \\\n`SERVICE_FEE_CORRECTION_BACSINBND_CR`: Manual BACS inbound service fee correction \\\n`SERVICE_FEE_CORRECTION_BACSOUTBND`: Manual BACS outbound service fee correction \\\n`SERVICE_FEE_CORRECTION_BACSOUTBND_CR`: Manual BACS outbound service fee correction \\\n`SERVICE_FEE_CORRECTION_CHAPSINBND`: Manual CHAPS inbound service fee correction \\\n`SERVICE_FEE_CORRECTION_CHAPSINBND_CR`: Manual CHAPS inbound service fee correction \\\n`SERVICE_FEE_CORRECTION_CHAPSOUTBND`: Manual CHAPS outbound service fee correction \\\n`SERVICE_FEE_CORRECTION_CHAPSOUTBND_CR`: Manual CHAPS outbound service fee correction \\\n`SERVICE_FEE_CORRECTION_FPSINBND_CR`: Manual Faster Payments inbound service fee correction \\\n`SERVICE_FEE_CORRECTION_FPSINBND_DR`: Manual Faster Payments inbound service fee correction \\\n`SERVICE_FEE_CORRECTION_FPSOUTBND_CR`: Manual Faster Payments outbound service fee correction \\\n`SERVICE_FEE_CORRECTION_FPSOUTBND_DR`: Manual Faster Payments outbound service fee correction \\\n`SERVICE_FEE_CORRECTION_MAINT_CR`: Manual The Bank of London monthly account fee correction \\\n`SERVICE_FEE_REFUND_BACSINBND`: Refund of BACS inbound service fee \\\n`SERVICE_FEE_REFUND_BACSOUTBND`: Refund of BACS outbound service fee \\\n`SERVICE_FEE_REFUND_CHAPSINBND`: Refund of CHAPS inbound service fee \\\n`SERVICE_FEE_REFUND_CHAPSOUTBND`: Refund of CHAPS outbound service fee \\\n`SERVICE_FEE_REFUND_FPSINBND`: Refund of Faster Payments inbound service fee \\\n`SERVICE_FEE_REFUND_FPSOUTBND`: Refund of Faster Payments outbound service fee \\\n`SETUP_FEE_ONB_DR`: Setup fee\n",
        "type": "string",
        "enum": [
          "INBOUND_SERVICE_FEE",
          "INTEREST_CREDIT",
          "INTEREST_REBATE_CR",
          "INTEREST_REBATE_DR",
          "MONTHLY_FEE",
          "MONTHLY_FEE_REFUND",
          "OUTBOUND_SERVICE_FEE",
          "SERVICE_FEE_BACS_INCOMING",
          "SERVICE_FEE_BACS_OUTGOING",
          "SERVICE_FEE_CHAPS_INCOMING",
          "SERVICE_FEE_CHAPS_OUTGOING",
          "SERVICE_FEE_CORRECTION_ACCNT_DR",
          "SERVICE_FEE_CORRECTION_BACSINBND",
          "SERVICE_FEE_CORRECTION_BACSINBND_CR",
          "SERVICE_FEE_CORRECTION_BACSOUTBND",
          "SERVICE_FEE_CORRECTION_BACSOUTBND_CR",
          "SERVICE_FEE_CORRECTION_CHAPSINBND",
          "SERVICE_FEE_CORRECTION_CHAPSINBND_CR",
          "SERVICE_FEE_CORRECTION_CHAPSOUTBND",
          "SERVICE_FEE_CORRECTION_CHAPSOUTBND_CR",
          "SERVICE_FEE_CORRECTION_FPSINBND_CR",
          "SERVICE_FEE_CORRECTION_FPSINBND_DR",
          "SERVICE_FEE_CORRECTION_FPSOUTBND_CR",
          "SERVICE_FEE_CORRECTION_FPSOUTBND_DR",
          "SERVICE_FEE_CORRECTION_MAINT_CR",
          "SERVICE_FEE_REFUND_BACSINBND",
          "SERVICE_FEE_REFUND_BACSOUTBND",
          "SERVICE_FEE_REFUND_CHAPSINBND",
          "SERVICE_FEE_REFUND_CHAPSOUTBND",
          "SERVICE_FEE_REFUND_FPSINBND",
          "SERVICE_FEE_REFUND_FPSOUTBND",
          "SETUP_FEE_ONB_DR"
        ],
        "example": "MONTHLY_FEE"
      },
      "FeeInterestTransactionSender": {
        "description": "<span style=\"color:#f46d2a\">**Attention**</span> \\\nPlease note that the sender is a oneOf object linked to the **type** in the object. \nThe **sender** oneOf is extensible and new sender types can be added in the future without a\nmajor version change. Please ensure this is factored into your\napplication code.\n\nRepresents the details of the transaction sender. This field is populated for Fee (Debit) transactions.\n",
        "oneOf": [
          {
            "$ref": "#/components/schemas/TransactionAccountIdentifierTbol"
          }
        ]
      },
      "FeeInterestTransactionRecipient": {
        "description": "<span style=\"color:#f46d2a\">**Attention**</span> \\\nPlease note that the recipient is a oneOf object linked to the **type** in the object. \nThe **recipient** oneOf is extensible and new recipient types can be added in the future without a\nmajor version change. Please ensure this is factored into your\napplication code.\n\nRepresents the details of the transaction recipient. This is populated for Interest (Credit) transactions.\n",
        "oneOf": [
          {
            "$ref": "#/components/schemas/TransactionAccountIdentifierTbol"
          }
        ]
      },
      "FeeInterestTransaction": {
        "type": "object",
        "title": "Fee/Interest Transaction",
        "description": "A transaction for fee or earned interest.",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/TransactionId"
          },
          "type": {
            "$ref": "#/components/schemas/FeeInterestTransactionType"
          },
          "typeDescription": {
            "$ref": "#/components/schemas/TransactionTypeDescription"
          },
          "sender": {
            "$ref": "#/components/schemas/FeeInterestTransactionSender"
          },
          "recipient": {
            "$ref": "#/components/schemas/FeeInterestTransactionRecipient"
          },
          "amount": {
            "$ref": "#/components/schemas/schemas-TransactionAmount"
          },
          "postingDate": {
            "$ref": "#/components/schemas/TransactionPostingDate"
          },
          "releaseDateTime": {
            "$ref": "#/components/schemas/TransactionReleaseDateTime"
          },
          "valueDate": {
            "$ref": "#/components/schemas/TransactionValueDate"
          },
          "createdDateTime": {
            "$ref": "#/components/schemas/TransactionCreatedDateTime"
          },
          "account": {
            "$ref": "#/components/schemas/Account2"
          },
          "status": {
            "$ref": "#/components/schemas/TransactionStatus"
          },
          "isCredit": {
            "$ref": "#/components/schemas/TransactionIsCreditQueryParam"
          },
          "transactionContext": {
            "$ref": "#/components/schemas/TransactionContext"
          }
        },
        "required": [
          "id",
          "type",
          "typeDescription",
          "amount",
          "valueDate",
          "postingDate",
          "createdDateTime",
          "account",
          "status",
          "isCredit",
          "transactionContext"
        ]
      },
      "AggregatorNodeHeaderAccountId": {
        "type": "string",
        "description": "The head of hierarchy account associated with the aggregator node.",
        "example": "GB-042972-98824239"
      },
      "AggregatorNodeId": {
        "type": "string",
        "nullable": false,
        "description": "ID of an aggregator node.",
        "example": "0000000012"
      },
      "AggregatorNodeAccountOwner": {
        "type": "object",
        "description": "Owner of the aggregator node. When it has not been specified the aggregator node will be owned directly by your organisation.",
        "properties": {
          "type": {
            "type": "string",
            "description": "<span style=\"color:#f46d2a\">**Attention**</span> \\\nPlease note that the allowed values for the **type** are\nextensible and new can be added in the future without a\nmajor version change. Please ensure this is factored into your\napplication code.\n\nThe type of owner\n",
            "enum": ["INDIVIDUAL", "ORGANISATION"]
          },
          "id": {
            "type": "string",
            "description": "The owner's ID",
            "example": "hkHcJybfBAKjZac9eiIAr"
          }
        },
        "required": ["type", "id"],
        "nullable": true
      },
      "AggregatorNodeName": {
        "type": "string",
        "nullable": false,
        "description": "User defined name to identify the aggregator node.",
        "example": "My node",
        "minLength": 1,
        "maxLength": 60
      },
      "ParentAggregatorNodeId": {
        "type": "string",
        "description": "ID of parent Virtual Aggregator Node.",
        "example": "0000000355"
      },
      "AggregatorNodeResponse": {
        "type": "object",
        "title": "Aggregator Node Response",
        "description": "Response object for aggregator node operations.",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/AggregatorNodeId"
          },
          "headerAccountId": {
            "$ref": "#/components/schemas/AggregatorNodeHeaderAccountId"
          },
          "owner": {
            "$ref": "#/components/schemas/AggregatorNodeAccountOwner"
          },
          "name": {
            "$ref": "#/components/schemas/AggregatorNodeName"
          },
          "parentVirtualAggregatorNodeId": {
            "$ref": "#/components/schemas/ParentAggregatorNodeId"
          }
        },
        "required": ["id", "headerAccountId", "name", "parentVirtualAggregatorNodeId"]
      },
      "ParentAggregatorNodeIdRequest": {
        "type": "string",
        "nullable": true,
        "description": "This allows you to set where in the virtual hierarchy your virtual aggregator node will be positioned. Virtual aggregator nodes can be nested one under another if required. When parentVirtualAggregatorNodeId is not provided, the virtual aggregator node you are creating will be placed under the default virtual aggregator node at the top of your hierarchy. The ID of the default virtual aggregator node is returned in the response.",
        "example": "0000000012"
      },
      "CreateAggregatorNodeRequest": {
        "type": "object",
        "title": "Create Aggregator Node Request",
        "description": "Request object that is required to create an aggregator node",
        "properties": {
          "headerAccountId": {
            "$ref": "#/components/schemas/AggregatorNodeHeaderAccountId"
          },
          "parentVirtualAggregatorNodeId": {
            "$ref": "#/components/schemas/ParentAggregatorNodeIdRequest"
          },
          "name": {
            "$ref": "#/components/schemas/AggregatorNodeName"
          },
          "owner": {
            "$ref": "#/components/schemas/AggregatorNodeAccountOwner"
          }
        },
        "required": ["headerAccountId", "name"]
      },
      "CreateParentAggregatorNodeIdResponse": {
        "type": "string",
        "description": "ID of parent Virtual Aggregator Node as specified in the request. Where it wasn't specified in the request this is the ID of the default virtual aggregator node at the top of your hierarchy.",
        "example": "0000000355"
      },
      "CreateAggregatorNodeResponse": {
        "type": "object",
        "title": "Aggregator Node Response",
        "description": "Response object for created virtual aggregator node.",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/AggregatorNodeId"
          },
          "headerAccountId": {
            "$ref": "#/components/schemas/AggregatorNodeHeaderAccountId"
          },
          "owner": {
            "$ref": "#/components/schemas/AggregatorNodeAccountOwner"
          },
          "name": {
            "$ref": "#/components/schemas/AggregatorNodeName"
          },
          "parentVirtualAggregatorNodeId": {
            "$ref": "#/components/schemas/CreateParentAggregatorNodeIdResponse"
          }
        },
        "required": ["id", "headerAccountId", "name", "parentVirtualAggregatorNodeId"]
      },
      "VirtualAccountCount": {
        "type": "number",
        "description": "A count of the virtual accounts under the virtual aggregator node. This includes those both directly and indirectly below the node.",
        "example": 201
      },
      "AggregatedBalance": {
        "type": "number",
        "description": "The sum of the balances of the virtual accounts under the virtual aggregator node. This includes the balances of virtual accounts both directly and indirectly below the node.",
        "format": "double",
        "example": 1000
      },
      "GetAggregatorNodeResponse": {
        "type": "object",
        "title": "Get Aggregator Node Response",
        "description": "Get aggregator node response object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/AggregatorNodeId"
          },
          "headerAccountId": {
            "$ref": "#/components/schemas/AggregatorNodeHeaderAccountId"
          },
          "owner": {
            "$ref": "#/components/schemas/AggregatorNodeAccountOwner"
          },
          "name": {
            "$ref": "#/components/schemas/AggregatorNodeName"
          },
          "parentVirtualAggregatorNodeId": {
            "$ref": "#/components/schemas/ParentAggregatorNodeId"
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "virtualAccountCount": {
            "$ref": "#/components/schemas/VirtualAccountCount"
          },
          "aggregatedBalance": {
            "$ref": "#/components/schemas/AggregatedBalance"
          }
        },
        "required": [
          "id",
          "name",
          "headerAccountId",
          "parentVirtualAggregatorNodeId",
          "currency",
          "virtualAccountCount",
          "aggregatedBalance"
        ]
      },
      "UpdateAggregatorNodeRequest": {
        "type": "object",
        "title": "Update Aggregator Node Request",
        "description": "Request object that is required to update an aggregator node.",
        "properties": {
          "name": {
            "$ref": "#/components/schemas/AggregatorNodeName"
          },
          "parentVirtualAggregatorNodeId": {
            "$ref": "#/components/schemas/ParentAggregatorNodeId"
          }
        },
        "oneOf": [
          {
            "properties": {
              "name": {
                "$ref": "#/components/schemas/AggregatorNodeName"
              }
            },
            "required": ["name"]
          },
          {
            "properties": {
              "parentVirtualAggregatorNodeId": {
                "$ref": "#/components/schemas/ParentAggregatorNodeId"
              }
            },
            "required": ["parentVirtualAggregatorNodeId"]
          }
        ]
      },
      "GetHierarchyResponse": {
        "type": "object",
        "title": "Get Hierarchy Response",
        "description": "Get Hierarchy response object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of an element i.e. the header account ID, the virtual aggregator node ID or the virtual account ID.",
            "example": "GB-040075-87654321"
          },
          "level": {
            "type": "string",
            "description": "The level of the hierarchy at which the element is positioned. This position is dynamic, so if levels are added or removed from the hierarchy then the hierarchy level for a particular element could change next time you retrieve the hierarchy. E.g. If a virtual aggregator node is added above a virtual account then the level of the virtual account would increase by one.",
            "example": "1.1.1"
          },
          "name": {
            "type": "string",
            "description": "The name that has been given to the element.",
            "example": "My node"
          },
          "type": {
            "type": "string",
            "description": "The type of element that is being returned.",
            "example": "VIRTUAL_ACCOUNT"
          }
        },
        "required": ["id", "level", "name", "type"]
      },
      "ConfirmationOfPayeeType": {
        "type": "string",
        "title": "Confirmation of Payee Type",
        "description": "The type of Confirmation of Payee check to perform.",
        "enum": ["UK"],
        "example": "UK"
      },
      "ConfirmationOfPayeeName": {
        "type": "string",
        "title": "Confirmation of Payee Name",
        "description": "The name to check against the account details. Payee name should not include titles, e.g. Mr, Mrs, Miss, Ms, Dr, etc.",
        "example": "John Smith",
        "minLength": 1,
        "maxLength": 140
      },
      "ConfirmationOfPayeeAccountType": {
        "type": "string",
        "title": "Confirmation of Payee Account Type",
        "description": "The type of account to check against.",
        "example": "PERSONAL",
        "enum": ["PERSONAL", "BUSINESS"]
      },
      "ConfirmationOfPayeeSortCode": {
        "type": "string",
        "title": "Confirmation of Payee Sort Code",
        "description": "The sort code of the account to check against.",
        "example": "000000",
        "minLength": 6,
        "maxLength": 6
      },
      "ConfirmationOfPayeeAccountNumber": {
        "type": "string",
        "title": "Confirmation of Payee Account Number",
        "description": "The account number to check against.",
        "example": "00000000",
        "minLength": 8,
        "maxLength": 8
      },
      "ConfirmationOfPayeeRequest": {
        "type": "object",
        "title": "Confirmation of Payee Request",
        "description": "The request to perform a Confirmation of Payee check.\n",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/ConfirmationOfPayeeType"
          },
          "name": {
            "$ref": "#/components/schemas/ConfirmationOfPayeeName"
          },
          "accountType": {
            "$ref": "#/components/schemas/ConfirmationOfPayeeAccountType"
          },
          "sortCode": {
            "$ref": "#/components/schemas/ConfirmationOfPayeeSortCode"
          },
          "accountNumber": {
            "$ref": "#/components/schemas/ConfirmationOfPayeeAccountNumber"
          }
        },
        "required": ["type", "name", "accountType", "sortCode", "accountNumber"]
      },
      "ConfirmationOfPayeeResultStatus.CONFIRMED": {
        "type": "string",
        "title": "Confirmation of Payee Confirmed Status",
        "description": "The status identifier for a confirmed Confirmation of Payee check.",
        "enum": ["CONFIRMED"]
      },
      "ConfirmationOfPayeeConfirmedResponse": {
        "type": "object",
        "title": "Confirmation of Payee Confirmed Response",
        "description": "The response from a confirmed Confirmation of Payee check.\n",
        "properties": {
          "status": {
            "type": "object",
            "properties": {
              "identifier": {
                "$ref": "#/components/schemas/ConfirmationOfPayeeResultStatus.CONFIRMED"
              }
            },
            "required": ["identifier"]
          }
        },
        "required": ["status"]
      },
      "NullableConfirmationOfPayeeName": {
        "type": "string",
        "title": "Confirmation of Payee Name",
        "description": "The name to check against the account details. Payee name should not include titles, e.g. Mr, Mrs, Miss, Ms, Dr, etc.",
        "example": "John Smith",
        "minLength": 1,
        "maxLength": 140,
        "nullable": true
      },
      "ConfirmationOfPayeeResultStatus.REJECTED": {
        "type": "string",
        "title": "Confirmation of Payee Rejected Status",
        "description": "The status identifier for a rejected Confirmation of Payee check.",
        "enum": ["REJECTED"]
      },
      "ConfirmationOfPayeeReasonCode": {
        "type": "string",
        "title": "Confirmation of Payee Reason Code",
        "description": "The reason code for a rejected Confirmation of Payee check.",
        "enum": [
          "AC01",
          "ACNS",
          "ANNM",
          "BAMM",
          "BANM",
          "CASS",
          "IVCR",
          "MBAM",
          "OPTO",
          "PAMM",
          "PANM",
          "SCNS"
        ]
      },
      "ConfirmationOfPayeeReason": {
        "type": "string",
        "title": "Confirmation of Payee Reason",
        "description": "The reason for a rejected Confirmation of Payee check.",
        "enum": [
          "There is no account with the provided account number",
          "Account does not support Confirmation of Payee scheme",
          "Name does not match the account name",
          "Name is a close match to the account name. The type of account is 'Business' when 'Personal' was provided in the request",
          "Name is a match to the account name. The type of account is 'Business' when 'Personal' was provided in the request",
          "Account has been switched using the Current Account Switching Service (CASS)",
          "Unable to locate account based on secondary identification data",
          "Name is a close match to the account name",
          "Account has opted out of Confirmation of Payee scheme",
          "Name is a close match to the account name. The type of account is 'Personal' when 'Business' was provided in the request",
          "Name is a match to the account name. The type of account is 'Personal' when 'Business' was provided in the request",
          "Responder has received a Confirmation of Payee request specifying a sort code that does not belong to them"
        ]
      },
      "ConfirmationOfPayeeRejectedResponse": {
        "type": "object",
        "title": "Confirmation of Payee Rejected Response",
        "description": "The response from a rejected Confirmation of Payee check.\n",
        "properties": {
          "actualPayeeName": {
            "$ref": "#/components/schemas/NullableConfirmationOfPayeeName"
          },
          "status": {
            "type": "object",
            "properties": {
              "identifier": {
                "$ref": "#/components/schemas/ConfirmationOfPayeeResultStatus.REJECTED"
              },
              "detailedStatusIdentifier": {
                "$ref": "#/components/schemas/ConfirmationOfPayeeReasonCode"
              },
              "reason": {
                "$ref": "#/components/schemas/ConfirmationOfPayeeReason"
              }
            },
            "required": ["identifier", "detailedStatusIdentifier", "reason"]
          }
        },
        "required": ["status"]
      },
      "ConfirmationOfPayeeResultStatus.FAILED": {
        "type": "string",
        "title": "Confirmation of Payee Failed Status",
        "description": "The status identifier for a failed Confirmation of Payee check.",
        "enum": ["FAILED"]
      },
      "ConfirmationOfPayeeFailureCode": {
        "type": "string",
        "title": "Confirmation of Payee Failure Code",
        "description": "The failure code for a failed Confirmation of Payee check.",
        "enum": [
          "NOT_REGISTERED_WITH_RESPONDER",
          "RESPONDER_NOT_A_PARTICIPANT",
          "RESPONDER_NOT_FOUND",
          "RESPONDER_ROUTING_CONFLICT",
          "RESPONDER_UNAVAILABLE",
          "RESPONDER_SIGNATURE_INVALID",
          "RESPONDER_REQUEST_TIMEOUT",
          "REQUESTER_BAD_REQUEST",
          "REQUESTER_UNAVAILABLE"
        ]
      },
      "ConfirmationOfPayeeFailedResponse": {
        "type": "object",
        "title": "Confirmation of Payee Failed Response",
        "description": "The response from a failed Confirmation of Payee check.\n",
        "properties": {
          "status": {
            "type": "object",
            "properties": {
              "identifier": {
                "$ref": "#/components/schemas/ConfirmationOfPayeeResultStatus.FAILED"
              },
              "detailedStatusIdentifier": {
                "$ref": "#/components/schemas/ConfirmationOfPayeeFailureCode"
              }
            },
            "required": ["identifier", "detailedStatusIdentifier"]
          }
        },
        "required": ["status"]
      },
      "ConfirmationOfPayeeResponse": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/ConfirmationOfPayeeConfirmedResponse"
          },
          {
            "$ref": "#/components/schemas/ConfirmationOfPayeeRejectedResponse"
          },
          {
            "$ref": "#/components/schemas/ConfirmationOfPayeeFailedResponse"
          }
        ]
      },
      "AccountIdentifierTbol": {
        "type": "object",
        "title": "TBOL",
        "properties": {
          "type": {
            "type": "string",
            "enum": ["TBOL"]
          },
          "accountId": {
            "$ref": "#/components/schemas/AccountId"
          }
        },
        "required": ["type", "accountId"]
      },
      "PaymentSender": {
        "description": "<span style=\"color:#f46d2a\">**Attention**</span> \\\nPlease note that the sender is a oneOf object linked to the **type** in the object. \nCurrently `TBOL` is the only available oneOf object\nbut the **sender** oneOf is extensible and new sender types can be added in the future without a\nmajor version change. Please ensure this is factored into your\napplication code.\n\nRepresents the details of the payment sender.\n",
        "allOf": [
          {
            "$ref": "#/components/schemas/AccountIdentifierTbol"
          }
        ]
      },
      "PaymentRecipientTbol": {
        "description": "<span style=\"color:#f46d2a\">**Attention**</span> \\\nPlease note that the recipient is a oneOf object linked to the **type** in the object. \nCurrently `TBOL` is the only available oneOf object\nbut the **recipient** oneOf is extensible and new recipient types can be added in the future without a\nmajor version change. Please ensure this is factored into your\napplication code.\n\nRepresents the details of the payment recipient.\n",
        "allOf": [
          {
            "oneOf": [
              {
                "$ref": "#/components/schemas/AccountIdentifierTbol"
              }
            ]
          }
        ]
      },
      "Amount": {
        "type": "object",
        "properties": {
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "value": {
            "type": "number",
            "description": "The amounts value assuming the provided unit under currency.",
            "format": "double",
            "minimum": 0.01,
            "example": 4320.5
          }
        },
        "required": ["currency", "value"]
      },
      "PaymentAmount": {
        "allOf": [
          {
            "description": "The amount to be paid from the senders account to the recipient's account."
          },
          {
            "$ref": "#/components/schemas/Amount"
          }
        ]
      },
      "PaymentReferenceRequest": {
        "type": "string",
        "description": "Reference note that is sent along with the payment and usually contains personal or business related information. This is visible to the sender and the recipient. Reference should not contain profanities or the payment will be rejected.",
        "minLength": 2,
        "maxLength": 18,
        "example": "INV-12345"
      },
      "PaymentNotes": {
        "type": "string",
        "nullable": true,
        "description": "This is available for additional information to be shared with the recipient to help them identify the payment. This is visible to the sender and may be visible to the recipient.",
        "maxLength": 140,
        "example": "My transaction"
      },
      "PlannedPaymentExecutionDateTime": {
        "type": "string",
        "nullable": true,
        "description": "The date and time when the payment should be executed by The Bank of London. Any future date and time can be provided to schedule a future payment. The date time should be formatted to the UTC date format (ISO8601). The time element is considered within 1 minute intervals, and payment will be released as close to the specified instructed time as possible.  2024-11-01T12:15:00.000Z is a valid example. If no date time is provided, this will be defaulted to the current date time.",
        "format": "date-time",
        "example": "2024-11-01T11:10:00.000Z"
      },
      "IdempotencyId": {
        "type": "string",
        "description": "Idempotency ID is a unique identifier that will guarantee that a payment or standing order containing a specific ID will be processed only once.",
        "example": "32ed5f75-638e-454c-a91b-ec16dc8f6e84",
        "minLength": 5,
        "maxLength": 72
      },
      "PaymentId": {
        "type": "string",
        "description": "Payment ID identifies the payment within The Bank of London API platform.",
        "example": "FItJ8s2G-aOUfXUFqzRXE"
      },
      "InternalDebitPaymentType": {
        "type": "string",
        "description": "Represents an immediate or future internal payment.",
        "enum": ["INTERNAL_DEBIT", "INTERNAL_STANDING_ORDER_DEBIT"]
      },
      "InternalPaymentScheme": {
        "type": "string",
        "description": "Payment scheme.\n`INTERNAL`: Internal payment\n",
        "enum": ["INTERNAL"]
      },
      "PaymentSenderResponse": {
        "description": "<span style=\"color:#f46d2a\">**Attention**</span> \\\nPlease note that the sender is a oneOf object linked to the **type** in the object. \nCurrently `TBOL` is the only available oneOf object\nbut the **sender** oneOf is extensible and new sender types can be added in the future without a\nmajor version change. Please ensure this is factored into your\napplication code.\n\nRepresents the details of the payment sender.\n    type: object\n",
        "title": "TBOL",
        "properties": {
          "type": {
            "type": "string",
            "enum": ["TBOL"]
          },
          "accountId": {
            "$ref": "#/components/schemas/AccountId"
          },
          "sortCode": {
            "$ref": "#/components/schemas/UkSortCode"
          },
          "accountNumber": {
            "$ref": "#/components/schemas/UkAccountNumber"
          }
        },
        "required": ["type", "accountId", "sortCode", "accountNumber"]
      },
      "AccountIdentifierTbolResponse": {
        "type": "object",
        "title": "TBOL",
        "properties": {
          "type": {
            "type": "string",
            "enum": ["TBOL"]
          },
          "accountId": {
            "$ref": "#/components/schemas/AccountId"
          },
          "sortCode": {
            "$ref": "#/components/schemas/UkSortCode"
          },
          "accountNumber": {
            "$ref": "#/components/schemas/UkAccountNumber"
          },
          "accountHolderName": {
            "$ref": "#/components/schemas/AccountHolderName"
          }
        },
        "required": ["type", "accountId", "sortCode", "accountNumber", "accountHolderName"]
      },
      "PaymentRecipientTbolResponse": {
        "description": "<span style=\"color:#f46d2a\">**Attention**</span> \\\nPlease note that the recipient is a oneOf object linked to the **type** in the object. \nCurrently `TBOL` is the only available oneOf object\nbut the **recipient** oneOf is extensible and new recipient types can be added in the future without a\nmajor version change. Please ensure this is factored into your\napplication code.\n\nRepresents the details of the payment recipient.\n",
        "allOf": [
          {
            "oneOf": [
              {
                "$ref": "#/components/schemas/AccountIdentifierTbolResponse"
              }
            ]
          }
        ]
      },
      "PaymentReference": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentReferenceRequest"
          }
        ],
        "description": "Reference note that is sent along with the payment and usually contains personal or business related information. This is visible to the sender and the recipient."
      },
      "PaymentStatusHistory": {
        "type": "object",
        "title": "Payment Status History",
        "description": "Represents the history of the payment status.",
        "properties": {
          "identifier": {
            "type": "string",
            "description": "<span style=\"color:#f46d2a\">**Attention**</span> \\\nPlease note that the allowed values for the **identifier** are\nextensible and new values can be added in the future without a\nmajor version change. Please ensure this is factored into your\napplication code. \n\nThe status identifier. `PENDING_APPROVAL` `APPROVED` `REJECTED` are\nonly applicable to payments that require approval via TBOL Core Web\nInterface.\n",
            "enum": [
              "PENDING_APPROVAL",
              "PENDING",
              "APPROVED",
              "REJECTED",
              "SUCCESSFUL",
              "FAILED",
              "SCHEDULED"
            ]
          },
          "detailedStatusIdentifier": {
            "type": "string",
            "description": "<span style=\"color:#f46d2a\">**Attention**</span> \\\nPlease note that the allowed values for the **detailedStatusIdentifier** are\nextensible and new values can be added in the future without a\nmajor version change. Please ensure this is factored into your\napplication code. \n\nThe detailed status identifier.\n",
            "enum": [
              "ACCEPTED_CUSTOMER_PROFILE",
              "ACCEPTED_SETTLEMENT_COMPLETED",
              "ACCEPTED_SETTLEMENT_IN_PROCESS",
              "ACCEPTED_TECHNICAL_VALIDATION",
              "ACCEPTED_WITH_CHANGE",
              "FPS_ACCEPTED_AFTER_NEXT_WORKING_DAY",
              "FPS_ACCEPTED_NEXT_CALENDAR_DAY",
              "FPS_ACCEPTED_NEXT_WORKING_DAY",
              "FPS_ACCEPTED_SAME_DAY",
              "FPS_ACCEPTED_WITHOUT_QUALIFICATION_IMMEDIATE",
              "FPS_ACCEPTED_WITH_UNSPECIFIED_TIME",
              "FPS_ACCOUNT_IN_WRONG_CURRENCY",
              "FPS_ACCOUNT_TERMS_AND_CONDITIONS_VIOLATION",
              "FPS_ACCOUNT_TRANSFERRED",
              "FPS_BENEFICIARY_ACCOUNT_CANNOT_BE_IDENTIFIED",
              "FPS_BENEFICIARY_ACCOUNT_CLOSED",
              "FPS_BENEFICIARY_ACCOUNT_NAME_AND_NUMBER_MISMATCH",
              "FPS_BENEFICIARY_ACCOUNT_NAME_MISSING",
              "FPS_BENEFICIARY_ACCOUNT_STOPPED",
              "FPS_BENEFICIARY_DECEASED",
              "FPS_BENEFICIARY_SENSITIVITIES_ERROR",
              "FPS_CANNOT_DETERMINE_ROUTE_FOR_PAYMENT",
              "FPS_DUPLICATE_FPID",
              "FPS_FUNDS_NOT_AVAILABLE",
              "FPS_INCORRECT_REFERENCE_INFORMATION",
              "FPS_RECEIVING_AGENCY_3RD_PARTY_BENEFICIARY_ACCOUNT_TRANSFERRED",
              "FPS_RECEIVING_AGENCY_ACCOUNT_CLOSED",
              "FPS_RECEIVING_AGENCY_ACCOUNT_STOPPED",
              "FPS_RECEIVING_AGENCY_ACCOUNT_TRANSFERRED",
              "FPS_RECEIVING_AGENCY_SORT_CODE_ACCOUNT_UNKNOWN",
              "FPS_SCHEME_IS_DOWN",
              "FPS_SENDING_AGENCY_ACCOUNT_CLOSED",
              "FPS_SENDING_AGENCY_ACCOUNT_STOPPED",
              "FPS_SENDING_AGENCY_SORT_CODE_ACCOUNT_UNKNOWN",
              "FPS_SENDING_INSTITUTION_ACTION_REQUIRED",
              "FPS_SYNTAX_ERROR",
              "FPS_SYSTEM_MALFUNCTION",
              "FPS_UNABLE_TO_SEND_PAYMENT",
              "INFORMATORY",
              "PARTIALLY_ACCEPTED",
              "RECALLED",
              "RECEIVED",
              "PENDING",
              "REJECTED",
              "WAITING",
              "PENDING_APPROVAL",
              "FAILED"
            ]
          },
          "dateTime": {
            "type": "string",
            "format": "date",
            "description": "The date and time of the status change."
          }
        },
        "required": ["identifier", "detailedStatusIdentifier", "dateTime"]
      },
      "PaymentStatus": {
        "description": "<span style=\"color:#f46d2a\">**Attention**</span> \\\nPlease note that the status is a oneOf object linked to the **identifier** in the object. \nThe **status** oneOf, based on the **identifier** is extensible and new status identifiers can be added in the future without a\nmajor version change. Please ensure this is factored into your application code.\n\nThe current status of the payment.\n",
        "oneOf": [
          {
            "type": "object",
            "title": "PENDING_APPROVAL",
            "properties": {
              "identifier": {
                "type": "string",
                "enum": ["PENDING_APPROVAL"],
                "description": "Initial status of a payment that requires approval before processing."
              },
              "detailedStatusIdentifier": {
                "description": "<span style=\"color:#f46d2a\">**Attention**</span> \\\nPlease note that the allowed values for the **detailedStatusIdentifier** are\nextensible and new values can be added in the future without a\nmajor version change. Please ensure this is factored into your\napplication code.\n",
                "enum": ["PENDING_APPROVAL"]
              },
              "history": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PaymentStatusHistory"
                }
              }
            },
            "required": ["identifier", "detailedStatusIdentifier", "history"]
          },
          {
            "type": "object",
            "title": "PENDING",
            "properties": {
              "identifier": {
                "type": "string",
                "enum": ["PENDING"],
                "description": "Payment is currently being processed within The Bank of London system."
              },
              "detailedStatusIdentifier": {
                "description": "<span style=\"color:#f46d2a\">**Attention**</span> \\\nPlease note that the allowed values for the **detailedStatusIdentifier** are\nextensible and new values can be added in the future without a\nmajor version change. Please ensure this is factored into your\napplication code.\n",
                "enum": [
                  "ACCEPTED_CUSTOMER_PROFILE",
                  "ACCEPTED_SETTLEMENT_IN_PROCESS",
                  "ACCEPTED_TECHNICAL_VALIDATION",
                  "INFORMATORY",
                  "RECEIVED",
                  "PENDING",
                  "WAITING"
                ]
              },
              "history": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PaymentStatusHistory"
                }
              }
            },
            "required": ["identifier", "detailedStatusIdentifier", "history"]
          },
          {
            "type": "object",
            "title": "APPROVED",
            "properties": {
              "identifier": {
                "type": "string",
                "enum": ["APPROVED"],
                "description": "The payment has been approved by an authorised payment approver."
              },
              "detailedStatusIdentifier": {
                "description": "<span style=\"color:#f46d2a\">**Attention**</span> \\\nPlease note that the allowed values for the **detailedStatusIdentifier** are\nextensible and new values can be added in the future without a\nmajor version change. Please ensure this is factored into your\napplication code.\n",
                "type": "string",
                "enum": ["APPROVED"]
              },
              "history": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PaymentStatusHistory"
                }
              }
            },
            "required": ["identifier", "detailedStatusIdentifier", "history"]
          },
          {
            "type": "object",
            "title": "REJECTED",
            "properties": {
              "identifier": {
                "type": "string",
                "enum": ["REJECTED"],
                "description": "The payment has been rejected by an authorised payment approver."
              },
              "detailedStatusIdentifier": {
                "description": "<span style=\"color:#f46d2a\">**Attention**</span> \\\nPlease note that the allowed values for the **detailedStatusIdentifier** are\nextensible and new values can be added in the future without a\nmajor version change. Please ensure this is factored into your\napplication code.\n",
                "type": "string",
                "enum": ["REJECTED"]
              },
              "history": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PaymentStatusHistory"
                }
              }
            },
            "required": ["identifier", "detailedStatusIdentifier", "history"]
          },
          {
            "type": "object",
            "title": "SUCCESSFUL",
            "properties": {
              "identifier": {
                "type": "string",
                "enum": ["SUCCESSFUL"],
                "description": "Payment has been processed and passed all checks."
              },
              "detailedStatusIdentifier": {
                "description": "<span style=\"color:#f46d2a\">**Attention**</span> \\\nPlease note that the allowed values for the **detailedStatusIdentifier** are\nextensible and new values can be added in the future without a\nmajor version change. Please ensure this is factored into your\napplication code.\n",
                "type": "string",
                "enum": [
                  "ACCEPTED_SETTLEMENT_COMPLETED",
                  "ACCEPTED_WITH_CHANGE",
                  "FPS_ACCEPTED_AFTER_NEXT_WORKING_DAY",
                  "FPS_ACCEPTED_NEXT_CALENDAR_DAY",
                  "FPS_ACCEPTED_NEXT_WORKING_DAY",
                  "FPS_ACCEPTED_SAME_DAY",
                  "FPS_ACCEPTED_WITHOUT_QUALIFICATION_IMMEDIATE",
                  "FPS_ACCEPTED_WITH_UNSPECIFIED_TIME",
                  "PARTIALLY_ACCEPTED"
                ]
              },
              "history": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PaymentStatusHistory"
                }
              }
            },
            "required": ["identifier", "detailedStatusIdentifier", "history"]
          },
          {
            "type": "object",
            "title": "FAILED",
            "properties": {
              "identifier": {
                "type": "string",
                "enum": ["FAILED"],
                "description": "One or more checks failed whilst processing the payment."
              },
              "detailedStatusIdentifier": {
                "description": "<span style=\"color:#f46d2a\">**Attention**</span> \\\nPlease note that the allowed values for the **detailedStatusIdentifier** are\nextensible and new values can be added in the future without a\nmajor version change. Please ensure this is factored into your\napplication code.\n",
                "type": "string",
                "enum": [
                  "FPS_ACCOUNT_IN_WRONG_CURRENCY",
                  "FPS_ACCOUNT_TERMS_AND_CONDITIONS_VIOLATION",
                  "FPS_ACCOUNT_TRANSFERRED",
                  "FPS_BENEFICIARY_ACCOUNT_CANNOT_BE_IDENTIFIED",
                  "FPS_BENEFICIARY_ACCOUNT_CLOSED",
                  "FPS_BENEFICIARY_ACCOUNT_NAME_AND_NUMBER_MISMATCH",
                  "FPS_BENEFICIARY_ACCOUNT_NAME_MISSING",
                  "FPS_BENEFICIARY_ACCOUNT_STOPPED",
                  "FPS_BENEFICIARY_DECEASED",
                  "FPS_BENEFICIARY_SENSITIVITIES_ERROR",
                  "FPS_CANNOT_DETERMINE_ROUTE_FOR_PAYMENT",
                  "FPS_DUPLICATE_FPID",
                  "FPS_FUNDS_NOT_AVAILABLE",
                  "FPS_INCORRECT_REFERENCE_INFORMATION",
                  "FPS_RECEIVING_AGENCY_3RD_PARTY_BENEFICIARY_ACCOUNT_TRANSFERRED",
                  "FPS_RECEIVING_AGENCY_ACCOUNT_CLOSED",
                  "FPS_RECEIVING_AGENCY_ACCOUNT_STOPPED",
                  "FPS_RECEIVING_AGENCY_ACCOUNT_TRANSFERRED",
                  "FPS_RECEIVING_AGENCY_SORT_CODE_ACCOUNT_UNKNOWN",
                  "FPS_SCHEME_IS_DOWN",
                  "FPS_SENDING_AGENCY_ACCOUNT_CLOSED",
                  "FPS_SENDING_AGENCY_ACCOUNT_STOPPED",
                  "FPS_SENDING_AGENCY_SORT_CODE_ACCOUNT_UNKNOWN",
                  "FPS_SENDING_INSTITUTION_ACTION_REQUIRED",
                  "FPS_SYNTAX_ERROR",
                  "FPS_SYSTEM_MALFUNCTION",
                  "FPS_UNABLE_TO_SEND_PAYMENT",
                  "RECALLED",
                  "REJECTED",
                  "FAILED"
                ]
              },
              "history": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PaymentStatusHistory"
                }
              }
            },
            "required": ["identifier", "detailedStatusIdentifier", "history"]
          },
          {
            "type": "object",
            "title": "SCHEDULED",
            "properties": {
              "identifier": {
                "type": "string",
                "enum": ["SCHEDULED"],
                "description": "The payment has been processed and all checks have passed. Payment awaiting execution date to complete the payment."
              },
              "detailedStatusIdentifier": {
                "description": "<span style=\"color:#f46d2a\">**Attention**</span> \\\nPlease note that the allowed values for the **detailedStatusIdentifier** are\nextensible and new values can be added in the future without a\nmajor version change. Please ensure this is factored into your\napplication code.\n",
                "type": "string",
                "enum": ["SCHEDULED"]
              },
              "history": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PaymentStatusHistory"
                }
              }
            },
            "required": ["identifier", "detailedStatusIdentifier", "history"]
          }
        ]
      },
      "ExecutionDateTime": {
        "type": "string",
        "description": "The UTC date time when the payment was executed. This field is only populated once the payment has been settled and status identifier is `SUCCESSFUL`.",
        "format": "date-time",
        "example": "2022-10-05T11:01:00.000Z",
        "nullable": true
      },
      "CreatedDateTime": {
        "type": "string",
        "description": "The UTC date time when the payment was created `2022-10-05T11:01:00.000Z` is a valid example.",
        "format": "date-time",
        "example": "2022-10-05T11:01:00.000Z"
      },
      "CreatedBy": {
        "type": "string",
        "description": "The `id` of the user or application that created the payment. System generated payments use a reserved value of `SYSTEM`.",
        "example": "64e739504746e6fe27ed53b5"
      },
      "PaymentStandingOrderId": {
        "type": "string",
        "description": "Standing order ID identifies a standing order linked to a payment. Only payments of type `INTERNAL_STANDING_ORDER_DEBIT` or `FPS_STANDING_ORDER_DEBIT` will have a standing order ID.",
        "example": "VkfAIi3VOVO3ssMGHmt6P"
      },
      "PaymentCreatorUserType": {
        "type": "string",
        "description": "The type of the payment creator. Created by a user.",
        "enum": ["USER"]
      },
      "PaymentCreatorId": {
        "type": "string",
        "description": "The `id` of the user that created the payment.",
        "example": "64e739504746e6fe27ed53b5"
      },
      "PaymentCreatorUser": {
        "type": "object",
        "title": "Payment Creator - User",
        "description": "Represents the creator of the payment.",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/PaymentCreatorUserType"
          },
          "id": {
            "$ref": "#/components/schemas/PaymentCreatorId"
          }
        },
        "required": ["type", "id"]
      },
      "PaymentCreatorApiType": {
        "type": "string",
        "description": "The type of the payment creator. Created by the API.",
        "enum": ["API"]
      },
      "PaymentCreatorKey": {
        "type": "string",
        "description": "The API key that created the payment.",
        "example": "03967d18-5152-4f5a-9276-7f96c96f05ba"
      },
      "PaymentCreatorApi": {
        "type": "object",
        "title": "Payment Creator - API",
        "description": "Represents the creator of the payment.",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/PaymentCreatorApiType"
          },
          "key": {
            "$ref": "#/components/schemas/PaymentCreatorKey"
          }
        },
        "required": ["type", "key"]
      },
      "PaymentCreatorSystemType": {
        "type": "string",
        "description": "The type of the payment creator. Created by the system, usually standing order payments.",
        "enum": ["SYSTEM"]
      },
      "PaymentCreatorSystem": {
        "type": "object",
        "title": "Payment Creator - System",
        "description": "Represents the creator of the payment.",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/PaymentCreatorSystemType"
          }
        },
        "required": ["type"]
      },
      "PaymentCreator": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/PaymentCreatorUser"
          },
          {
            "$ref": "#/components/schemas/PaymentCreatorApi"
          },
          {
            "$ref": "#/components/schemas/PaymentCreatorSystem"
          }
        ]
      },
      "InternalSinglePayment": {
        "type": "object",
        "title": "Internal Payment",
        "description": "Payment object that represents an Internal payment.\n",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/PaymentId"
          },
          "type": {
            "$ref": "#/components/schemas/InternalDebitPaymentType"
          },
          "scheme": {
            "$ref": "#/components/schemas/InternalPaymentScheme"
          },
          "sender": {
            "$ref": "#/components/schemas/PaymentSenderResponse"
          },
          "recipient": {
            "$ref": "#/components/schemas/PaymentRecipientTbolResponse"
          },
          "amount": {
            "$ref": "#/components/schemas/PaymentAmount"
          },
          "reference": {
            "$ref": "#/components/schemas/PaymentReference"
          },
          "notes": {
            "$ref": "#/components/schemas/PaymentNotes"
          },
          "plannedExecutionDateTime": {
            "$ref": "#/components/schemas/PlannedPaymentExecutionDateTime"
          },
          "status": {
            "$ref": "#/components/schemas/PaymentStatus"
          },
          "executionDateTime": {
            "$ref": "#/components/schemas/ExecutionDateTime"
          },
          "createdDateTime": {
            "$ref": "#/components/schemas/CreatedDateTime"
          },
          "createdBy": {
            "$ref": "#/components/schemas/CreatedBy"
          },
          "paymentOrderId": {
            "$ref": "#/components/schemas/PaymentOrderId"
          },
          "idempotencyId": {
            "$ref": "#/components/schemas/IdempotencyId"
          },
          "standingOrderId": {
            "$ref": "#/components/schemas/PaymentStandingOrderId"
          },
          "creator": {
            "$ref": "#/components/schemas/PaymentCreator"
          }
        },
        "required": [
          "id",
          "type",
          "scheme",
          "sender",
          "recipient",
          "amount",
          "reference",
          "status",
          "createdDateTime",
          "createdBy",
          "idempotencyId",
          "creator"
        ]
      },
      "AccountIdentifierUk": {
        "type": "object",
        "title": "UK",
        "properties": {
          "type": {
            "type": "string",
            "enum": ["UK"]
          },
          "sortCode": {
            "$ref": "#/components/schemas/UkSortCode"
          },
          "accountNumber": {
            "$ref": "#/components/schemas/UkAccountNumber"
          },
          "accountHolderName": {
            "$ref": "#/components/schemas/AccountHolderName"
          }
        },
        "required": ["type", "sortCode", "accountNumber", "accountHolderName"]
      },
      "PaymentRecipient": {
        "description": "<span style=\"color:#f46d2a\">**Attention**</span> \\\nPlease note that the recipient is a oneOf object linked to the **type** in the object. \nCurrently `UK` is the only available oneOf object\nbut the **recipient** oneOf is extensible and new recipient types can be added in the future without a\nmajor version change. Please ensure this is factored into your\napplication code.\n\nRepresents the details of the payment recipient.\n",
        "allOf": [
          {
            "oneOf": [
              {
                "$ref": "#/components/schemas/AccountIdentifierUk"
              }
            ]
          }
        ]
      },
      "FPSDebitPaymentType": {
        "type": "string",
        "description": "Represents an immediate or future FPS payment.",
        "enum": ["FPS_DEBIT", "FPS_STANDING_ORDER_DEBIT"]
      },
      "FPSPaymentScheme": {
        "type": "string",
        "description": "Payment scheme.\n`FPS`: Faster payment\n",
        "enum": ["FPS"]
      },
      "RedirectedSortCode": {
        "type": "string",
        "description": "Provided along with `redirectedAccountNumber` if the original payment was redirected to a different account than originally instructed, due to the recipient’s account switch to a different provider (using Current Account Switch Service). Please ensure that any payee records, Standing Orders or future dated payments are updated to reflect these new details.\n"
      },
      "RedirectedAccountNumber": {
        "type": "string",
        "description": "Provided along with `redirectedSortCode` if the original payment was redirected to a different account than originally instructed, due to the recipient’s account switch to a different provider (using Current Account Switch Service). Please ensure that any payee records, Standing Orders or future dated payments are updated to reflect these new details.\n"
      },
      "AccountIdentifierFPS": {
        "type": "object",
        "title": "UK",
        "properties": {
          "type": {
            "type": "string",
            "enum": ["UK"]
          },
          "sortCode": {
            "$ref": "#/components/schemas/UkSortCode"
          },
          "accountNumber": {
            "$ref": "#/components/schemas/UkAccountNumber"
          },
          "accountHolderName": {
            "$ref": "#/components/schemas/AccountHolderName"
          },
          "redirectedSortCode": {
            "$ref": "#/components/schemas/RedirectedSortCode"
          },
          "redirectedAccountNumber": {
            "$ref": "#/components/schemas/RedirectedAccountNumber"
          }
        },
        "required": ["type", "sortCode", "accountNumber", "accountHolderName"]
      },
      "PaymentRecipientFPSResponse": {
        "description": "<span style=\"color:#f46d2a\">**Attention**</span> \\\nPlease note that the recipient is a oneOf object linked to the **type** in the object. \nCurrently `UK` is the only available oneOf object\nbut the **recipient** oneOf is extensible and new recipient types can be added in the future without a\nmajor version change. Please ensure this is factored into your\napplication code.\n\nRepresents the details of the payment recipient.\n",
        "allOf": [
          {
            "oneOf": [
              {
                "$ref": "#/components/schemas/AccountIdentifierFPS"
              }
            ]
          }
        ]
      },
      "FPSSinglePayment": {
        "type": "object",
        "title": "FPS Payment",
        "description": "Payment object that represents a FPS payment.\n",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/PaymentId"
          },
          "type": {
            "$ref": "#/components/schemas/FPSDebitPaymentType"
          },
          "scheme": {
            "$ref": "#/components/schemas/FPSPaymentScheme"
          },
          "sender": {
            "$ref": "#/components/schemas/PaymentSenderResponse"
          },
          "recipient": {
            "$ref": "#/components/schemas/PaymentRecipientFPSResponse"
          },
          "amount": {
            "$ref": "#/components/schemas/PaymentAmount"
          },
          "reference": {
            "$ref": "#/components/schemas/PaymentReference"
          },
          "notes": {
            "$ref": "#/components/schemas/PaymentNotes"
          },
          "plannedExecutionDateTime": {
            "$ref": "#/components/schemas/PlannedPaymentExecutionDateTime"
          },
          "status": {
            "$ref": "#/components/schemas/PaymentStatus"
          },
          "executionDateTime": {
            "$ref": "#/components/schemas/ExecutionDateTime"
          },
          "createdDateTime": {
            "$ref": "#/components/schemas/CreatedDateTime"
          },
          "createdBy": {
            "$ref": "#/components/schemas/CreatedBy"
          },
          "paymentOrderId": {
            "$ref": "#/components/schemas/PaymentOrderId"
          },
          "idempotencyId": {
            "$ref": "#/components/schemas/IdempotencyId"
          },
          "standingOrderId": {
            "$ref": "#/components/schemas/PaymentStandingOrderId"
          },
          "creator": {
            "$ref": "#/components/schemas/PaymentCreator"
          }
        },
        "required": [
          "id",
          "type",
          "scheme",
          "sender",
          "recipient",
          "amount",
          "reference",
          "status",
          "createdDateTime",
          "createdBy",
          "idempotencyId",
          "creator"
        ]
      },
      "BacsSinglePaymentItem": {
        "type": "object",
        "title": "Bacs Payment Item",
        "description": "Payment object that represents a single Bacs payment item.",
        "properties": {
          "recipient": {
            "description": "Represents the details of the payment recipient.",
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountIdentifierUk"
              }
            ]
          },
          "amount": {
            "$ref": "#/components/schemas/PaymentAmount"
          },
          "reference": {
            "$ref": "#/components/schemas/PaymentReferenceRequest"
          },
          "notes": {
            "$ref": "#/components/schemas/PaymentNotes"
          }
        },
        "required": ["recipient", "amount", "reference"]
      },
      "PlannedPaymentExecutionDate": {
        "type": "string",
        "description": "The date when the payment should be executed by The Bank of London. Any future date can be provided to schedule a future payment. Payments are processed in the Europe/London timezone so this must be a UK date in the format `YYYY-MM-DD`. `2022-10-05` is a valid example.",
        "format": "date",
        "example": "2022-10-05"
      },
      "BacsDebitPaymentRequest": {
        "type": "object",
        "title": "Bacs Payment Request",
        "description": "Payment object that is required to initiate a single Bacs Debit payment.",
        "properties": {
          "type": {
            "type": "string",
            "description": "Represents an immediate or future dated Bacs payment.",
            "enum": ["BACS_DEBIT"]
          },
          "sender": {
            "$ref": "#/components/schemas/PaymentSender"
          },
          "payments": {
            "type": "array",
            "description": "Array of payment objects that represent a single Bacs payment item. For now, only one item in this array is supported. In the future, multiple payment items will be supported.\n",
            "items": {
              "$ref": "#/components/schemas/BacsSinglePaymentItem"
            }
          },
          "plannedExecutionDate": {
            "$ref": "#/components/schemas/PlannedPaymentExecutionDate"
          },
          "idempotencyId": {
            "$ref": "#/components/schemas/IdempotencyId"
          }
        },
        "required": ["type", "sender", "payments", "plannedExecutionDate", "idempotencyId"]
      },
      "BacsDebitPaymentType": {
        "type": "string",
        "description": "Represents a Bacs payment.",
        "enum": ["BACS_DEBIT"]
      },
      "BacsPaymentScheme": {
        "type": "string",
        "enum": ["BACS"],
        "description": "Payment scheme.\n`BACS`: Bacs payment\n"
      },
      "BacsExecutionDateTime": {
        "type": "string",
        "description": "The UTC date time detailing when the payment will settle. This field is populated once the payment has successfully passed our checks and prepared for the payment scheme.",
        "format": "date-time",
        "example": "2022-10-05T11:01:00.000Z",
        "nullable": true
      },
      "BacsSinglePayment": {
        "type": "object",
        "title": "Bacs Payment",
        "description": "Payment object that is required to initiate a single Bacs payment.\n",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/PaymentId"
          },
          "type": {
            "$ref": "#/components/schemas/BacsDebitPaymentType"
          },
          "scheme": {
            "$ref": "#/components/schemas/BacsPaymentScheme"
          },
          "sender": {
            "$ref": "#/components/schemas/PaymentSenderResponse"
          },
          "payments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BacsSinglePaymentItem"
            }
          },
          "plannedExecutionDate": {
            "$ref": "#/components/schemas/PlannedPaymentExecutionDate"
          },
          "status": {
            "$ref": "#/components/schemas/PaymentStatus"
          },
          "executionDateTime": {
            "$ref": "#/components/schemas/BacsExecutionDateTime"
          },
          "createdDateTime": {
            "$ref": "#/components/schemas/CreatedDateTime"
          },
          "createdBy": {
            "$ref": "#/components/schemas/CreatedBy"
          },
          "paymentOrderId": {
            "$ref": "#/components/schemas/PaymentOrderId"
          },
          "idempotencyId": {
            "$ref": "#/components/schemas/IdempotencyId"
          },
          "creator": {
            "$ref": "#/components/schemas/PaymentCreator"
          }
        },
        "required": [
          "id",
          "type",
          "scheme",
          "sender",
          "payments",
          "plannedExecutionDate",
          "status",
          "createdDateTime",
          "createdBy",
          "idempotencyId",
          "creator"
        ]
      },
      "ChapsPaymentAmount": {
        "allOf": [
          {
            "description": "The amount to be paid from the senders account to the recipient's account."
          }
        ],
        "type": "object",
        "properties": {
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "value": {
            "type": "number",
            "description": "The amounts value assuming the provided unit under currency.",
            "format": "double",
            "example": 1200000.5
          }
        },
        "required": ["currency", "value"]
      },
      "CHAPSDebitPaymentType": {
        "type": "string",
        "description": "Represents a CHAPS payment.",
        "enum": ["CHAPS_DEBIT"]
      },
      "CHAPSPaymentScheme": {
        "type": "string",
        "enum": ["CHAPS"],
        "description": "Payment scheme.\n`CHAPS`: CHAPS payment\n"
      },
      "CHAPSSinglePayment": {
        "type": "object",
        "title": "CHAPS Payment",
        "description": "Payment object that is required to initiate a CHAPS payment.\n",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/PaymentId"
          },
          "type": {
            "$ref": "#/components/schemas/CHAPSDebitPaymentType"
          },
          "scheme": {
            "$ref": "#/components/schemas/CHAPSPaymentScheme"
          },
          "sender": {
            "$ref": "#/components/schemas/PaymentSenderResponse"
          },
          "recipient": {
            "$ref": "#/components/schemas/PaymentRecipient"
          },
          "amount": {
            "$ref": "#/components/schemas/ChapsPaymentAmount"
          },
          "reference": {
            "$ref": "#/components/schemas/PaymentReference"
          },
          "notes": {
            "$ref": "#/components/schemas/PaymentNotes"
          },
          "plannedExecutionDateTime": {
            "$ref": "#/components/schemas/PlannedPaymentExecutionDateTime"
          },
          "status": {
            "$ref": "#/components/schemas/PaymentStatus"
          },
          "executionDateTime": {
            "$ref": "#/components/schemas/ExecutionDateTime"
          },
          "createdDateTime": {
            "$ref": "#/components/schemas/CreatedDateTime"
          },
          "createdBy": {
            "$ref": "#/components/schemas/CreatedBy"
          },
          "paymentOrderId": {
            "$ref": "#/components/schemas/PaymentOrderId"
          },
          "idempotencyId": {
            "$ref": "#/components/schemas/IdempotencyId"
          },
          "creator": {
            "$ref": "#/components/schemas/PaymentCreator"
          }
        },
        "required": [
          "id",
          "type",
          "scheme",
          "sender",
          "recipient",
          "amount",
          "reference",
          "status",
          "createdDateTime",
          "createdBy",
          "idempotencyId",
          "creator"
        ]
      },
      "PaymentScheme": {
        "type": "string",
        "description": "<span style=\"color:#f46d2a\">**Attention**</span> \\\nPlease note that the allowed values for the **scheme** are\nextensible and new values can be added in the future without a\nmajor version change. Please ensure this is factored into your\napplication code.\n\nPayment scheme. \\\n`FPS`: Faster payment \\\n`INTERNAL`: Internal payment between accounts  \\\n`BACS`: Bankers' automated clearing system \\\n`CHAPS`: Clearing house automated payment system`\n",
        "enum": ["FPS", "INTERNAL", "BACS", "CHAPS"]
      },
      "PaymentStatusQueryParam": {
        "type": "string",
        "description": "Payment statuses listed below can be used as query values. In order to query for \\\nmultiple statuses, the query param can be repeated \\\ne.g ...?status=PENDING&status=SUCCESSFUL \\\n \\\n`PENDING_APPROVAL`: Initial status of a payment that requires approval before processing. \\\n`PENDING`: Payment is currently being processed within The Bank of London system.  \\\n`APPROVED`: The payment has been approved by an authorised payment approver  \\\n`REJECTED`: The payment has been rejected by an authorised payment approver  \\\n`SUCCESSFUL`: Payment has been processed and passed all checks.  \\\n`FAILED`: One or more checks failed whilst processing the payment.\n",
        "enum": ["PENDING_APPROVAL", "PENDING", "APPROVED", "REJECTED", "SUCCESSFUL", "FAILED"]
      },
      "value": {
        "type": "number",
        "description": "The amounts value assuming the provided unit under currency.",
        "format": "double",
        "minimum": 0.01,
        "example": 4320.5
      },
      "PaymentTypeQueryParam": {
        "type": "string",
        "description": "Represents the type of payment.",
        "enum": [
          "FPS_DEBIT",
          "FPS_STANDING_ORDER_DEBIT",
          "INTERNAL_DEBIT",
          "INTERNAL_STANDING_ORDER_DEBIT",
          "BACS_DEBIT",
          "CHAPS_DEBIT"
        ]
      },
      "StandingOrderSender": {
        "description": "<span style=\"color:#f46d2a\">**Attention**</span> \\\nPlease note that the sender is a oneOf object linked to the **type** in the object. \nCurrently `TBOL` is the only available oneOf object\nbut the **sender** oneOf is extensible and new sender types can be added in the future without a\nmajor version change. Please ensure this is factored into your\napplication code.\n\nRepresents the details of the payment sender.\n",
        "allOf": [
          {
            "$ref": "#/components/schemas/AccountIdentifierTbol"
          }
        ]
      },
      "StandingOrderUKRecipient": {
        "description": "<span style=\"color:#f46d2a\">**Attention**</span> \\\nPlease note that the recipient is a oneOf object linked to the **type** in the object. \nThe **recipient** oneOf is extensible and new recipient types can be added in the future without a\nmajor version change. Please ensure this is factored into your\napplication code.\n\nRepresents the details of the payment recipient.\n",
        "allOf": [
          {
            "oneOf": [
              {
                "$ref": "#/components/schemas/AccountIdentifierUk"
              }
            ]
          }
        ]
      },
      "StandingOrderAmount": {
        "allOf": [
          {
            "description": "The amount to be paid from the senders account to the recipient's account."
          },
          {
            "$ref": "#/components/schemas/Amount"
          }
        ]
      },
      "PaymentFrequency": {
        "type": "string",
        "description": "Frequency of a standing order payment. The Bank of London will use this value to set the payment execution dates after the date of first execution (`startDateTime`). Together with the end date (`endDateTime`) or the number of payments (`numberOfPayments`) the payment schedule is determined.",
        "enum": ["WEEKLY", "MONTHLY"],
        "example": "WEEKLY"
      },
      "StartDateTime": {
        "type": "string",
        "nullable": true,
        "description": "The date when the standing order payment should be executed by The Bank of London. Any weekday date can be provided to schedule a future payment with the exclusion of weekends and public holidays. The date time should be formatted to the UTC date format (ISO8601). The time element will be ignored on the date time. `2022-10-05T11:01:00.000Z` is a valid example. If no date time is provided, this will be defaulted to the current date time.",
        "format": "date-time",
        "example": "2022-10-05T11:01:00.000Z"
      },
      "NumberOfPayments": {
        "type": "integer",
        "nullable": true,
        "description": "The number of payments that should be made for a standing order.",
        "minimum": 1,
        "example": 5
      },
      "EndDateTime": {
        "type": "string",
        "nullable": true,
        "description": "The date when the standing order payment should be executed by The Bank of London. Any future date can be provided to schedule a future payment. The date time should be formatted to the UTC date format (ISO8601). The time element will be ignored on the date time. `2022-10-05T13:01:00.000Z` is a valid example.",
        "format": "date-time",
        "example": "2022-10-05T13:01:00.000Z"
      },
      "StandingOrderSchedule": {
        "description": "Represents the details of the standing order schedule. `frequency` is required, then either `numberOfPayments` or `endDateTime` must be provided.",
        "type": "object",
        "properties": {
          "frequency": {
            "$ref": "#/components/schemas/PaymentFrequency"
          },
          "startDateTime": {
            "$ref": "#/components/schemas/StartDateTime"
          },
          "numberOfPayments": {
            "$ref": "#/components/schemas/NumberOfPayments"
          },
          "endDateTime": {
            "$ref": "#/components/schemas/EndDateTime"
          }
        },
        "required": ["frequency"]
      },
      "PaymentReferenceRequest1": {
        "type": "string",
        "description": "Reference note that is sent along with the related payments and usually contains personal or business related information. This is visible to the sender and the recipient. Reference should not contain profanities or the payment will be rejected.",
        "minLength": 2,
        "maxLength": 18,
        "example": "INV-12345"
      },
      "PaymentNotes1": {
        "type": "string",
        "nullable": true,
        "description": "This is available for additional information to be shared with the recipient to help them identify the related payments. This is visible to the sender and may be visible to the recipient.",
        "maxLength": 140,
        "example": "My transaction"
      },
      "StandingOrderId": {
        "type": "string",
        "description": "Standing order ID identifies the standing order within The Bank of London API platform.",
        "example": "5AsbLCDIbxHTc2eLxyrEa"
      },
      "StandingOrderSenderResponse": {
        "description": "<span style=\"color:#f46d2a\">**Attention**</span> \\\nPlease note that the sender is a oneOf object linked to the **type** in the object. \nCurrently `TBOL` is the only available oneOf object\nbut the **sender** oneOf is extensible and new sender types can be added in the future without a\nmajor version change. Please ensure this is factored into your\napplication code.\n\nRepresents the details of the payment sender.<span style=\"color:#f46d2a\">**Attention**</span> \\\nPlease note that the sender is a oneOf object linked to the **type** in the object. \nCurrently `TBOL` is the only available oneOf object\nbut the **sender** oneOf is extensible and new sender types can be added in the future without a\nmajor version change. Please ensure this is factored into your\napplication code.\n\nRepresents the details of the payment sender.\n",
        "title": "TBOL",
        "properties": {
          "type": {
            "type": "string",
            "enum": ["TBOL"]
          },
          "accountId": {
            "$ref": "#/components/schemas/AccountId"
          },
          "sortCode": {
            "$ref": "#/components/schemas/UkSortCode"
          },
          "accountNumber": {
            "$ref": "#/components/schemas/UkAccountNumber"
          }
        },
        "required": ["type", "accountId", "sortCode", "accountNumber"]
      },
      "StandingOrderStatusHistory": {
        "type": "object",
        "title": "Standing order Status History",
        "description": "Represents the history of the standing order status.",
        "properties": {
          "identifier": {
            "type": "string",
            "description": "<span style=\"color:#f46d2a\">**Attention**</span> \\\nPlease note that the allowed values for the **identifier** are\nextensible and new values can be added in the future without a\nmajor version change. Please ensure this is factored into your\napplication code. \n\nThe status identifier. `PENDING_APPROVAL` `APPROVED` `REJECTED` are\nonly applicable to payments that require approval via TBOL Core Web\nInterface.\n",
            "enum": [
              "PENDING_APPROVAL",
              "PENDING",
              "APPROVED",
              "REJECTED",
              "ACTIVE",
              "FAILED",
              "INACTIVE",
              "CANCELLED"
            ]
          },
          "detailedStatusIdentifier": {
            "type": "string",
            "description": "<span style=\"color:#f46d2a\">**Attention**</span> \\\nPlease note that the allowed values for the **detailedStatusIdentifier** are\nextensible and new values can be added in the future without a\nmajor version change. Please ensure this is factored into your\napplication code. \n\nThe detailed status identifier.\n",
            "enum": [
              "PENDING_APPROVAL",
              "PENDING",
              "APPROVED",
              "REJECTED",
              "ACTIVE",
              "FAILED",
              "INACTIVE",
              "CANCELLED"
            ]
          },
          "dateTime": {
            "type": "string",
            "format": "date",
            "description": "The date and time of the status change."
          }
        },
        "required": ["identifier", "detailedStatusIdentifier", "dateTime"]
      },
      "StandingOrderStatus": {
        "description": "<span style=\"color:#f46d2a\">**Attention**</span> \\\nPlease note that the status is a oneOf object linked to the **identifier** in the object. \nThe **status** oneOf, based on the **identifier** is extensible and new status identifiers can be added in the future without a\nmajor version change. Please ensure this is factored into your application code.\n\nThe current status of the standing order.\n",
        "oneOf": [
          {
            "type": "object",
            "title": "PENDING_APPROVAL",
            "properties": {
              "identifier": {
                "type": "string",
                "enum": ["PENDING_APPROVAL"],
                "description": "Initial status of a standing order that requires approval before processing."
              },
              "detailedStatusIdentifier": {
                "description": "<span style=\"color:#f46d2a\">**Attention**</span> \\\nPlease note that the allowed values for the **detailedStatusIdentifier** are\nextensible and new values can be added in the future without a\nmajor version change. Please ensure this is factored into your\napplication code.\n",
                "enum": ["PENDING_APPROVAL"]
              },
              "history": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/StandingOrderStatusHistory"
                }
              }
            },
            "required": ["identifier", "detailedStatusIdentifier", "history"]
          },
          {
            "type": "object",
            "title": "PENDING",
            "properties": {
              "identifier": {
                "type": "string",
                "enum": ["PENDING"],
                "description": "Standing order is currently being processed within The Bank of London system."
              },
              "detailedStatusIdentifier": {
                "description": "<span style=\"color:#f46d2a\">**Attention**</span> \\\nPlease note that the allowed values for the **detailedStatusIdentifier** are\nextensible and new values can be added in the future without a\nmajor version change. Please ensure this is factored into your\napplication code.\n",
                "enum": ["PENDING"]
              },
              "history": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/StandingOrderStatusHistory"
                }
              }
            },
            "required": ["identifier", "detailedStatusIdentifier", "history"]
          },
          {
            "type": "object",
            "title": "APPROVED",
            "properties": {
              "identifier": {
                "type": "string",
                "enum": ["APPROVED"],
                "description": "The standing order has been approved by an authorised payment approver."
              },
              "detailedStatusIdentifier": {
                "description": "<span style=\"color:#f46d2a\">**Attention**</span> \\\nPlease note that the allowed values for the **detailedStatusIdentifier** are\nextensible and new values can be added in the future without a\nmajor version change. Please ensure this is factored into your\napplication code.\n",
                "type": "string",
                "enum": ["APPROVED"]
              },
              "history": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/StandingOrderStatusHistory"
                }
              }
            },
            "required": ["identifier", "detailedStatusIdentifier", "history"]
          },
          {
            "type": "object",
            "title": "REJECTED",
            "properties": {
              "identifier": {
                "type": "string",
                "enum": ["REJECTED"],
                "description": "The standing order has been rejected by an authorised payment approver."
              },
              "detailedStatusIdentifier": {
                "description": "<span style=\"color:#f46d2a\">**Attention**</span> \\\nPlease note that the allowed values for the **detailedStatusIdentifier** are\nextensible and new values can be added in the future without a\nmajor version change. Please ensure this is factored into your\napplication code.\n",
                "type": "string",
                "enum": ["REJECTED"]
              },
              "history": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/StandingOrderStatusHistory"
                }
              }
            },
            "required": ["identifier", "detailedStatusIdentifier", "history"]
          },
          {
            "type": "object",
            "title": "ACTIVE",
            "properties": {
              "identifier": {
                "type": "string",
                "enum": ["ACTIVE"],
                "description": "The standing order instruction is active and will make payments at the cadence defined by the schedule."
              },
              "detailedStatusIdentifier": {
                "description": "<span style=\"color:#f46d2a\">**Attention**</span> \\\nPlease note that the allowed values for the **detailedStatusIdentifier** are\nextensible and new values can be added in the future without a\nmajor version change. Please ensure this is factored into your\napplication code.\n",
                "type": "string",
                "enum": ["ACTIVE"]
              },
              "history": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/StandingOrderStatusHistory"
                }
              }
            },
            "required": ["identifier", "detailedStatusIdentifier", "history"]
          },
          {
            "type": "object",
            "title": "FAILED",
            "properties": {
              "identifier": {
                "type": "string",
                "enum": ["FAILED"],
                "description": "One or more checks failed whilst processing the standing order."
              },
              "detailedStatusIdentifier": {
                "description": "<span style=\"color:#f46d2a\">**Attention**</span> \\\nPlease note that the allowed values for the **detailedStatusIdentifier** are\nextensible and new values can be added in the future without a\nmajor version change. Please ensure this is factored into your\napplication code.\n",
                "type": "string",
                "enum": ["FAILED"]
              },
              "history": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/StandingOrderStatusHistory"
                }
              }
            },
            "required": ["identifier", "detailedStatusIdentifier", "history"]
          },
          {
            "type": "object",
            "title": "INACTIVE",
            "properties": {
              "identifier": {
                "type": "string",
                "enum": ["INACTIVE"],
                "description": "The instruction has reached end-of-life, it has either executed the number of payments configured or has reached the end date."
              },
              "detailedStatusIdentifier": {
                "description": "<span style=\"color:#f46d2a\">**Attention**</span> \\\nPlease note that the allowed values for the **detailedStatusIdentifier** are\nextensible and new values can be added in the future without a\nmajor version change. Please ensure this is factored into your\napplication code.\n",
                "type": "string",
                "enum": ["INACTIVE"]
              },
              "history": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/StandingOrderStatusHistory"
                }
              }
            },
            "required": ["identifier", "detailedStatusIdentifier", "history"]
          },
          {
            "type": "object",
            "title": "CANCELLED",
            "properties": {
              "identifier": {
                "type": "string",
                "enum": ["CANCELLED"],
                "description": "Standing order has been cancelled."
              },
              "detailedStatusIdentifier": {
                "description": "<span style=\"color:#f46d2a\">**Attention**</span> \\\nPlease note that the allowed values for the **detailedStatusIdentifier** are\nextensible and new values can be added in the future without a\nmajor version change. Please ensure this is factored into your\napplication code.\n",
                "type": "string",
                "enum": ["CANCELLED"]
              },
              "history": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/StandingOrderStatusHistory"
                }
              }
            },
            "required": ["identifier", "detailedStatusIdentifier", "history"]
          }
        ]
      },
      "CreatedBy1": {
        "type": "string",
        "description": "The `id` of the user or application that created the payment.",
        "example": "64e739504746e6fe27ed53b5"
      },
      "PaymentReference1": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentReferenceRequest1"
          },
          {
            "example": "INV-12345"
          }
        ],
        "description": "Reference note that is sent along with the related payments and usually contains personal or business related information. This is visible to the sender and the recipient."
      },
      "StandingOrderCancellation": {
        "type": "object",
        "description": "Represents the details of the standing order cancellation.\n",
        "properties": {
          "canCancel": {
            "type": "boolean",
            "description": "Indicates whether the standing order can be cancelled based on the current status. If the standing order can be cancelled, the value is `true`. If the standing order cannot be cancelled, the value is `false`.\n",
            "example": true
          },
          "cancelledBy": {
            "type": "string",
            "nullable": true,
            "description": "The `id` of the user or application that cancelled the standing order.",
            "example": "64e739504746e6fe27ed53b5"
          },
          "cancelledDateTime": {
            "type": "string",
            "nullable": true,
            "description": "The UTC date time when the standing order was cancelled",
            "format": "date-time",
            "example": "2022-10-05T11:01:00.000Z"
          }
        },
        "required": ["canCancel"]
      },
      "StandingOrderCreatorUserType": {
        "type": "string",
        "description": "The type of the standing order creator. Created by a user.",
        "enum": ["USER"]
      },
      "StandingOrderCreatorId": {
        "type": "string",
        "description": "The `id` of the user that created the payment.",
        "example": "64e739504746e6fe27ed53b5"
      },
      "StandingOrderCreatorUser": {
        "type": "object",
        "title": "Standing order Creator - User",
        "description": "Represents the creator of the standing order.",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/StandingOrderCreatorUserType"
          },
          "id": {
            "$ref": "#/components/schemas/StandingOrderCreatorId"
          }
        },
        "required": ["type", "id"]
      },
      "StandingOrderCreatorApiType": {
        "type": "string",
        "description": "The type of the standing order creator. Created by the API.",
        "enum": ["API"]
      },
      "StandingOrderCreatorKey": {
        "type": "string",
        "description": "The API key that created the payment.",
        "example": "03967d18-5152-4f5a-9276-7f96c96f05ba"
      },
      "StandingOrderCreatorApi": {
        "type": "object",
        "title": "Standing Order Creator - API",
        "description": "Represents the creator of the standing order.",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/StandingOrderCreatorApiType"
          },
          "key": {
            "$ref": "#/components/schemas/StandingOrderCreatorKey"
          }
        },
        "required": ["type", "key"]
      },
      "StandingOrderCreatorSystemType": {
        "type": "string",
        "description": "The type of the standing order creator. Created by the system.",
        "enum": ["SYSTEM"]
      },
      "StandingOrderCreatorSystem": {
        "type": "object",
        "title": "Standing Order Creator - System",
        "description": "Represents the creator of the standing order.",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/StandingOrderCreatorSystemType"
          }
        },
        "required": ["type"]
      },
      "StandingOrderCreator": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/StandingOrderCreatorUser"
          },
          {
            "$ref": "#/components/schemas/StandingOrderCreatorApi"
          },
          {
            "$ref": "#/components/schemas/StandingOrderCreatorSystem"
          }
        ]
      },
      "FPSStandingOrder": {
        "type": "object",
        "title": "Faster Payment Standing Order",
        "description": "A standing order.\n",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/StandingOrderId"
          },
          "scheme": {
            "$ref": "#/components/schemas/FPSPaymentScheme"
          },
          "sender": {
            "$ref": "#/components/schemas/StandingOrderSenderResponse"
          },
          "recipient": {
            "$ref": "#/components/schemas/StandingOrderUKRecipient"
          },
          "amount": {
            "$ref": "#/components/schemas/StandingOrderAmount"
          },
          "schedule": {
            "$ref": "#/components/schemas/StandingOrderSchedule"
          },
          "status": {
            "$ref": "#/components/schemas/StandingOrderStatus"
          },
          "createdBy": {
            "$ref": "#/components/schemas/CreatedBy1"
          },
          "createdDateTime": {
            "$ref": "#/components/schemas/CreatedDateTime"
          },
          "reference": {
            "$ref": "#/components/schemas/PaymentReference1"
          },
          "notes": {
            "$ref": "#/components/schemas/PaymentNotes1"
          },
          "cancellation": {
            "$ref": "#/components/schemas/StandingOrderCancellation"
          },
          "idempotencyId": {
            "$ref": "#/components/schemas/IdempotencyId"
          },
          "creator": {
            "$ref": "#/components/schemas/StandingOrderCreator"
          }
        },
        "required": [
          "id",
          "scheme",
          "sender",
          "recipient",
          "amount",
          "schedule",
          "status",
          "createdBy",
          "createdDateTime",
          "reference",
          "cancellation",
          "idempotencyId"
        ]
      },
      "StandingOrderInternalRecipient": {
        "description": "<span style=\"color:#f46d2a\">**Attention**</span> \\\nPlease note that the recipient is a oneOf object linked to the **type** in the object. \nThe **recipient** oneOf is extensible and new recipient types can be added in the future without a\nmajor version change. Please ensure this is factored into your\napplication code.\n\nRepresents the details of the payment recipient.\n",
        "allOf": [
          {
            "oneOf": [
              {
                "$ref": "#/components/schemas/AccountIdentifierTbol"
              }
            ]
          }
        ]
      },
      "StandingOrderInternalRecipientResponse": {
        "description": "<span style=\"color:#f46d2a\">**Attention**</span> \\\nPlease note that the recipient is a oneOf object linked to the **type** in the object. \nThe **recipient** oneOf is extensible and new recipient types can be added in the future without a\nmajor version change. Please ensure this is factored into your\napplication code.\n\nRepresents the details of the payment recipient.\n",
        "allOf": [
          {
            "oneOf": [
              {
                "$ref": "#/components/schemas/AccountIdentifierTbolResponse"
              }
            ]
          }
        ]
      },
      "InternalStartDateTime": {
        "type": "string",
        "nullable": true,
        "description": "The date when the standing order payment should be executed by The Bank of London. Any date can be provided to schedule a future payment, a weekend or public holiday can be specified. The date time should be formatted to the UTC date format (ISO8601). The time element will be ignored on the date time. `2022-10-05T11:01:00.000Z` is a valid example. If no date time is provided, this will be defaulted to the current date time.",
        "format": "date-time",
        "example": "2022-10-05T11:01:00.000Z"
      },
      "InternalStandingOrderSchedule": {
        "description": "Represents the details of the standing order schedule. `frequency` is required, then either `numberOfPayments` or `endDateTime` must be provided.",
        "type": "object",
        "properties": {
          "frequency": {
            "$ref": "#/components/schemas/PaymentFrequency"
          },
          "startDateTime": {
            "$ref": "#/components/schemas/InternalStartDateTime"
          },
          "numberOfPayments": {
            "$ref": "#/components/schemas/NumberOfPayments"
          },
          "endDateTime": {
            "$ref": "#/components/schemas/EndDateTime"
          }
        },
        "required": ["frequency"]
      },
      "InternalStandingOrder": {
        "type": "object",
        "title": "Internal Standing Order",
        "description": "A standing order.\n",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/StandingOrderId"
          },
          "scheme": {
            "$ref": "#/components/schemas/InternalPaymentScheme"
          },
          "sender": {
            "$ref": "#/components/schemas/StandingOrderSenderResponse"
          },
          "recipient": {
            "$ref": "#/components/schemas/StandingOrderInternalRecipientResponse"
          },
          "amount": {
            "$ref": "#/components/schemas/StandingOrderAmount"
          },
          "schedule": {
            "$ref": "#/components/schemas/InternalStandingOrderSchedule"
          },
          "status": {
            "$ref": "#/components/schemas/StandingOrderStatus"
          },
          "createdBy": {
            "$ref": "#/components/schemas/CreatedBy1"
          },
          "createdDateTime": {
            "$ref": "#/components/schemas/CreatedDateTime"
          },
          "reference": {
            "$ref": "#/components/schemas/PaymentReference1"
          },
          "notes": {
            "$ref": "#/components/schemas/PaymentNotes1"
          },
          "cancellation": {
            "$ref": "#/components/schemas/StandingOrderCancellation"
          },
          "idempotencyId": {
            "$ref": "#/components/schemas/IdempotencyId"
          },
          "creator": {
            "$ref": "#/components/schemas/StandingOrderCreator"
          }
        },
        "required": [
          "id",
          "scheme",
          "sender",
          "recipient",
          "amount",
          "schedule",
          "status",
          "createdBy",
          "createdDateTime",
          "reference",
          "cancellation",
          "idempotencyId"
        ]
      },
      "StandingOrderScheme": {
        "type": "string",
        "description": "<span style=\"color:#f46d2a\">**Attention**</span> \\\nPlease note that the allowed values for the **scheme** are\nextensible and new values can be added in the future without a\nmajor version change. Please ensure this is factored into your\napplication code.\n\nPayment scheme. \\\n`FPS`: Faster payment \\\n`INTERNAL`: Internal payment between accounts\n",
        "enum": ["FPS", "INTERNAL"]
      },
      "StandingOrderStatusQueryParam": {
        "type": "string",
        "description": "Standing order statuses listed below can be used as query values. In order to query for \\\nmultiple statuses, the query param can be repeated \\\ne.g ...?status=PENDING&status=ACTIVE \\\n \\\n`PENDING_APPROVAL`: Initial status of a standing order that requires approval before processing. \\\n`PENDING`: Standing order is currently being processed within The Bank of London system.  \\\n`APPROVED`: The standing order has been approved by an authorised payment approver  \\\n`REJECTED`: The standing order has been rejected by an authorised payment approver  \\\n`ACTIVE`: The standing order instruction is active and will make payments at the cadence defined by the schedule  \\\n`FAILED`: One or more checks failed whilst processing the standing order. \\\n`INACTIVE`: The instruction has reached end-of-life, it has either executed the number of payments configured or has reached the end date \\\n`CANCELLED`: Standing order has been cancelled by the sender.\n",
        "enum": [
          "PENDING_APPROVAL",
          "PENDING",
          "APPROVED",
          "REJECTED",
          "ACTIVE",
          "FAILED",
          "INACTIVE",
          "CANCELLED"
        ]
      },
      "Account2": {
        "type": "object",
        "properties": {
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "balance": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountBalance"
              },
              {
                "description": "The balance of the account after the transaction has been processed."
              }
            ]
          }
        },
        "required": ["currency", "balance"]
      },
      "PaymentTransaction1": {
        "type": "object",
        "title": "Payment Transaction",
        "description": "An incoming or outgoing transaction with a sender and recipient.",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/TransactionId"
          },
          "type": {
            "$ref": "#/components/schemas/PaymentTransactionType"
          },
          "typeDescription": {
            "$ref": "#/components/schemas/TransactionTypeDescription"
          },
          "sender": {
            "$ref": "#/components/schemas/TransactionSender"
          },
          "recipient": {
            "$ref": "#/components/schemas/TransactionRecipient"
          },
          "reference": {
            "$ref": "#/components/schemas/TransactionReference"
          },
          "isCredit": {
            "$ref": "#/components/schemas/TransactionIsCredit"
          },
          "notes": {
            "$ref": "#/components/schemas/TransactionNotes"
          },
          "amount": {
            "$ref": "#/components/schemas/schemas-TransactionAmount"
          },
          "postingDate": {
            "$ref": "#/components/schemas/TransactionPostingDate"
          },
          "releaseDateTime": {
            "$ref": "#/components/schemas/TransactionReleaseDateTime"
          },
          "valueDate": {
            "$ref": "#/components/schemas/TransactionValueDate"
          },
          "createdDateTime": {
            "$ref": "#/components/schemas/TransactionCreatedDateTime"
          },
          "account": {
            "$ref": "#/components/schemas/Account2"
          },
          "status": {
            "$ref": "#/components/schemas/TransactionStatus"
          },
          "paymentOrderId": {
            "$ref": "#/components/schemas/PaymentOrderId"
          },
          "transactionContext": {
            "$ref": "#/components/schemas/TransactionContext"
          }
        },
        "required": [
          "id",
          "type",
          "typeDescription",
          "sender",
          "recipient",
          "amount",
          "valueDate",
          "postingDate",
          "createdDateTime",
          "account",
          "status",
          "isCredit",
          "transactionContext"
        ]
      },
      "TransactionFields": {
        "description": "Returns only the fields that you have specified. If not provided, all fields will be returned.\n",
        "type": "array",
        "items": {
          "type": "string",
          "enum": [
            "AccountSortCode",
            "AccountNumber",
            "ProductType",
            "AccountNickname",
            "Date",
            "Time",
            "TransactionID",
            "AccountHolderName",
            "Reference",
            "Type",
            "Amount",
            "Balance",
            "Currency"
          ]
        },
        "example": "[\"AccountSortCode\", \"AccountNumber\"]"
      },
      "TransactionExportId": {
        "type": "string",
        "description": "Identifier of the transaction export within The Bank of London API platform.\n",
        "example": "bDBqW5smsJPNpoI8u0zy2"
      },
      "TransactionExportCreatedDateTime": {
        "type": "string",
        "description": "The date and time when the transaction export was created.",
        "format": "date-time",
        "example": "2024-07-30T08:30:00Z"
      },
      "TransactionExportStatus": {
        "type": "string",
        "description": "The status of the transaction export.",
        "enum": ["COMPLETED", "REQUESTED", "FAILED"],
        "example": "COMPLETED"
      },
      "NullableTransactionToDate": {
        "type": "string",
        "description": "The most recent posting date from which the transactions will be\nprovided.\n",
        "format": "date",
        "example": "2022-10-07",
        "nullable": true
      },
      "NullableTransactionIsCreditQueryParam": {
        "type": "boolean",
        "description": "Returns the transactions that are credit (`isCredit=true`) or debit (`isCredit=false`). If not provided, both credit and debit transactions are returned.\n",
        "example": true,
        "nullable": true
      },
      "NullableTransactionFields": {
        "description": "Returns only the fields that you have specified. If not provided, all fields will be returned.\n",
        "type": "array",
        "items": {
          "type": "string",
          "enum": [
            "AccountSortCode",
            "AccountNumber",
            "ProductType",
            "AccountNickname",
            "Date",
            "Time",
            "TransactionID",
            "AccountHolderName",
            "Reference",
            "Type",
            "Amount",
            "Balance",
            "Currency"
          ]
        },
        "example": "[\"AccountSortCode\", \"AccountNumber\"]",
        "nullable": true
      },
      "TransactionBase": {
        "type": "object",
        "description": "Common properties for transactions",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/TransactionExportId"
          },
          "createdDateTime": {
            "$ref": "#/components/schemas/TransactionExportCreatedDateTime"
          },
          "accountId": {
            "$ref": "#/components/schemas/AccountId"
          },
          "status": {
            "$ref": "#/components/schemas/TransactionExportStatus"
          },
          "fromDate": {
            "$ref": "#/components/schemas/TransactionFromDate"
          },
          "toDate": {
            "$ref": "#/components/schemas/NullableTransactionToDate"
          },
          "isCredit": {
            "$ref": "#/components/schemas/NullableTransactionIsCreditQueryParam"
          },
          "fields": {
            "$ref": "#/components/schemas/NullableTransactionFields"
          }
        },
        "required": ["id", "createdDateTime", "accountId", "status", "fromDate"]
      },
      "TransactionExportFileFormat": {
        "type": "string",
        "description": "The file export format.",
        "enum": ["CSV", "PDF"]
      },
      "TransactionExportDownloadUrl": {
        "type": "string",
        "nullable": true,
        "description": "The transaction export download url - this is only available when the transaction export status is `COMPLETED`.",
        "example": "https://export-download-url.com"
      },
      "TransactionExport": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TransactionBase"
          },
          {
            "type": "object",
            "description": "A transaction export object",
            "properties": {
              "fileFormat": {
                "$ref": "#/components/schemas/TransactionExportFileFormat"
              },
              "downloadUrl": {
                "$ref": "#/components/schemas/TransactionExportDownloadUrl"
              }
            },
            "required": ["fileFormat"]
          }
        ]
      },
      "TransactionExportWithoutDownloadUrl": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TransactionBase"
          },
          {
            "type": "object",
            "description": "A transaction export object without download URL",
            "properties": {
              "fileFormat": {
                "$ref": "#/components/schemas/TransactionExportFileFormat"
              }
            },
            "required": ["fileFormat"]
          }
        ]
      },
      "InitiateTransactionExportBody": {
        "type": "object",
        "description": "Request body to initiate a transaction export",
        "properties": {
          "accountId": {
            "$ref": "#/components/schemas/AccountId"
          },
          "fromDate": {
            "$ref": "#/components/schemas/TransactionFromDate"
          },
          "fileFormat": {
            "$ref": "#/components/schemas/TransactionExportFileFormat"
          },
          "toDate": {
            "$ref": "#/components/schemas/NullableTransactionToDate"
          },
          "isCredit": {
            "$ref": "#/components/schemas/NullableTransactionIsCreditQueryParam"
          },
          "fields": {
            "$ref": "#/components/schemas/NullableTransactionFields"
          }
        },
        "required": ["accountId", "fromDate", "fileFormat"]
      },
      "InitiateTransactionExportResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TransactionBase"
          },
          {
            "type": "object",
            "description": "Response body after initiating transaction export.",
            "properties": {
              "fileFormat": {
                "$ref": "#/components/schemas/TransactionExportFileFormat"
              }
            },
            "required": ["fileFormat"]
          }
        ]
      },
      "MandateReference": {
        "type": "string",
        "description": "The reference to the mandate ID",
        "example": "MAND001"
      },
      "MandateId": {
        "type": "string",
        "description": "The Bank of London mandate ID identifies the mandate within the\nThe Bank of London API platform.\n",
        "example": "GB-043030-01117536GB86ZZZ176771MAND001"
      },
      "MandateType": {
        "type": "string",
        "description": "The type of mandate",
        "enum": ["BACS_DIRECT_DEBIT_MANDATE"],
        "example": "BACS_DIRECT_DEBIT_MANDATE"
      },
      "MandateScheme": {
        "type": "string",
        "description": "The scheme of the mandate",
        "example": "BACS"
      },
      "MandateSender": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": ["TBOL"],
            "example": "TBOL"
          },
          "accountId": {
            "$ref": "#/components/schemas/AccountId"
          },
          "sortCode": {
            "$ref": "#/components/schemas/UkSortCode"
          },
          "accountNumber": {
            "$ref": "#/components/schemas/UkAccountNumber"
          }
        },
        "required": ["type", "accountId", "sortCode", "accountNumber"]
      },
      "MandateRecipient": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": ["UK"],
            "example": "UK"
          },
          "accountHolderName": {
            "type": "string",
            "description": "The name of the account holder receiving the mandate",
            "example": "TEST COMPANY LTD"
          }
        },
        "required": ["type", "accountHolderName"]
      },
      "MandateLastAmountPaid": {
        "type": "object",
        "properties": {
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "value": {
            "type": "number",
            "format": "double",
            "example": 5000
          }
        },
        "required": ["currency", "value"]
      },
      "MandateStatus": {
        "type": "object",
        "properties": {
          "identifier": {
            "type": "string",
            "description": "The status of the mandate",
            "enum": ["ACTIVE", "LOCKED", "TO_BE_CONFIRMED", "CANCELLED", "UNKNOWN"],
            "example": "ACTIVE"
          }
        },
        "required": ["identifier"]
      },
      "MandateCancellationReasonCode": {
        "type": "string",
        "description": "A code representing the reason that a mandate was cancelled",
        "enum": [
          "0_BACS_CANCELLED_BY_PAYMENT_SERVICE_PROVIDER",
          "1_BACS_CANCELLED_BY_PAYER",
          "2_BACS_PAYER_DECEASED",
          "B_BACS_ACCOUNT_CLOSED"
        ],
        "example": "1_BACS_CANCELLED_BY_PAYER"
      },
      "MandateCancellation": {
        "type": "object",
        "properties": {
          "canCancel": {
            "type": "boolean",
            "description": "Whether the mandate can be cancelled",
            "example": true
          },
          "reasonCode": {
            "$ref": "#/components/schemas/MandateCancellationReasonCode"
          }
        },
        "required": ["canCancel"]
      },
      "Mandate": {
        "type": "object",
        "description": "A mandate object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/MandateId"
          },
          "type": {
            "$ref": "#/components/schemas/MandateType"
          },
          "scheme": {
            "$ref": "#/components/schemas/MandateScheme"
          },
          "reference": {
            "$ref": "#/components/schemas/MandateReference"
          },
          "sender": {
            "$ref": "#/components/schemas/MandateSender"
          },
          "recipient": {
            "$ref": "#/components/schemas/MandateRecipient"
          },
          "lastAmountPaid": {
            "$ref": "#/components/schemas/MandateLastAmountPaid"
          },
          "status": {
            "$ref": "#/components/schemas/MandateStatus"
          },
          "cancellation": {
            "$ref": "#/components/schemas/MandateCancellation"
          }
        },
        "required": [
          "id",
          "type",
          "scheme",
          "reference",
          "sender",
          "recipient",
          "status",
          "cancellation"
        ]
      },
      "MandateCancel": {
        "type": "object",
        "description": "Request body of mandate cancellation",
        "properties": {
          "reasonCode": {
            "$ref": "#/components/schemas/MandateCancellationReasonCode"
          }
        }
      },
      "StatementId": {
        "type": "string",
        "description": "The Bank of London statement ID identifies the statement within the The Bank of London API platform",
        "example": "DS40022484107DB1EDE928A6410EA8C811F"
      },
      "StatementStartDate": {
        "type": "string",
        "description": "Identifies the start date of statement's period",
        "example": "2024-08-02"
      },
      "StatementEndDate": {
        "type": "string",
        "description": "Identifies the end date of statement's period",
        "example": "2024-08-31"
      },
      "StatementName": {
        "type": "string",
        "description": "Identifies the end of the statement",
        "example": "73975593-march-2024-bank-statement"
      },
      "Statement": {
        "properties": {
          "id": {
            "$ref": "#/components/schemas/StatementId"
          },
          "startDate": {
            "$ref": "#/components/schemas/StatementStartDate"
          },
          "endDate": {
            "$ref": "#/components/schemas/StatementEndDate"
          },
          "name": {
            "$ref": "#/components/schemas/StatementName"
          },
          "accountId": {
            "$ref": "#/components/schemas/AccountId"
          },
          "accountStatus": {
            "$ref": "#/components/schemas/AccountStatus"
          },
          "accountNickname": {
            "$ref": "#/components/schemas/AccountNickname"
          },
          "accountType": {
            "$ref": "#/components/schemas/AccountType"
          }
        },
        "required": [
          "id",
          "endDate",
          "name",
          "accountId",
          "accountStatus",
          "accountNickname",
          "accountType"
        ],
        "type": "object",
        "description": "Response object of getting a statement"
      },
      "WebhookId": {
        "type": "string",
        "description": "The id of the webhook",
        "example": "cpNBTqwaiqem3mI72UEcP"
      },
      "WebhookName": {
        "type": "string",
        "description": "The name of the webhook.\n\n- <span style=\"font-size:14px; font-family:Inter;\">Name must be unique within an environment (`sandbox` or `live`) for an account.</span>\n",
        "example": "My Webhook",
        "minLength": 1,
        "maxLength": 50
      },
      "Url": {
        "type": "string",
        "description": "The url of webhook target.\n\n- <span style=\"font-size:14px; font-family:Inter;\">Url must be `https`.</span>\n- <span style=\"font-size:14px; font-family:Inter;\">A combination of the `version` and `url` must be unique within an environment (`sandbox` or `live`) for an account.</span>\n",
        "example": "https://www.your-webhook-handling-url.com/api/callback"
      },
      "WebhookEvent": {
        "type": "string",
        "description": "<span style=\"color:#f46d2a\">**Attention**</span> \\\nPlease note that the allowed values for the **events** are\nextensible and new values can be added in the future without a\nmajor version change. Please ensure this is factored into your\napplication code.\n\nThe type of event. \\\n`PAYMENT_PENDING` - payment has been created and is `PENDING` or `SCHEDULED`. \\\n`PAYMENT_SUCCESSFUL` - payment has become `SUCCESSFUL`. \\\n`PAYMENT_FAILED` - payment has been updated with a status of `REJECTED` or `FAILED`. \\\n`TRANSACTION_SUCCESSFUL` - transaction has been created and successfully settled. \\\n`TRANSACTION_EXPORT_SUCCESSFUL` - transaction export has completed successfully. \\\n`TRANSACTION_EXPORT_FAILED` - transaction export has failed.\n",
        "enum": [
          "PAYMENT_PENDING",
          "PAYMENT_SUCCESSFUL",
          "PAYMENT_FAILED",
          "TRANSACTION_SUCCESSFUL",
          "TRANSACTION_EXPORT_SUCCESSFUL",
          "TRANSACTION_EXPORT_FAILED"
        ]
      },
      "WebhookVersion": {
        "type": "number",
        "description": "The version of API to subscribe to. \n\nA combination of the `url` and `version` must be unique within an environment (`sandbox` or `live`) for an account.\n",
        "example": 2,
        "enum": [2]
      },
      "WebhookEnabledStatus": {
        "type": "boolean",
        "description": "Indicates whether the webhook is enabled or not.\n",
        "example": true
      },
      "WebhookPublicKey": {
        "type": "string",
        "description": "The public key of the webhook.\n",
        "example": "-----BEGIN PUBLIC KEY-----\\nMvQI...SjAgEA-----END PUBLIC KEY-----\n"
      },
      "WebhookCreatedDate": {
        "type": "string",
        "format": "date-time",
        "description": "The date and time the webhook was created.\n",
        "example": "2023-01-01T00:00:00.000Z"
      },
      "Webhook": {
        "properties": {
          "id": {
            "$ref": "#/components/schemas/WebhookId"
          },
          "name": {
            "$ref": "#/components/schemas/WebhookName"
          },
          "url": {
            "$ref": "#/components/schemas/Url"
          },
          "events": {
            "type": "array",
            "uniqueItems": true,
            "description": "<span style=\"color:#f46d2a\">**Attention**</span> \\\nPlease note that the allowed values for the **events** are\nextensible and new values can be added in the future without a\nmajor version change. Please ensure this is factored into your\napplication code.\n\nArray of events which the webhook subscribes to. The events must be unique and cannot be empty. \\\nThe type of event. \\\n`PAYMENT_PENDING` - payment has been created and is `PENDING` or `SCHEDULED`. \\\n`PAYMENT_SUCCESSFUL` - payment has become `SUCCESSFUL`. \\\n`PAYMENT_FAILED` - payment has been updated with a status of `REJECTED` or `FAILED`. \\\n`TRANSACTION_SUCCESSFUL` - transaction has been created and successfully settled. \\\n`TRANSACTION_EXPORT_SUCCESSFUL` - transaction export has completed successfully. \\\n`TRANSACTION_EXPORT_FAILED` - transaction export has failed.\n",
            "items": {
              "$ref": "#/components/schemas/WebhookEvent"
            }
          },
          "version": {
            "$ref": "#/components/schemas/WebhookVersion"
          },
          "enabled": {
            "$ref": "#/components/schemas/WebhookEnabledStatus"
          },
          "publicKey": {
            "$ref": "#/components/schemas/WebhookPublicKey"
          },
          "createdDate": {
            "$ref": "#/components/schemas/WebhookCreatedDate"
          }
        },
        "required": [
          "id",
          "name",
          "url",
          "events",
          "version",
          "enabled",
          "publicKey",
          "createdDate"
        ]
      },
      "NullableWebhookName": {
        "type": "string",
        "description": "The name of the webhook.\n\n- <span style=\"font-size:14px; font-family:Inter;\">Name must be unique within an environment (`sandbox` or `live`) for an account.</span>\n",
        "example": "My Webhook",
        "minLength": 1,
        "maxLength": 50,
        "nullable": true
      },
      "NullableUrl": {
        "type": "string",
        "description": "The url of webhook target.\n\n- <span style=\"font-size:14px; font-family:Inter;\">Url must be `https`.</span>\n- <span style=\"font-size:14px; font-family:Inter;\">A combination of the `version` and `url` must be unique within an environment (`sandbox` or `live`) for an account.</span>\n",
        "example": "https://www.your-webhook-handling-url.com/api/callback",
        "nullable": true
      },
      "NullableWebhookVersion": {
        "type": "number",
        "description": "The version of API to subscribe to. \n\nA combination of the `url` and `version` must be unique within an environment (`sandbox` or `live`) for an account.\n",
        "example": 2,
        "enum": [2],
        "nullable": true
      },
      "NullableWebhookEnabledStatus": {
        "type": "boolean",
        "description": "Indicates whether the webhook is enabled or not.\n",
        "example": true,
        "nullable": true
      },
      "RegenerateWebhookKeyResponse": {
        "properties": {
          "id": {
            "$ref": "#/components/schemas/WebhookId"
          },
          "publicKey": {
            "$ref": "#/components/schemas/WebhookPublicKey"
          }
        },
        "required": ["id", "publicKey"]
      }
    },
    "responses": {
      "400": {
        "headers": {
          "x-correlation-id": {
            "description": "A unique identifier assigned to each request, facilitating issue tracing. In the event that a problem arises with a request, this ID can be provided to The Bank of London support team for assistance.",
            "schema": {
              "type": "string"
            },
            "example": "2579248247516384065",
            "required": true
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/BadRequestError"
            }
          }
        },
        "description": "Bad Request"
      },
      "401": {
        "headers": {
          "x-correlation-id": {
            "description": "A unique identifier assigned to each request, facilitating issue tracing. In the event that a problem arises with a request, this ID can be provided to The Bank of London support team for assistance.",
            "schema": {
              "type": "string"
            },
            "example": "2579248247516384065",
            "required": true
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UnauthorizedError"
            }
          }
        },
        "description": "Unauthorized"
      },
      "403": {
        "headers": {
          "x-correlation-id": {
            "description": "A unique identifier assigned to each request, facilitating issue tracing. In the event that a problem arises with a request, this ID can be provided to The Bank of London support team for assistance.",
            "schema": {
              "type": "string"
            },
            "example": "2579248247516384065",
            "required": true
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ForbiddenError"
            }
          }
        },
        "description": "Forbidden"
      },
      "404": {
        "headers": {
          "x-correlation-id": {
            "description": "A unique identifier assigned to each request, facilitating issue tracing. In the event that a problem arises with a request, this ID can be provided to The Bank of London support team for assistance.",
            "schema": {
              "type": "string"
            },
            "example": "2579248247516384065",
            "required": true
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/NotFoundError"
            }
          }
        },
        "description": "Not Found"
      },
      "409": {
        "headers": {
          "x-correlation-id": {
            "description": "A unique identifier assigned to each request, facilitating issue tracing. In the event that a problem arises with a request, this ID can be provided to The Bank of London support team for assistance.",
            "schema": {
              "type": "string"
            },
            "example": "2579248247516384065",
            "required": true
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ConflictError"
            }
          }
        },
        "description": "Conflict"
      },
      "422": {
        "headers": {
          "x-correlation-id": {
            "description": "A unique identifier assigned to each request, facilitating issue tracing. In the event that a problem arises with a request, this ID can be provided to The Bank of London support team for assistance.",
            "schema": {
              "type": "string"
            },
            "example": "2579248247516384065",
            "required": true
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ValidationError"
            }
          }
        },
        "description": "Validation Failed"
      },
      "429": {
        "headers": {
          "x-correlation-id": {
            "description": "A unique identifier assigned to each request, facilitating issue tracing. In the event that a problem arises with a request, this ID can be provided to The Bank of London support team for assistance.",
            "schema": {
              "type": "string"
            },
            "example": "2579248247516384065",
            "required": true
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/TooManyRequestsError"
            }
          }
        },
        "description": "Too Many Requests"
      },
      "500": {
        "headers": {
          "x-correlation-id": {
            "description": "A unique identifier assigned to each request, facilitating issue tracing. In the event that a problem arises with a request, this ID can be provided to The Bank of London support team for assistance.",
            "schema": {
              "type": "string"
            },
            "example": "2579248247516384065",
            "required": true
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/InternalServerError"
            }
          }
        },
        "description": "Internal Server Error"
      },
      "PaymentUnauthorizedError": {
        "description": "Unauthorized",
        "headers": {
          "x-correlation-id": {
            "description": "A unique identifier assigned to each request, facilitating issue tracing. In the event that a problem arises with a request, this ID can be provided to The Bank of London support team for assistance.",
            "schema": {
              "type": "string"
            },
            "example": "2579248247516384065",
            "required": true
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/UnauthorizedError"
                },
                {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": ["BANK_ACCOUNT_LOCKED", "BANK_ACCOUNT_CLOSED"]
                    },
                    "message": {
                      "type": "string",
                      "example": "Account is locked, please contact your account administrator"
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "PaymentForbiddenError": {
        "description": "Forbidden",
        "headers": {
          "x-correlation-id": {
            "description": "A unique identifier assigned to each request, facilitating issue tracing. In the event that a problem arises with a request, this ID can be provided to The Bank of London support team for assistance.",
            "schema": {
              "type": "string"
            },
            "example": "2579248247516384065",
            "required": true
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ForbiddenError"
                },
                {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": ["PAYEE_IS_NOT_A_NOMINATED_PAYEE"]
                    },
                    "message": {
                      "type": "string",
                      "example": "Recipient bank account details do not match a nominated payee sort code & account number"
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "BankAccountNotFoundError": {
        "description": "Not Found",
        "headers": {
          "x-correlation-id": {
            "description": "A unique identifier assigned to each request, facilitating issue tracing. In the event that a problem arises with a request, this ID can be provided to The Bank of London support team for assistance.",
            "schema": {
              "type": "string"
            },
            "example": "2579248247516384065",
            "required": true
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/NotFoundError"
                },
                {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": ["BANK_ACCOUNT_NOT_FOUND"]
                    },
                    "message": {
                      "type": "string",
                      "example": "Bank account with ID <id> not found"
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "ErrorResponseConflictIdempotencyId": {
        "description": "Conflict",
        "headers": {
          "x-correlation-id": {
            "description": "A unique identifier assigned to each request, facilitating issue tracing. In the event that a problem arises with a request, this ID can be provided to The Bank of London support team for assistance.",
            "schema": {
              "type": "string"
            },
            "example": "2579248247516384065",
            "required": true
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ConflictError"
                },
                {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": ["IDEMPOTENCY_ID_CONFLICT"]
                    },
                    "message": {
                      "type": "string",
                      "example": "Idempotency ID <id> has already been utilised by a previous request"
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "CreateInternalPaymentUnprocessableError": {
        "description": "Validation Failed",
        "headers": {
          "x-correlation-id": {
            "description": "A unique identifier assigned to each request, facilitating issue tracing. In the event that a problem arises with a request, this ID can be provided to The Bank of London support team for assistance.",
            "schema": {
              "type": "string"
            },
            "example": "2579248247516384065",
            "required": true
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ValidationError"
                },
                {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "PAYMENT_EXECUTION_DATE_IS_NOT_NOTICE_PERIOD_COMPLIANT",
                        "INVALID_PAYMENT_FOR_ACCOUNT_TYPE",
                        "PAYMENT_AMOUNT_EXCEEDS_LIMIT",
                        "ONE_TIME_EXECUTION_DATE_CANNOT_BE_IN_PAST",
                        "NO_PAYMENT_EXECUTION_DATE_DEFINED",
                        "RECURRING_PAYMENT_DAY_CANNOT_BE_IN_PAST",
                        "RECURRING_PAYMENT_START_DAY_IS_LATER_THAN_END_DAY",
                        "EXECUTION_DATE_TODAY",
                        "INVALID_RECIPIENT_ACCOUNT_ID_PROVIDED",
                        "PAYMENT_REFERENCE_VIOLATES_PROFANITY_FILTER",
                        "INVALID_SORT_CODE_PROVIDED",
                        "PAYMENT_AMOUNT_EXCEEDS_AVAILABLE_BALANCE"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Amount exceeds available balance"
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "CreateFPSUnprocessableError": {
        "description": "Validation Failed",
        "headers": {
          "x-correlation-id": {
            "description": "A unique identifier assigned to each request, facilitating issue tracing. In the event that a problem arises with a request, this ID can be provided to The Bank of London support team for assistance.",
            "schema": {
              "type": "string"
            },
            "example": "2579248247516384065",
            "required": true
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ValidationError"
                },
                {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "PAYMENT_EXECUTION_DATE_IS_NOT_NOTICE_PERIOD_COMPLIANT",
                        "PAYMENT_AMOUNT_EXCEEDS_LIMIT",
                        "ONE_TIME_EXECUTION_DATE_CANNOT_BE_IN_PAST",
                        "NO_PAYMENT_EXECUTION_DATE_DEFINED",
                        "RECURRING_PAYMENT_DAY_CANNOT_BE_IN_PAST",
                        "RECURRING_PAYMENT_START_DAY_IS_LATER_THAN_END_DAY",
                        "EXECUTION_DATE_TODAY",
                        "INVALID_RECIPIENT_ACCOUNT_ID_PROVIDED",
                        "EXECUTION_DATE_ON_WEEKEND",
                        "EXECUTION_DATE_ON_PUBLIC_HOLIDAY",
                        "PAYMENT_REFERENCE_VIOLATES_PROFANITY_FILTER",
                        "INVALID_PAYMENT_FOR_ACCOUNT_TYPE",
                        "INVALID_SORT_CODE_PROVIDED",
                        "PAYMENT_AMOUNT_EXCEEDS_AVAILABLE_BALANCE"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Payment amount exceeds maximum amount configured for account"
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "CreateBacsPaymentUnprocessableError": {
        "description": "Validation Failed",
        "headers": {
          "x-correlation-id": {
            "description": "A unique identifier assigned to each request, facilitating issue tracing. In the event that a problem arises with a request, this ID can be provided to The Bank of London support team for assistance.",
            "schema": {
              "type": "string"
            },
            "example": "2579248247516384065",
            "required": true
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ValidationError"
                },
                {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BACS_EXECUTION_DATE_IN_THE_PAST",
                        "BACS_EXECUTION_DATE_LIMIT_EXCEEDED",
                        "BACS_EXECUTION_DATE_ON_WEEKEND",
                        "BACS_NO_PAYEES_PROVIDED",
                        "BACS_MULTIPLE_PAYEES_NOT_ALLOWED",
                        "BACS_INTERNAL_SORT_CODE_PROVIDED",
                        "BACS_EXECUTION_DATE_ON_PUBLIC_HOLIDAY",
                        "PAYMENT_REFERENCE_VIOLATES_PROFANITY_FILTER",
                        "INVALID_PAYMENT_FOR_ACCOUNT_TYPE",
                        "INVALID_SORT_CODE_PROVIDED",
                        "BACS_EXECUTION_DATE_CUTOFF_TIME",
                        "PAYMENT_AMOUNT_EXCEEDS_AVAILABLE_BALANCE"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "No payees provided for BACS payment"
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "CreateChapsBadRequestError": {
        "description": "Bad Request",
        "headers": {
          "x-correlation-id": {
            "description": "A unique identifier assigned to each request, facilitating issue tracing. In the event that a problem arises with a request, this ID can be provided to The Bank of London support team for assistance.",
            "schema": {
              "type": "string"
            },
            "example": "2579248247516384065",
            "required": true
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/BadRequestError"
                },
                {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "CHAPS_INVALID_SORT_CODE_PROVIDED",
                        "NO_PAYMENT_EXECUTION_DATE_DEFINED"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Sending CHAPS payments from this account is not allowed"
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "CreateChapsPaymentUnprocessableError": {
        "description": "Validation Failed",
        "headers": {
          "x-correlation-id": {
            "description": "A unique identifier assigned to each request, facilitating issue tracing. In the event that a problem arises with a request, this ID can be provided to The Bank of London support team for assistance.",
            "schema": {
              "type": "string"
            },
            "example": "2579248247516384065",
            "required": true
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ValidationError"
                },
                {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "INVALID_PAYMENT_FOR_ACCOUNT_TYPE",
                        "ONE_TIME_EXECUTION_DATE_CANNOT_BE_IN_PAST",
                        "CHAPS_EXECUTION_DATE_ON_WEEKEND",
                        "CHAPS_EXECUTION_DATE_LIMIT_EXCEEDED",
                        "PAYMENT_EXECUTION_DATE_IS_NOT_NOTICE_PERIOD_COMPLIANT",
                        "INVALID_RECIPIENT_ACCOUNT_ID_PROVIDED",
                        "PAYMENT_REFERENCE_VIOLATES_PROFANITY_FILTER",
                        "INVALID_SORT_CODE_PROVIDED",
                        "CHAPS_EXECUTION_DATE_CUTOFF_TIME",
                        "PAYMENT_AMOUNT_EXCEEDS_AVAILABLE_BALANCE"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "CHAPS payment cannot be executed on weekend"
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "PaymentNotFound": {
        "description": "Not Found",
        "headers": {
          "x-correlation-id": {
            "description": "A unique identifier assigned to each request, facilitating issue tracing. In the event that a problem arises with a request, this ID can be provided to The Bank of London support team for assistance.",
            "schema": {
              "type": "string"
            },
            "example": "2579248247516384065",
            "required": true
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/NotFoundError"
                },
                {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": ["PAYMENT_DOES_NOT_EXIST"]
                    },
                    "message": {
                      "type": "string",
                      "example": "Payment <id> does not exist"
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "StandingOrderUnauthorizedError": {
        "description": "Unauthorized",
        "headers": {
          "x-correlation-id": {
            "description": "A unique identifier assigned to each request, facilitating issue tracing. In the event that a problem arises with a request, this ID can be provided to The Bank of London support team for assistance.",
            "schema": {
              "type": "string"
            },
            "example": "2579248247516384065",
            "required": true
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/UnauthorizedError"
                },
                {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": ["BANK_ACCOUNT_LOCKED", "BANK_ACCOUNT_CLOSED"]
                    },
                    "message": {
                      "type": "string",
                      "example": "Account is locked, please contact your account administrator"
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "CreateFPSStandingOrderUnprocessableError": {
        "description": "Validation Failed",
        "headers": {
          "x-correlation-id": {
            "description": "A unique identifier assigned to each request, facilitating issue tracing. In the event that a problem arises with a request, this ID can be provided to The Bank of London support team for assistance.",
            "schema": {
              "type": "string"
            },
            "example": "2579248247516384065",
            "required": true
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ValidationError"
                },
                {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "RECURRING_PAYMENT_DAY_CANNOT_BE_IN_PAST",
                        "RECURRING_PAYMENT_START_DAY_IS_LATER_THAN_END_DAY",
                        "EXECUTION_DATE_TODAY",
                        "INVALID_RECIPIENT_ACCOUNT_ID_PROVIDED",
                        "EXECUTION_DATE_ON_WEEKEND",
                        "EXECUTION_DATE_ON_PUBLIC_HOLIDAY",
                        "INVALID_PAYMENT_FOR_ACCOUNT_TYPE",
                        "INVALID_SORT_CODE_PROVIDED",
                        "PAYMENT_AMOUNT_EXCEEDS_AVAILABLE_BALANCE"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Standing order payment start date cannot be in the past"
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "CreateInternalStandingOrderUnprocessableError": {
        "description": "Validation Failed",
        "headers": {
          "x-correlation-id": {
            "description": "A unique identifier assigned to each request, facilitating issue tracing. In the event that a problem arises with a request, this ID can be provided to The Bank of London support team for assistance.",
            "schema": {
              "type": "string"
            },
            "example": "2579248247516384065",
            "required": true
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ValidationError"
                },
                {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "RECURRING_PAYMENT_DAY_CANNOT_BE_IN_PAST",
                        "RECURRING_PAYMENT_START_DAY_IS_LATER_THAN_END_DAY",
                        "EXECUTION_DATE_TODAY",
                        "INVALID_RECIPIENT_ACCOUNT_ID_PROVIDED",
                        "INVALID_PAYMENT_FOR_ACCOUNT_TYPE",
                        "INVALID_SORT_CODE_PROVIDED",
                        "PAYMENT_AMOUNT_EXCEEDS_AVAILABLE_BALANCE"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "example": "Standing order payment start date cannot be in the past"
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "StandingOrderNotFound": {
        "description": "Not Found",
        "headers": {
          "x-correlation-id": {
            "description": "A unique identifier assigned to each request, facilitating issue tracing. In the event that a problem arises with a request, this ID can be provided to The Bank of London support team for assistance.",
            "schema": {
              "type": "string"
            },
            "example": "2579248247516384065",
            "required": true
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/NotFoundError"
                },
                {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": ["STANDING_ORDER_NOT_FOUND"]
                    },
                    "message": {
                      "type": "string",
                      "example": "Standing order with ID <id> does not exist"
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "UpdateStandingOrderConflictError": {
        "description": "Conflict",
        "headers": {
          "x-correlation-id": {
            "description": "A unique identifier assigned to each request, facilitating issue tracing. In the event that a problem arises with a request, this ID can be provided to The Bank of London support team for assistance.",
            "schema": {
              "type": "string"
            },
            "example": "2579248247516384065",
            "required": true
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ConflictError"
                },
                {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": ["STANDING_ORDER_NOT_ACTIVE"]
                    },
                    "message": {
                      "type": "string",
                      "example": "Standing order is not active"
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "CancelStandingOrderConflictError": {
        "description": "Conflict",
        "headers": {
          "x-correlation-id": {
            "description": "A unique identifier assigned to each request, facilitating issue tracing. In the event that a problem arises with a request, this ID can be provided to The Bank of London support team for assistance.",
            "schema": {
              "type": "string"
            },
            "example": "2579248247516384065",
            "required": true
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ConflictError"
                },
                {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": ["STANDING_ORDER_CANNOT_BE_CANCELLED"]
                    },
                    "message": {
                      "type": "string",
                      "example": "Standing order is not active"
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "AccountIdError": {
        "description": "Not Found",
        "headers": {
          "x-correlation-id": {
            "description": "A unique identifier assigned to each request, facilitating issue tracing. In the event that a problem arises with a request, this ID can be provided to The Bank of London support team for assistance.",
            "schema": {
              "type": "string"
            },
            "example": "2579248247516384065",
            "required": true
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/NotFoundError"
                },
                {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": ["INVALID_ACCOUNT_ID"]
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid accountId <id> provided"
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "MandateNotFoundError": {
        "description": "Not Found",
        "headers": {
          "x-correlation-id": {
            "description": "A unique identifier assigned to each request, facilitating issue tracing. In the event that a problem arises with a request, this ID can be provided to The Bank of London support team for assistance.",
            "schema": {
              "type": "string"
            },
            "example": "2579248247516384065",
            "required": true
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/NotFoundError"
                },
                {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": ["MANDATE_NOT_FOUND", "BANK_ACCOUNT_NOT_FOUND"]
                    },
                    "message": {
                      "type": "string",
                      "example": "Bank account with ID <id> not found"
                    }
                  }
                }
              ]
            }
          }
        }
      }
    },
    "parameters": {
      "JwsSignature": {
        "in": "header",
        "name": "x-jws-signature",
        "description": "A JSON web signature representing signed content using JSON data structures. It contains contextual information from the request signed using a private key generated within The Bank of London Developer Studio application.",
        "content": {
          "application/json": {
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "Page": {
        "in": "query",
        "name": "page",
        "schema": {
          "type": "integer",
          "default": 1
        },
        "required": false,
        "description": "The page number of the result set to be returned."
      },
      "PageSize": {
        "in": "query",
        "name": "pageSize",
        "required": false,
        "schema": {
          "type": "integer",
          "description": "The number of items to be returned per page.",
          "default": 20,
          "minimum": 1,
          "maximum": 50
        }
      },
      "StatementStartDateQueryParam": {
        "in": "query",
        "name": "startDate",
        "schema": {
          "type": "string"
        },
        "required": false,
        "description": "The oldest `endDate` from which the statements will be provided.\n",
        "example": "2024-08-02"
      },
      "StatementEndDateQueryParam": {
        "in": "query",
        "name": "endDate",
        "schema": {
          "type": "string"
        },
        "required": false,
        "description": "The most recent `endDate` to which the statements will be provided.\n",
        "example": "2024-08-31"
      }
    },
    "examples": {},
    "requestBodies": {},
    "headers": {
      "x-correlation-id": {
        "description": "A unique identifier assigned to each request, facilitating issue tracing. In the event that a problem arises with a request, this ID can be provided to The Bank of London support team for assistance.",
        "schema": {
          "type": "string"
        },
        "example": "2579248247516384065",
        "required": true
      }
    }
  }
}
